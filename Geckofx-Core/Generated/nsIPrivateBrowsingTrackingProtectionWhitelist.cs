// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPrivateBrowsingTrackingProtectionWhitelist.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// The Private Browsing Tracking Protection service checks a URI against an
    /// in-memory list of tracking sites.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("c77ddfac-6cd6-43a9-84e8-91682a1a7b18")]
	public interface nsIPrivateBrowsingTrackingProtectionWhitelist
	{
		
		/// <summary>
        /// Add a URI to the list of allowed tracking sites in Private Browsing mode
        /// (essentially a tracking whitelist). This operation will cause the URI to
        /// be registered if it does not currently exist. If it already exists, then
        /// the operation is essentially a no-op.
        ///
        /// @param uri         the uri to add to the list
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddToAllowList([MarshalAs(UnmanagedType.Interface)] nsIURI uri);
		
		/// <summary>
        /// Remove a URI from the list of allowed tracking sites in Private Browsing
        /// mode (the tracking whitelist). If the URI is not already in the list,
        /// then the operation is essentially a no-op.
        ///
        /// @param uri         the uri to remove from the list
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveFromAllowList([MarshalAs(UnmanagedType.Interface)] nsIURI uri);
		
		/// <summary>
        /// Check if a URI exists in the list of allowed tracking sites in Private
        /// Browsing mode (the tracking whitelist).
        ///
        /// @param uri         the uri to look for in the list
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool ExistsInAllowList([MarshalAs(UnmanagedType.Interface)] nsIURI uri);
	}
}
