// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsINetworkLinkService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Network link status monitoring service.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("103e5293-77b3-4b70-af59-6e9e4a1f994a")]
	public interface nsINetworkLinkService
	{
		
		/// <summary>
        /// This is set to true when the system is believed to have a usable
        /// network connection.
        ///
        /// The link is only up when network connections can be established. For
        /// example, the link is down during DHCP configuration (unless there
        /// is another usable interface already configured).
        ///
        /// If the link status is not currently known, we generally assume that
        /// it is up.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsLinkUpAttribute();
		
		/// <summary>
        /// This is set to true when we believe that isLinkUp is accurate.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetLinkStatusKnownAttribute();
		
		/// <summary>
        /// The type of network connection.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetLinkTypeAttribute();
	}
	
	/// <summary>nsINetworkLinkServiceConsts </summary>
	public class nsINetworkLinkServiceConsts
	{
		
		// <summary>
        //Link type constants </summary>
		public const ulong LINK_TYPE_UNKNOWN = 0;
		
		// 
		public const ulong LINK_TYPE_ETHERNET = 1;
		
		// 
		public const ulong LINK_TYPE_USB = 2;
		
		// 
		public const ulong LINK_TYPE_WIFI = 3;
		
		// 
		public const ulong LINK_TYPE_WIMAX = 4;
		
		// 
		public const ulong LINK_TYPE_2G = 5;
		
		// 
		public const ulong LINK_TYPE_3G = 6;
		
		// 
		public const ulong LINK_TYPE_4G = 7;
	}
}
