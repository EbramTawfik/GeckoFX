// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsINetworkStatsServiceProxy.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("5f821529-1d80-4ab5-a933-4e1b3585b6bc")]
	public interface nsINetworkStatsServiceProxyCallback
	{
		
		/// <summary>
        /// @param aResult callback result with boolean value
        /// @param aMessage message
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Notify([MarshalAs(UnmanagedType.U1)] bool aResult, ref Gecko.JsVal aMessage);
	}
	
	/// <summary>nsINetworkStatsServiceProxy </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("705c01d6-8574-464c-8ec9-ac1522a45546")]
	public interface nsINetworkStatsServiceProxy
	{
		
		/// <summary>
        /// An interface used to record per-app traffic data.
        /// @param aAppId app id
        /// @param aNetworkInterface network
        /// @param aTimeStamp time stamp
        /// @param aRxBytes received data amount
        /// @param aTxBytes transmitted data amount
        /// @param aIsAccumulative is stats accumulative
        /// @param aCallback an optional callback
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SaveAppStats(uint aAppId, [MarshalAs(UnmanagedType.Interface)] nsINetworkInterface aNetwork, ulong aTimeStamp, ulong aRxBytes, ulong aTxBytes, [MarshalAs(UnmanagedType.U1)] bool aIsAccumulative, [MarshalAs(UnmanagedType.Interface)] nsINetworkStatsServiceProxyCallback aCallback);
		
		/// <summary>
        /// An interface used to record per-system service traffic data.
        /// @param aServiceType system service type
        /// @param aNetworkInterface network
        /// @param aTimeStamp time stamp
        /// @param aRxBytes received data amount
        /// @param aTxBytes transmitted data amount
        /// @param aIsAccumulative is stats accumulative
        /// @param aCallback an optional callback
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SaveServiceStats([MarshalAs(UnmanagedType.LPStr)] string aServiceType, [MarshalAs(UnmanagedType.Interface)] nsINetworkInterface aNetwork, ulong aTimeStamp, ulong aRxBytes, ulong aTxBytes, [MarshalAs(UnmanagedType.U1)] bool aIsAccumulative, [MarshalAs(UnmanagedType.Interface)] nsINetworkStatsServiceProxyCallback aCallback);
	}
}
