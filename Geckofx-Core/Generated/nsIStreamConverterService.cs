// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIStreamConverterService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// The nsIStreamConverterService is a higher level stream converter factory
    /// responsible for locating and creating stream converters
    /// (nsIStreamConverter).
    ///
    /// This service retrieves an interface that can convert data from a particular
    /// MIME type, to a particular MIME type. It is responsible for any intermediary
    /// conversion required in order to get from X to Z, assuming direct conversion
    /// is not possible.
    ///
    /// @author Jud Valeski
    /// @see nsIStreamConverter
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f2b1ab53-f0bd-4adb-9365-e59b1701a258")]
	public interface nsIStreamConverterService
	{
		
		/// <summary>
        /// Tests whether conversion between the two specified types is possible.
        /// This is cheaper than calling convert()/asyncConvertData(); it is not
        /// necessary to call this function before calling one of those, though.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanConvert([MarshalAs(UnmanagedType.LPStr)] string aFromType, [MarshalAs(UnmanagedType.LPStr)] string aToType);
		
		/// <summary>
        /// <b>SYNCHRONOUS VERSION</b>
        /// Converts a stream of one type, to a stream of another type.
        ///
        /// Use this method when you have a stream you want to convert.
        ///
        /// @param aFromStream   The stream representing the original/raw data.
        /// @param aFromType     The MIME type of aFromStream.
        /// @param aToType       The MIME type of the returned stream.
        /// @param aContext      Either an opaque context, or a converter specific
        /// context (implementation specific).
        /// @return              The converted stream. NOTE: The returned stream
        /// may not already be converted. An efficient stream
        /// converter implementation will convert data on
        /// demand rather than buffering the converted data
        /// until it is used.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIInputStream Convert([MarshalAs(UnmanagedType.Interface)] nsIInputStream aFromStream, [MarshalAs(UnmanagedType.LPStr)] string aFromType, [MarshalAs(UnmanagedType.LPStr)] string aToType, [MarshalAs(UnmanagedType.Interface)] nsISupports aContext);
		
		/// <summary>
        /// <b>ASYNCHRONOUS VERSION</b>
        /// Retrieves a nsIStreamListener that receives the original/raw data via its
        /// nsIStreamListener::OnDataAvailable() callback, then converts and pushes
        /// the data to aListener.
        ///
        /// Use this method when you want to proxy (and convert) nsIStreamListener
        /// callbacks asynchronously.
        ///
        /// @param aFromType     The MIME type of the original/raw data.
        /// @param aToType       The MIME type of the converted data.
        /// @param aListener     The listener that receives the converted data.
        /// @param aCtxt         Either an opaque context, or a converter specific
        /// context (implementation specific).
        /// @return              A nsIStreamListener that receives data via its
        /// OnDataAvailable() method.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStreamListener AsyncConvertData([MarshalAs(UnmanagedType.LPStr)] string aFromType, [MarshalAs(UnmanagedType.LPStr)] string aToType, [MarshalAs(UnmanagedType.Interface)] nsIStreamListener aListener, [MarshalAs(UnmanagedType.Interface)] nsISupports aContext);
	}
}
