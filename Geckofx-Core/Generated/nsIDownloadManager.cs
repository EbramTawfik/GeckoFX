// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDownloadManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Keeps track of ongoing downloads, in the form of nsIDownload's.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0c07ffeb-791b-49f3-ae38-2c331fd55a52")]
	public interface nsIDownloadManagerResult
	{
		
		/// <summary>
        /// Process an asynchronous result from getDownloadByGUID.
        ///
        /// @param aStatus The result code of the operation:
        /// * NS_OK: an item was found. No other success values are returned.
        /// * NS_ERROR_NOT_AVAILABLE: no such item was found.
        /// * Other error values are possible, but less well-defined.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleResult(int aStatus, [MarshalAs(UnmanagedType.Interface)] nsIDownload aDownload);
	}
	
	/// <summary>nsIDownloadManager </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b29aac15-7ec4-4ab3-a53b-08f78aed3b34")]
	public interface nsIDownloadManager
	{
		
		/// <summary>
        /// Creates an nsIDownload and adds it to be managed by the download manager.
        ///
        /// @param aSource The source URI of the transfer. Must not be null.
        ///
        /// @param aTarget The target URI of the transfer. Must not be null.
        ///
        /// @param aDisplayName The user-readable description of the transfer.
        /// Can be empty.
        ///
        /// @param aMIMEInfo The MIME info associated with the target,
        /// including MIME type and helper app when appropriate.
        /// This parameter is optional.
        ///
        /// @param startTime Time when the download started
        ///
        /// @param aTempFile The location of a temporary file; i.e. a file in which
        /// the received data will be stored, but which is not
        /// equal to the target file. (will be moved to the real
        /// target by the DownloadManager, when the download is
        /// finished). This will be null for all callers except for
        /// nsExternalHelperAppHandler. Addons should generally pass
        /// null for aTempFile. This will be moved to the real target
        /// by the download manager when the download is finished,
        /// and the action indicated by aMIMEInfo will be executed.
        ///
        /// @param aCancelable An object that can be used to abort the download.
        /// Must not be null.
        ///
        /// @param aIsPrivate Used to determine the privacy status of the new download.
        /// If true, the download is stored in a manner that leaves
        /// no permanent trace outside of the current private session.
        ///
        /// @return The newly created download item with the passed-in properties.
        ///
        /// @note This does not actually start a download.  If you want to add and
        /// start a download, you need to create an nsIWebBrowserPersist, pass it
        /// as the aCancelable object, call this method, set the progressListener
        /// as the returned download object, then call saveURI.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDownload AddDownload(short aDownloadType, [MarshalAs(UnmanagedType.Interface)] nsIURI aSource, [MarshalAs(UnmanagedType.Interface)] nsIURI aTarget, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aDisplayName, [MarshalAs(UnmanagedType.Interface)] nsIMIMEInfo aMIMEInfo, long aStartTime, [MarshalAs(UnmanagedType.Interface)] nsIFile aTempFile, [MarshalAs(UnmanagedType.Interface)] nsICancelable aCancelable, [MarshalAs(UnmanagedType.U1)] bool aIsPrivate);
		
		/// <summary>
        /// Retrieves a download managed by the download manager.  This can be one that
        /// is in progress, or one that has completed in the past and is stored in the
        /// database.
        ///
        /// @param aID The unique ID of the download.
        /// @return The download with the specified ID.
        /// @throws NS_ERROR_NOT_AVAILABLE if the download is not in the database.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDownload GetDownload(uint aID);
		
		/// <summary>
        /// Retrieves a download managed by the download manager.  This can be one that
        /// is in progress, or one that has completed in the past and is stored in the
        /// database.  The result of this method is returned via an asynchronous callback,
        /// the parameter of which will be an nsIDownload object, or null if none exists
        /// with the provided GUID.
        ///
        /// @param aGUID The unique GUID of the download.
        /// @param aCallback The callback to invoke with the result of the search.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDownloadByGUID([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aGUID, [MarshalAs(UnmanagedType.Interface)] nsIDownloadManagerResult aCallback);
		
		/// <summary>
        /// Cancels the download with the specified ID if it's currently in-progress.
        /// This calls cancel(NS_BINDING_ABORTED) on the nsICancelable provided by the
        /// download.
        ///
        /// @param aID The unique ID of the download.
        /// @throws NS_ERROR_FAILURE if the download is not in-progress.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CancelDownload(uint aID);
		
		/// <summary>
        /// Removes the download with the specified id if it's not currently
        /// in-progress.  Whereas cancelDownload simply cancels the transfer, but
        /// retains information about it, removeDownload removes all knowledge of it.
        ///
        /// Also notifies observers of the "download-manager-remove-download-guid"
        /// topic with the download guid as the subject to allow any DM consumers to
        /// react to the removal.
        ///
        /// Also may notify observers of the "download-manager-remove-download" topic
        /// with the download id as the subject, if the download removed is public
        /// or if global private browsing mode is in use. This notification is deprecated;
        /// the guid notification should be relied upon instead.
        ///
        /// @param aID The unique ID of the download.
        /// @throws NS_ERROR_FAILURE if the download is active.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveDownload(uint aID);
		
		/// <summary>
        /// Removes all inactive downloads that were started inclusively within the
        /// specified time frame.
        ///
        /// @param aBeginTime
        /// The start time to remove downloads by in microseconds.
        /// @param aEndTime
        /// The end time to remove downloads by in microseconds.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveDownloadsByTimeframe(long aBeginTime, long aEndTime);
		
		/// <summary>
        /// Pause the specified download.
        ///
        /// @param aID The unique ID of the download.
        /// @throws NS_ERROR_FAILURE if the download is not in-progress.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PauseDownload(uint aID);
		
		/// <summary>
        /// Resume the specified download.
        ///
        /// @param aID The unique ID of the download.
        /// @throws NS_ERROR_FAILURE if the download is not in-progress.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResumeDownload(uint aID);
		
		/// <summary>
        /// Retries a failed download.
        ///
        /// @param aID The unique ID of the download.
        /// @throws NS_ERROR_NOT_AVAILALE if the download id is not known.
        /// @throws NS_ERROR_FAILURE if the download is not in the following states:
        /// nsIDownloadManager::DOWNLOAD_CANCELED
        /// nsIDownloadManager::DOWNLOAD_FAILED
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RetryDownload(uint aID);
		
		/// <summary>
        /// The database connection to the downloads database.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		mozIStorageConnection GetDBConnectionAttribute();
		
		/// <summary>Member GetPrivateDBConnectionAttribute </summary>
		/// <returns>A mozIStorageConnection</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		mozIStorageConnection GetPrivateDBConnectionAttribute();
		
		/// <summary>
        /// Whether or not there are downloads that can be cleaned up (removed)
        /// i.e. downloads that have completed, have failed or have been canceled.
        /// In global private browsing mode, this reports the status of the relevant
        /// private or public downloads. In per-window mode, it only reports for
        /// public ones.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetCanCleanUpAttribute();
		
		/// <summary>
        /// Whether or not there are private downloads that can be cleaned up (removed)
        /// i.e. downloads that have completed, have failed or have been canceled.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetCanCleanUpPrivateAttribute();
		
		/// <summary>
        /// Removes completed, failed, and canceled downloads from the list.
        /// In global private browsing mode, this operates on the relevant
        /// private or public downloads. In per-window mode, it only operates
        /// on public ones.
        ///
        /// Also notifies observers of the "download-manager-remove-download-gui"
        /// and "download-manager-remove-download" topics with a null subject to
        /// allow any DM consumers to react to the removals.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CleanUp();
		
		/// <summary>
        /// Removes completed, failed, and canceled downloads from the list
        /// of private downloads.
        ///
        /// Also notifies observers of the "download-manager-remove-download-gui"
        /// and "download-manager-remove-download" topics with a null subject to
        /// allow any DM consumers to react to the removals.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CleanUpPrivate();
		
		/// <summary>
        /// The number of files currently being downloaded.
        ///
        /// In global private browsing mode, this reports the status of the relevant
        /// private or public downloads. In per-window mode, it only reports public
        /// ones.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetActiveDownloadCountAttribute();
		
		/// <summary>
        /// The number of private files currently being downloaded.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetActivePrivateDownloadCountAttribute();
		
		/// <summary>
        /// An enumeration of active nsIDownloads
        ///
        /// In global private browsing mode, this reports the status of the relevant
        /// private or public downloads. In per-window mode, it only reports public
        /// ones.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISimpleEnumerator GetActiveDownloadsAttribute();
		
		/// <summary>
        /// An enumeration of active private nsIDownloads
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISimpleEnumerator GetActivePrivateDownloadsAttribute();
		
		/// <summary>
        /// Adds a listener to the download manager. It is expected that this
        /// listener will only access downloads via their deprecated integer id attribute,
        /// and when global private browsing compatibility mode is disabled, this listener
        /// will receive no notifications for downloads marked private.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddListener([MarshalAs(UnmanagedType.Interface)] nsIDownloadProgressListener aListener);
		
		/// <summary>
        /// Adds a listener to the download manager. This listener must be able to
        /// understand and use the guid attribute of downloads for all interactions
        /// with the download manager.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddPrivacyAwareListener([MarshalAs(UnmanagedType.Interface)] nsIDownloadProgressListener aListener);
		
		/// <summary>
        /// Removes a listener from the download manager.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveListener([MarshalAs(UnmanagedType.Interface)] nsIDownloadProgressListener aListener);
		
		/// <summary>
        /// Returns the platform default downloads directory.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIFile GetDefaultDownloadsDirectoryAttribute();
		
		/// <summary>
        /// Returns the user configured downloads directory.
        /// The path is dependent on two user configurable prefs
        /// set in preferences:
        ///
        /// browser.download.folderList
        /// Indicates the location users wish to save downloaded
        /// files too.
        /// Values:
        /// 0 - The desktop is the default download location.
        /// 1 - The system's downloads folder is the default download location.
        /// 2 - The default download location is elsewhere as specified in
        /// browser.download.dir. If invalid, userDownloadsDirectory
        /// will fallback on defaultDownloadsDirectory.
        ///
        /// browser.download.dir -
        /// A local path the user may have selected at some point
        /// where downloaded files are saved. The use of which is
        /// enabled when folderList equals 2.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIFile GetUserDownloadsDirectoryAttribute();
	}
	
	/// <summary>nsIDownloadManagerConsts </summary>
	public class nsIDownloadManagerConsts
	{
		
		// <summary>
        // Download type for generic file download.
        // </summary>
		public const short DOWNLOAD_TYPE_DOWNLOAD = 0;
		
		// <summary>
        // Download state for uninitialized download object.
        // </summary>
		public const short DOWNLOAD_NOTSTARTED = -1;
		
		// <summary>
        // Download is currently transferring data.
        // </summary>
		public const short DOWNLOAD_DOWNLOADING = 0;
		
		// <summary>
        // Download completed including any processing of the target
        // file.  (completed)
        // </summary>
		public const short DOWNLOAD_FINISHED = 1;
		
		// <summary>
        // Transfer failed due to error. (completed)
        // </summary>
		public const short DOWNLOAD_FAILED = 2;
		
		// <summary>
        // Download was canceled by the user. (completed)
        // </summary>
		public const short DOWNLOAD_CANCELED = 3;
		
		// <summary>
        // Transfer was paused by the user.
        // </summary>
		public const short DOWNLOAD_PAUSED = 4;
		
		// <summary>
        // Download is active but data has not yet been received.
        // </summary>
		public const short DOWNLOAD_QUEUED = 5;
		
		// <summary>
        // Transfer request was blocked by parental controls proxies. (completed)
        // </summary>
		public const short DOWNLOAD_BLOCKED_PARENTAL = 6;
		
		// <summary>
        // Transferred download is being scanned by virus scanners.
        // </summary>
		public const short DOWNLOAD_SCANNING = 7;
		
		// <summary>
        // A virus was detected in the download. The target will most likely
        // no longer exist. (completed)
        // </summary>
		public const short DOWNLOAD_DIRTY = 8;
		
		// <summary>
        // Win specific: Request was blocked by zone policy settings.
        // (see bug #416683) (completed)
        // </summary>
		public const short DOWNLOAD_BLOCKED_POLICY = 9;
	}
}
