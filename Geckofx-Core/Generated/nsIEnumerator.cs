// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIEnumerator.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// DO NOT USE THIS INTERFACE.  IT IS HORRIBLY BROKEN, USES NS_COMFALSE
    /// AND IS BASICALLY IMPOSSIBLE TO USE CORRECTLY THROUGH PROXIES OR
    /// XPCONNECT.  IF YOU SEE NEW USES OF THIS INTERFACE IN CODE YOU ARE
    /// REVIEWING, YOU SHOULD INSIST ON nsISimpleEnumerator.
    ///
    /// DON'T MAKE ME COME OVER THERE.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ad385286-cbc4-11d2-8cca-0060b0fc14a3")]
	public interface nsIEnumerator
	{
		
		/// <summary>
        ///First will reset the list. will return NS_FAILED if no items
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void First();
		
		/// <summary>
        ///Next will advance the list. will return failed if already at end
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Next();
		
		/// <summary>
        ///CurrentItem will return the CurrentItem item it will fail if the
        /// list is empty
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISupports CurrentItem();
		
		/// <summary>
        ///return if the collection is at the end.  that is the beginning following
        /// a call to Prev and it is the end of the list following a call to next
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void IsDone();
	}
	
	/// <summary>nsIBidirectionalEnumerator </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("75f158a0-cadd-11d2-8cca-0060b0fc14a3")]
	public interface nsIBidirectionalEnumerator : nsIEnumerator
	{
		
		/// <summary>
        ///First will reset the list. will return NS_FAILED if no items
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void First();
		
		/// <summary>
        ///Next will advance the list. will return failed if already at end
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Next();
		
		/// <summary>
        ///CurrentItem will return the CurrentItem item it will fail if the
        /// list is empty
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsISupports CurrentItem();
		
		/// <summary>
        ///return if the collection is at the end.  that is the beginning following
        /// a call to Prev and it is the end of the list following a call to next
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void IsDone();
		
		/// <summary>
        ///Last will reset the list to the end. will return NS_FAILED if no items
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Last();
		
		/// <summary>
        ///Prev will decrement the list. will return failed if already at beginning
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Prev();
	}
}
