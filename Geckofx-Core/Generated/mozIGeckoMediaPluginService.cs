// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file mozIGeckoMediaPluginService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b5492915-2f0e-4973-9f91-a6fe61ac4749")]
	public interface mozIGeckoMediaPluginService
	{
		
		/// <summary>
        /// The GMP thread. Callable from any thread.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIThread GetThreadAttribute();
		
		/// <summary>
        /// Get a plugin that supports the specified tags.
        /// Callable on any thread
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool HasPluginForAPI([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase api, TagArray tags);
		
		/// <summary>
        /// Get the version of the plugin that supports the specified tags.
        /// Callable on any thread
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPluginVersionForAPI([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase api, TagArray tags, [MarshalAs(UnmanagedType.U1)] ref bool hasPlugin, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase version);
		
		/// <summary>
        /// Get a video decoder that supports the specified tags.
        /// The array of tags should at least contain a codec tag, and optionally
        /// other tags such as for EME keysystem.
        /// Callable only on GMP thread.
        /// This is an asynchronous operation, the Done method of the callback object
        /// will be called on the GMP thread with the result (which might be null in
        /// the case of failure). This method always takes ownership of the callback
        /// object, but if this method returns an error then the Done method of the
        /// callback object will not be called at all.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetGMPVideoDecoder(TagArray tags, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase nodeId, GetGMPVideoDecoderCallback callback);
		
		/// <summary>
        /// Get a video encoder that supports the specified tags.
        /// The array of tags should at least contain a codec tag, and optionally
        /// other tags.
        /// Callable only on GMP thread.
        /// This is an asynchronous operation, the Done method of the callback object
        /// will be called on the GMP thread with the result (which might be null in
        /// the case of failure). This method always takes ownership of the callback
        /// object, but if this method returns an error then the Done method of the
        /// callback object will not be called at all.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetGMPVideoEncoder(TagArray tags, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase nodeId, GetGMPVideoEncoderCallback callback);
		
		/// <summary>
        /// Returns an audio decoder that supports the specified tags.
        /// The array of tags should at least contain a codec tag, and optionally
        /// other tags such as for EME keysystem.
        /// Callable only on GMP thread.
        /// This is an asynchronous operation, the Done method of the callback object
        /// will be called on the GMP thread with the result (which might be null in
        /// the case of failure). This method always takes ownership of the callback
        /// object, but if this method returns an error then the Done method of the
        /// callback object will not be called at all.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetGMPAudioDecoder(TagArray tags, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase nodeId, GetGMPAudioDecoderCallback callback);
		
		/// <summary>
        /// Returns a decryption session manager that supports the specified tags.
        /// The array of tags should at least contain a key system tag, and optionally
        /// other tags.
        /// Callable only on GMP thread.
        /// This is an asynchronous operation, the Done method of the callback object
        /// will be called on the GMP thread with the result (which might be null in
        /// the case of failure). This method always takes ownership of the callback
        /// object, but if this method returns an error then the Done method of the
        /// callback object will not be called at all.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetGMPDecryptor(TagArray tags, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase nodeId, GetGMPDecryptorCallback callback);
		
		/// <summary>
        /// Gets the NodeId for a (origin, urlbarOrigin, isInprivateBrowsing) tuple.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetNodeId([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase origin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase topLevelOrigin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase gmpName, [MarshalAs(UnmanagedType.U1)] bool inPrivateBrowsingMode, GetNodeIdCallback callback);
		
		/// <summary>
        /// Stores the result of trying to create a decoder for the given keysystem.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UpdateTrialCreateState([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase keySystem, uint status);
	}
}
