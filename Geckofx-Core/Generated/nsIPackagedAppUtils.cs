// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPackagedAppUtils.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// A package using privileged APIs should be signed by marketplace or trust-
    /// worthy developers. When Necko receives such a package, it has to
    /// extract the manifest and the signature and calls verifyManifest(...) to verify
    /// the manifest. nsIPackagedAppUtils will parse the manifest and
    /// store the hash values of each resource. When a resource is ready, Necko
    /// will calculate its hash value (including the header like Content-Location: xxx),
    /// and calls checkIntegrity(...) to verify the integrity.
    ///
    /// For more detail:
    /// https://wiki.mozilla.org/FirefoxOS/New_security_model/Packaging
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2963609c-370b-4a76-9858-6f05121d0473")]
	public interface nsIPackagedAppUtils
	{
		
		/// <summary>
        /// @aHeader is the package's header including
        /// - "manifest-signature: xxxxxx" (base64 encoding)
        /// @aManifest is the manifest of the package
        /// - the multipart header is included
        /// - manifest must be the first resource of the package
        /// @aCallback is the callback, see comments of nsIVerificationCallback below
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VerifyManifest([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHeader, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aManifest, [MarshalAs(UnmanagedType.Interface)] nsIVerificationCallback aVerifier, [MarshalAs(UnmanagedType.U1)] bool aDeveloperMode);
		
		/// <summary>
        /// @aFileName is the name of a resource in the package
        /// @aHashValue is the hash value of this resource named aFileName
        /// - aHashValue should be computed by the caller of this method
        /// @aCallback is the callback, see comments of nsIVerificationCallback below
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CheckIntegrity([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aFileName, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHashValue, [MarshalAs(UnmanagedType.Interface)] nsIVerificationCallback aVerifier);
		
		/// <summary>
        /// The package identifier for signed package. Only available after the
        /// manifest is verified.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPackageIdentifierAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aPackageIdentifier);
		
		/// <summary>
        /// The moz-package-location in the manifest of this signed package.
        /// Only available after the manifest is verified.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPackageOriginAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aPackageOrigin);
	}
	
	/// <summary>
    /// The callback passed to verifyManifest and checkIntegrity
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("e1912028-93e5-4378-aa3f-a58702937169")]
	public interface nsIVerificationCallback
	{
		
		/// <summary>
        /// @aForManifest
        /// - true if it's called by verifyManifest
        /// - false if it's called by checkIntegrity
        /// @aSuccess
        /// - true if the verification succeeds, false otherwise
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FireVerifiedEvent([MarshalAs(UnmanagedType.U1)] bool aForManifest, [MarshalAs(UnmanagedType.U1)] bool aSuccess);
	}
}
