// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIQuotaManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2968fcd5-1872-4ddc-8c16-62b27e357f31")]
	public interface nsIQuotaManager
	{
		
		/// <summary>
        /// Schedules an asynchronous callback that will return the total amount of
        /// disk space being used by storages for the given origin.
        ///
        /// @param aURI
        /// The URI whose usage is being queried.
        /// @param aCallback
        /// The callback that will be called when the usage is available.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIQuotaRequest GetUsageForURI([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, [MarshalAs(UnmanagedType.Interface)] nsIUsageCallback aCallback, uint aAppId, [MarshalAs(UnmanagedType.U1)] bool aInMozBrowserOnly, int argc);
		
		/// <summary>
        /// Removes all storages. The files may not be deleted immediately depending
        /// on prohibitive concurrent operations.
        /// Be careful, this removes *all* the data that has ever been stored!
        ///
        /// If the dom.quotaManager.testing preference is not true the call will be
        /// a no-op.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Clear();
		
		/// <summary>
        /// Removes all storages stored for the given URI. The files may not be
        /// deleted immediately depending on prohibitive concurrent operations.
        ///
        /// @param aURI
        /// The URI whose storages are to be cleared.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearStoragesForURI([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, uint aAppId, [MarshalAs(UnmanagedType.U1)] bool aInMozBrowserOnly, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aPersistenceType, int argc);
		
		/// <summary>
        /// Resets quota and storage management. This can be used to force
        /// reinitialization of the temp storage, for example when the pref for
        /// overriding the temp storage limit has changed.
        /// Be carefull, this invalidates all live storages!
        ///
        /// If the dom.quotaManager.testing preference is not true the call will be
        /// a no-op.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Reset();
	}
}
