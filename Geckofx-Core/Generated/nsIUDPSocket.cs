// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIUDPSocket.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// nsIUDPSocket
    ///
    /// An interface to a UDP socket that can accept incoming connections.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("e0377f7b-34a9-4d0f-8191-7e0cba77a52f")]
	public interface nsIUDPSocket
	{
		
		/// <summary>
        /// init
        ///
        /// This method initializes a UDP socket.
        ///
        /// @param aPort
        /// The port of the UDP socket.  Pass -1 to indicate no preference,
        /// and a port will be selected automatically.
        /// @param aLoopbackOnly
        /// If true, the UDP socket will only respond to connections on the
        /// local loopback interface.  Otherwise, it will accept connections
        /// from any interface.  To specify a particular network interface,
        /// use initWithAddress.
        /// @param aPrincipal
        /// The principal connected to this socket.
        /// @param aAddressReuse
        /// If true, the socket is allowed to be bound to an address that is
        /// already in use. Default is true.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init(int aPort, [MarshalAs(UnmanagedType.U1)] bool aLoopbackOnly, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal aPrincipal, [MarshalAs(UnmanagedType.U1)] bool aAddressReuse, int argc);
		
		/// <summary>
        /// initWithAddress
        ///
        /// This method initializes a UDP socket, and binds it to a particular
        /// local address (and hence a particular local network interface).
        ///
        /// @param aAddr
        /// The address to which this UDP socket should be bound.
        /// @param aPrincipal
        /// The principal connected to this socket.
        /// @param aAddressReuse
        /// If true, the socket is allowed to be bound to an address that is
        /// already in use. Default is true.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InitWithAddress(System.IntPtr aAddr, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal aPrincipal, [MarshalAs(UnmanagedType.U1)] bool aAddressReuse, int argc);
		
		/// <summary>
        /// close
        ///
        /// This method closes a UDP socket.  This does not affect already
        /// connected client sockets (i.e., the nsISocketTransport instances
        /// created from this UDP socket).  This will cause the onStopListening
        /// event to asynchronously fire with a status of NS_BINDING_ABORTED.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Close();
		
		/// <summary>
        /// asyncListen
        ///
        /// This method puts the UDP socket in the listening state.  It will
        /// asynchronously listen for and accept client connections.  The listener
        /// will be notified once for each client connection that is accepted.  The
        /// listener's onSocketAccepted method will be called on the same thread
        /// that called asyncListen (the calling thread must have a nsIEventTarget).
        ///
        /// The listener will be passed a reference to an already connected socket
        /// transport (nsISocketTransport).  See below for more details.
        ///
        /// @param aListener
        /// The listener to be notified when client connections are accepted.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AsyncListen([MarshalAs(UnmanagedType.Interface)] nsIUDPSocketListener aListener);
		
		/// <summary>
        /// Returns the local address of this UDP socket
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsINetAddr GetLocalAddrAttribute();
		
		/// <summary>
        /// Returns the port of this UDP socket.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetPortAttribute();
		
		/// <summary>
        /// Returns the address to which this UDP socket is bound.  Since a
        /// UDP socket may be bound to multiple network devices, this address
        /// may not necessarily be specific to a single network device.  In the
        /// case of an IP socket, the IP address field would be zerod out to
        /// indicate a UDP socket bound to all network devices.  Therefore,
        /// this method cannot be used to determine the IP address of the local
        /// system.  See nsIDNSService::myHostName if this is what you need.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetAddress();
		
		/// <summary>
        /// send
        ///
        /// Send out the datagram to specified remote host and port.
        /// DNS lookup will be triggered.
        ///
        /// @param host The remote host name.
        /// @param port The remote port.
        /// @param data The buffer containing the data to be written.
        /// @param dataLength The maximum number of bytes to be written.
        /// @return number of bytes written. (0 or dataLength)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint Send([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase host, ushort port, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] byte[] data, uint dataLength);
		
		/// <summary>
        /// sendWithAddr
        ///
        /// Send out the datagram to specified remote host and port.
        ///
        /// @param addr The remote host address.
        /// @param data The buffer containing the data to be written.
        /// @param dataLength The maximum number of bytes to be written.
        /// @return number of bytes written. (0 or dataLength)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint SendWithAddr([MarshalAs(UnmanagedType.Interface)] nsINetAddr addr, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] byte[] data, uint dataLength);
		
		/// <summary>
        /// sendWithAddress
        ///
        /// Send out the datagram to specified remote address and port.
        ///
        /// @param addr The remote host address.
        /// @param data The buffer containing the data to be written.
        /// @param dataLength The maximum number of bytes to be written.
        /// @return number of bytes written. (0 or dataLength)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint SendWithAddress(System.IntPtr addr, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] byte[] data, uint dataLength);
		
		/// <summary>
        /// sendBinaryStream
        ///
        /// Send out the datagram to specified remote address and port.
        ///
        /// @param host The remote host name.
        /// @param port The remote port.
        /// @param stream The input stream to be sent. This must be a buffered stream implementation.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendBinaryStream([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase host, ushort port, [MarshalAs(UnmanagedType.Interface)] nsIInputStream stream);
		
		/// <summary>
        /// sendBinaryStreamWithAddress
        ///
        /// Send out the datagram to specified remote address and port.
        ///
        /// @param addr The remote host address.
        /// @param stream The input stream to be sent. This must be a buffered stream implementation.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendBinaryStreamWithAddress(System.IntPtr addr, [MarshalAs(UnmanagedType.Interface)] nsIInputStream stream);
		
		/// <summary>
        /// joinMulticast
        ///
        /// Join the multicast group specified by |addr|.  You are then able to
        /// receive future datagrams addressed to the group.
        ///
        /// @param addr
        /// The multicast group address.
        /// @param iface
        /// The local address of the interface on which to join the group.  If
        /// this is not specified, the OS may join the group on all interfaces
        /// or only the primary interface.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void JoinMulticast([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase addr, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase iface);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void JoinMulticastAddr(System.IntPtr addr, System.IntPtr iface);
		
		/// <summary>
        /// leaveMulticast
        ///
        /// Leave the multicast group specified by |addr|.  You will no longer
        /// receive future datagrams addressed to the group.
        ///
        /// @param addr
        /// The multicast group address.
        /// @param iface
        /// The local address of the interface on which to leave the group.
        /// If this is not specified, the OS may leave the group on all
        /// interfaces or only the primary interface.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LeaveMulticast([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase addr, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase iface);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LeaveMulticastAddr(System.IntPtr addr, System.IntPtr iface);
		
		/// <summary>
        /// multicastLoopback
        ///
        /// Whether multicast datagrams sent via this socket should be looped back to
        /// this host (assuming this host has joined the relevant group).  Defaults
        /// to true.
        /// Note: This is currently write-only.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetMulticastLoopbackAttribute();
		
		/// <summary>
        /// multicastLoopback
        ///
        /// Whether multicast datagrams sent via this socket should be looped back to
        /// this host (assuming this host has joined the relevant group).  Defaults
        /// to true.
        /// Note: This is currently write-only.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMulticastLoopbackAttribute([MarshalAs(UnmanagedType.U1)] bool aMulticastLoopback);
		
		/// <summary>
        /// multicastInterface
        ///
        /// The interface that should be used for sending future multicast datagrams.
        /// Note: This is currently write-only.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMulticastInterfaceAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aMulticastInterface);
		
		/// <summary>
        /// multicastInterface
        ///
        /// The interface that should be used for sending future multicast datagrams.
        /// Note: This is currently write-only.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMulticastInterfaceAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aMulticastInterface);
		
		/// <summary>
        /// multicastInterfaceAddr
        ///
        /// The interface that should be used for sending future multicast datagrams.
        /// Note: This is currently write-only.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetMulticastInterfaceAddrAttribute();
		
		/// <summary>
        /// multicastInterfaceAddr
        ///
        /// The interface that should be used for sending future multicast datagrams.
        /// Note: This is currently write-only.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMulticastInterfaceAddrAttribute(System.IntPtr aMulticastInterfaceAddr);
	}
	
	/// <summary>
    /// nsIUDPSocketListener
    ///
    /// This interface is notified whenever a UDP socket accepts a new connection.
    /// The transport is in the connected state, and read/write streams can be opened
    /// using the normal nsITransport API.  The address of the client can be found by
    /// calling the nsISocketTransport::GetAddress method or by inspecting
    /// nsISocketTransport::GetHost, which returns a string representation of the
    /// client's IP address (NOTE: this may be an IPv4 or IPv6 string literal).
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2E4B5DD3-7358-4281-B81F-10C62EF39CB5")]
	public interface nsIUDPSocketListener
	{
		
		/// <summary>
        /// onPacketReceived
        ///
        /// This method is called when a client sends an UDP packet.
        ///
        /// @param aSocket
        /// The UDP socket.
        /// @param aMessage
        /// The message.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnPacketReceived([MarshalAs(UnmanagedType.Interface)] nsIUDPSocket aSocket, [MarshalAs(UnmanagedType.Interface)] nsIUDPMessage aMessage);
		
		/// <summary>
        /// onStopListening
        ///
        /// This method is called when the listening socket stops for some reason.
        /// The UDP socket is effectively dead after this notification.
        ///
        /// @param aSocket
        /// The UDP socket.
        /// @param aStatus
        /// The reason why the UDP socket stopped listening.  If the
        /// UDP socket was manually closed, then this value will be
        /// NS_BINDING_ABORTED.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnStopListening([MarshalAs(UnmanagedType.Interface)] nsIUDPSocket aSocket, int aStatus);
	}
	
	/// <summary>
    /// nsIUDPMessage
    ///
    /// This interface is used to encapsulate an incomming UDP message
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("afdc743f-9cc0-40d8-b442-695dc54bbb74")]
	public interface nsIUDPMessage
	{
		
		/// <summary>
        /// Address of the source of the message
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsINetAddr GetFromAddrAttribute();
		
		/// <summary>
        /// Data of the message
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDataAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aData);
		
		/// <summary>
        /// Stream to send a response
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIOutputStream GetOutputStreamAttribute();
		
		/// <summary>
        /// Raw Data of the message
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetRawDataAttribute(System.IntPtr jsContext);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Uint8TArrayRef GetDataAsTArray();
	}
}
