// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIStreamBufferAccess.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// An interface for access to a buffering stream implementation's underlying
    /// memory buffer.
    ///
    /// Stream implementations that QueryInterface to nsIStreamBufferAccess must
    /// ensure that all buffers are aligned on the most restrictive type size for
    /// the current architecture (e.g., sizeof(double) for RISCy CPUs).  malloc(3)
    /// satisfies this requirement.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ac923b72-ac87-4892-ac7a-ca385d429435")]
	public interface nsIStreamBufferAccess
	{
		
		/// <summary>
        /// Get access to a contiguous, aligned run of bytes in the stream's buffer.
        /// Exactly one successful getBuffer call must occur before a putBuffer call
        /// taking the non-null pointer returned by the successful getBuffer.
        ///
        /// The run of bytes are the next bytes (modulo alignment padding) to read
        /// for an input stream, and the next bytes (modulo alignment padding) to
        /// store before (eventually) writing buffered data to an output stream.
        /// There can be space beyond this run of bytes in the buffer for further
        /// accesses before the fill or flush point is reached.
        ///
        /// @param aLength
        /// Count of contiguous bytes requested at the address A that satisfies
        /// (A & aAlignMask) == 0 in the buffer, starting from the current stream
        /// position, mapped to a buffer address B.  The stream implementation
        /// must pad from B to A by skipping bytes (if input stream) or storing
        /// zero bytes (if output stream).
        ///
        /// @param aAlignMask
        /// Bit-mask computed by subtracting 1 from the power-of-two alignment
        /// modulus (e.g., 3 or sizeof(uint32_t)-1 for uint32_t alignment).
        ///
        /// @return
        /// The aligned pointer to aLength bytes in the buffer, or null if the
        /// buffer has no room for aLength bytes starting at the next address A
        /// after the current position that satisfies (A & aAlignMask) == 0.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetBuffer(uint aLength, uint aAlignMask);
		
		/// <summary>
        /// Relinquish access to the stream's buffer, filling if at end of an input
        /// buffer, flushing if completing an output buffer.  After a getBuffer call
        /// that returns non-null, putBuffer must be called.
        ///
        /// @param aBuffer
        /// A non-null pointer returned by getBuffer on the same stream buffer
        /// access object.
        ///
        /// @param aLength
        /// The same count of contiguous bytes passed to the getBuffer call that
        /// returned aBuffer.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PutBuffer(System.IntPtr aBuffer, uint aLength);
		
		/// <summary>
        /// Disable and enable buffering on the stream implementing this interface.
        /// DisableBuffering flushes an output stream's buffer, and invalidates an
        /// input stream's buffer.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DisableBuffering();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnableBuffering();
		
		/// <summary>
        /// The underlying, unbuffered input or output stream.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISupports GetUnbufferedStreamAttribute();
	}
}
