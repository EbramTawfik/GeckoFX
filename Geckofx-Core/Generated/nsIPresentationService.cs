// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPresentationService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("12073206-0065-4b10-9488-a6eb9b23e65b")]
	public interface nsIPresentationServiceCallback
	{
		
		/// <summary>
        /// Called when the operation succeeds.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifySuccess();
		
		/// <summary>
        /// Called when the operation fails.
        ///
        /// @param error: error message.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyError(int error);
	}
	
	/// <summary>nsIPresentationService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("c177a13a-bf1a-48bf-8032-d415c3343c46")]
	public interface nsIPresentationService
	{
		
		/// <summary>
        /// Start a new presentation session and display a prompt box which asks users
        /// to select a device.
        ///
        /// @param url: The url of presenting page.
        /// @param sessionId: An ID to identify presentation session.
        /// @param origin: The url of requesting page.
        /// @param callback: Invoke the callback when the operation is completed.
        /// NotifySuccess() is called with |id| if a session is
        /// established successfully with the selected device.
        /// Otherwise, NotifyError() is called with a error message.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartSession([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase url, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase origin, [MarshalAs(UnmanagedType.Interface)] nsIPresentationServiceCallback callback);
		
		/// <summary>
        /// Send the message wrapped with an input stream to the session.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param stream: The message is converted to an input stream.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendSessionMessage([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, [MarshalAs(UnmanagedType.Interface)] nsIInputStream stream);
		
		/// <summary>
        /// Close the session.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CloseSession([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId);
		
		/// <summary>
        /// Terminate the session.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TerminateSession([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId);
		
		/// <summary>
        /// Register an availability listener. Must be called from the main thread.
        ///
        /// @param listener: The listener to register.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterAvailabilityListener([MarshalAs(UnmanagedType.Interface)] nsIPresentationAvailabilityListener listener);
		
		/// <summary>
        /// Unregister an availability listener. Must be called from the main thread.
        /// @param listener: The listener to unregister.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterAvailabilityListener([MarshalAs(UnmanagedType.Interface)] nsIPresentationAvailabilityListener listener);
		
		/// <summary>
        /// Register a session listener. Must be called from the main thread.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param listener: The listener to register.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterSessionListener([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, [MarshalAs(UnmanagedType.Interface)] nsIPresentationSessionListener listener);
		
		/// <summary>
        /// Unregister a session listener. Must be called from the main thread.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterSessionListener([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId);
		
		/// <summary>
        /// Register a responding listener. Must be called from the main thread.
        ///
        /// @param windowId: The window ID associated with the listener.
        /// @param listener: The listener to register.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterRespondingListener(ulong windowId, [MarshalAs(UnmanagedType.Interface)] nsIPresentationRespondingListener listener);
		
		/// <summary>
        /// Unregister a responding listener. Must be called from the main thread.
        /// @param windowId: The window ID associated with the listener.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterRespondingListener(ulong windowId);
		
		/// <summary>
        /// Check if the presentation instance has an existent session ID at launch.
        /// An empty string is always returned at sender side. Whereas at receiver side
        /// the associated session ID is returned if the window ID and URI are matched;
        /// otherwise an empty string is returned.
        ///
        /// @param windowId: The inner window ID used to look up the session ID.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetExistentSessionIdAtLaunch(ulong windowId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase retval);
		
		/// <summary>
        /// Notify the receiver page is ready for presentation use.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param windowId: The inner window ID associated with the presentation
        /// session. (0 implies no window ID since no actual window
        /// uses 0 as its ID.)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyReceiverReady([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, ulong windowId);
		
		/// <summary>
        /// Untrack the relevant info about the presentation session if there's any.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UntrackSessionInfo([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId);
	}
}
