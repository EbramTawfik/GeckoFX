// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIMemoryProfiler.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// The memory profiler samples allocation events. An allocation event
    /// includes a type (what and at where is going to be allocated), a
    /// size, a timestamp and the corresponding stack trace. Free events
    /// are also tracked. For managed languages, namely languages relying
    /// on garbage collection, a free event is generated when an object is
    /// reclaimed by the garbage collector.  These sampled events can be
    /// used to approximate the full history of allocations afterwards.
    /// That means we can get various memory profiles of a program in
    /// different perspectives by post-processing the history in different
    /// ways. The profiler is designed at the very beginning to support not
    /// only JavaScript but also native codes. Naturally, not only
    /// JavaScript objects but also native allocations are tracked.
    ///
    /// The result returned is the sampled allocation event traces in a
    /// compact format. The events is sorted according to the timestamp
    /// when the event happened. Each event has a trace index pointing to
    /// the traces table. Each trace entry has a name index pointing to the
    /// names table and a parent index pointing to the parent trace in the
    /// traces table. By following the trace index one could rebuild the
    /// complete backtrace of an allocation event.
    ///
    /// [ Events ]
    /// +-------+-------+      +-------+
    /// | Size  | Size  |      | Size  |
    /// |-------|-------|      |-------|
    /// | Time  | Time  |......| Time  |
    /// |-------|-------|      |-------|
    /// +-- Trace | Trace |      | Trace |
    /// | +-------+-------+      +-------+
    /// |
    /// | [ Traces ]
    /// +->--------+--------+   +--------+   +--------+
    /// -| Name   | Name   |   | Name   |   | Name   |
    /// / |--------|--------|...|--------|...|--------|
    /// | | Parent | Parent |   | Parent |   | Parent |
    /// | +---|----+----^--++   +--^--|--+   +---^----+
    /// |     |         |  |       |  |          |
    /// |     +---------+  +-------+  +----------+
    /// | [ Names ]
    /// | +-----------------+-----------------+
    /// +-> Function name   | Function name   |
    /// |  & line numbers |  & line numbers |......
    /// +-----------------+-----------------+
    ///
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1e10e7a9-bc05-4878-a687-36c9ea4428b1")]
	public interface nsIMemoryProfiler
	{
		
		/// <summary>
        /// The memory profiler samples allocation events. An allocation event
        /// includes a type (what and at where is going to be allocated), a
        /// size, a timestamp and the corresponding stack trace. Free events
        /// are also tracked. For managed languages, namely languages relying
        /// on garbage collection, a free event is generated when an object is
        /// reclaimed by the garbage collector.  These sampled events can be
        /// used to approximate the full history of allocations afterwards.
        /// That means we can get various memory profiles of a program in
        /// different perspectives by post-processing the history in different
        /// ways. The profiler is designed at the very beginning to support not
        /// only JavaScript but also native codes. Naturally, not only
        /// JavaScript objects but also native allocations are tracked.
        ///
        /// The result returned is the sampled allocation event traces in a
        /// compact format. The events is sorted according to the timestamp
        /// when the event happened. Each event has a trace index pointing to
        /// the traces table. Each trace entry has a name index pointing to the
        /// names table and a parent index pointing to the parent trace in the
        /// traces table. By following the trace index one could rebuild the
        /// complete backtrace of an allocation event.
        ///
        /// [ Events ]
        /// +-------+-------+      +-------+
        /// | Size  | Size  |      | Size  |
        /// |-------|-------|      |-------|
        /// | Time  | Time  |......| Time  |
        /// |-------|-------|      |-------|
        /// +-- Trace | Trace |      | Trace |
        /// | +-------+-------+      +-------+
        /// |
        /// | [ Traces ]
        /// +->--------+--------+   +--------+   +--------+
        /// -| Name   | Name   |   | Name   |   | Name   |
        /// / |--------|--------|...|--------|...|--------|
        /// | | Parent | Parent |   | Parent |   | Parent |
        /// | +---|----+----^--++   +--^--|--+   +---^----+
        /// |     |         |  |       |  |          |
        /// |     +---------+  +-------+  +----------+
        /// | [ Names ]
        /// | +-----------------+-----------------+
        /// +-> Function name   | Function name   |
        /// |  & line numbers |  & line numbers |......
        /// +-----------------+-----------------+
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartProfiler();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StopProfiler();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResetProfiler();
		
		/// <summary>
        /// Get results in an object which contains three tables:
        /// {
        /// names, // an array of function names and positions
        /// traces, // an array of {nameIdx, parentIdx}
        /// events, // an array of {size, timestamp, traceIdx}
        /// }
        /// Should only be called after stopProfiler.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetResults(System.IntPtr jsContext);
	}
}
