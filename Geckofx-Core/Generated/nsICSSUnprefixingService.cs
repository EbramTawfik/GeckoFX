// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsICSSUnprefixingService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///interface for a service that converts certain vendor-prefixed CSS properties
    ///   to their unprefixed equivalents </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a5d6e2f4-d3ec-11e4-b002-782bcbaebb28")]
	public interface nsICSSUnprefixingService
	{
		
		/// <summary>
        /// This function helps to convert unsupported vendor-prefixed CSS into
        /// supported unprefixed CSS. Given a vendor-prefixed property name and a
        /// value (or e.g. value + trailing junk like " !important;}"), this function
        /// will attempt to produce an equivalent CSS declaration that uses a
        /// supported unprefixed CSS property.
        ///
        /// @param   aPropName
        /// The vendor-prefixed property name.
        ///
        /// @param   aRightHalfOfDecl
        /// Everything after the ":" in the CSS declaration. This includes
        /// the property's value, along with possibly some leading whitespace
        /// and trailing text like "!important", and possibly a ';' and/or
        /// '}' (along with any other bogus text the author happens to
        /// include before those, which will probably make the decl invalid).
        ///
        /// @param   aUnprefixedDecl[out]
        /// The resulting unprefixed declaration, if we return true.
        ///
        /// @return true if we were able to unprefix -- i.e. if we were able to
        /// convert the property to a known unprefixed equivalent, and we also
        /// performed any known-to-be-necessary fixup on the value, and we put
        /// the result in aUnprefixedDecl.
        /// Otherwise, this function returns false.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GenerateUnprefixedDeclaration([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aPropName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aRightHalfOfDecl, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aUnprefixedDecl);
		
		/// <summary>
        /// @param   aPrefixedFuncName
        /// The webkit-prefixed gradient function: either
        /// "-webkit-gradient", "-webkit-linear-gradient", or
        /// "-webkit-radial-gradient".
        ///
        /// @param   aPrefixedFuncBody
        /// The body of the gradient function, inside (& not including) the
        /// parenthesis.
        ///
        /// @param   aUnprefixedFuncName[out]
        /// The resulting unprefixed gradient function name:
        /// either "linear-gradient" or "radial-gradient".
        ///
        /// @param   aUnprefixedFuncBody[out]
        /// The resulting unprefixed gradient function body, suitable for
        /// including in a "linear-gradient(...)" or "radial-gradient(...)"
        /// expression.
        ///
        /// @returns true if we were able to successfully parse aWebkitGradientStr
        /// and populate the outparams accordingly; false otherwise.
        ///
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GenerateUnprefixedGradientValue([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aPrefixedFuncName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aPrefixedFuncBody, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aUnprefixedFuncName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aUnprefixedFuncBody);
	}
}
