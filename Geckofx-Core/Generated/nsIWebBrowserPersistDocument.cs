// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIWebBrowserPersistDocument.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Interface for the URI-mapping information that can be supplied when
    /// serializing the DOM of an nsIWebBrowserPersistDocument.
    ///
    /// @see nsIWebBrowserPersistDocument
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d52e8b93-2771-45e8-a5b0-6e12b667046b")]
	public interface nsIWebBrowserPersistURIMap
	{
		
		/// <summary>
        /// The number of URI mappings.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetNumMappedURIsAttribute();
		
		/// <summary>
        /// Obtain the URI mapping at the given index, which must be less than
        /// numMappedURIs, as a pair of URI spec strings.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetURIMapping(uint aIndex, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aMapFrom, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aMapTo);
		
		/// <summary>
        /// The spec of the base URI that the document will have after it is
        /// serialized.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTargetBaseURIAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aTargetBaseURI);
	}
	
	/// <summary>
    /// Interface representing a document that can be serialized with
    /// nsIWebBrowserPersist; it may or may not be in this process.  Some
    /// information is exposed as attributes, which may or may not reflect
    /// changes made to the underlying document; most of these are
    /// self-explanatory from their names and types.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("74aa4918-5d15-46b6-9ccf-74f9696d721d")]
	public interface nsIWebBrowserPersistDocument
	{
		
		/// <summary>
        /// Interface representing a document that can be serialized with
        /// nsIWebBrowserPersist; it may or may not be in this process.  Some
        /// information is exposed as attributes, which may or may not reflect
        /// changes made to the underlying document; most of these are
        /// self-explanatory from their names and types.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsPrivateAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDocumentURIAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aDocumentURI);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetBaseURIAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aBaseURI);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetContentTypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aContentType);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCharacterSetAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aCharacterSet);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTitleAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aTitle);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetReferrerAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aReferrer);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetContentDispositionAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aContentDisposition);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIInputStream GetPostDataAttribute();
		
		/// <summary>
        /// The cache key.  Unlike in nsISHEntry, where it's wrapped in an
        /// nsISupportsPRUint32, this is just the integer.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetCacheKeyAttribute();
		
		/// <summary>
        /// This attribute is set by nsIWebBrowserPersist implementations to
        /// propagate persist flags that apply to the DOM traversal and
        /// serialization (rather than to managing file I/O).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetPersistFlagsAttribute();
		
		/// <summary>
        /// This attribute is set by nsIWebBrowserPersist implementations to
        /// propagate persist flags that apply to the DOM traversal and
        /// serialization (rather than to managing file I/O).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetPersistFlagsAttribute(uint aPersistFlags);
		
		/// <summary>
        /// Walk the DOM searching for external resources needed to render it.
        /// The visitor callbacks may be called either before or after
        /// readResources returns.
        ///
        /// @see nsIWebBrowserPersistResourceVisitor
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ReadResources([MarshalAs(UnmanagedType.Interface)] nsIWebBrowserPersistResourceVisitor aVisitor);
		
		/// <summary>
        /// Serialize the document's DOM.
        ///
        /// @param aStream       The output stream to write the document to.
        ///
        /// @param aURIMap       Optional; specifies URI rewriting to perform on
        /// external references (as read by readResources).
        /// If given, also causes relative hyperlinks to be
        /// converted to absolute in the written text.
        ///
        /// @param aRequestedContentType
        /// The desired MIME type to save the document as;
        /// optional and defaults to the document's type.
        /// (If no encoder exists for that type, "text/html"
        /// is used instead.)
        ///
        /// @param aEncoderFlags Flags to pass to the encoder.
        ///
        /// @param aWrapColumn   Desired text width, ignored if wrapping is not
        /// specified by the encoding flags, or if 0.
        ///
        /// @param aCompletion   Callback invoked when writing is complete.
        /// It may be called either before or after writeContent
        /// returns.
        ///
        /// @see nsIDocumentEncoder
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WriteContent([MarshalAs(UnmanagedType.Interface)] nsIOutputStream aStream, [MarshalAs(UnmanagedType.Interface)] nsIWebBrowserPersistURIMap aURIMap, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aRequestedContentType, uint aEncoderFlags, uint aWrapColumn, [MarshalAs(UnmanagedType.Interface)] nsIWebBrowserPersistWriteCompletion aCompletion);
	}
	
	/// <summary>
    /// Asynchronous visitor that receives external resources linked by an
    /// nsIWebBrowserPersistDocument and which are needed to render the
    /// document.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8ce37706-b7d3-481a-be68-54f174fc0d0a")]
	public interface nsIWebBrowserPersistResourceVisitor
	{
		
		/// <summary>
        /// Indicates a resource that is not a document; e.g., an image, script,
        /// or stylesheet.
        ///
        /// @param aDocument   The document containing the reference.
        /// @param aURI        The absolute URI spec for the referenced resource.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VisitResource([MarshalAs(UnmanagedType.Interface)] nsIWebBrowserPersistDocument aDocument, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aURI);
		
		/// <summary>
        /// Indicates a subdocument resource; e.g., a frame or iframe.
        ///
        /// @param aDocument     The document containing the reference.
        /// @param aSubDocument  The referenced document.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void VisitDocument([MarshalAs(UnmanagedType.Interface)] nsIWebBrowserPersistDocument aDocument, [MarshalAs(UnmanagedType.Interface)] nsIWebBrowserPersistDocument aSubDocument);
		
		/// <summary>
        /// Indicates that the document traversal is complete.
        ///
        /// @param aDocument   The document that was being traversed.
        /// @param aStatus     Indicates whether the traversal encountered an error.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EndVisit([MarshalAs(UnmanagedType.Interface)] nsIWebBrowserPersistDocument aDocument, int aStatus);
	}
	
	/// <summary>
    /// Asynchronous callback for when nsIWebBrowserPersistDocument is finished
    /// serializing the document's DOM.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a07e6892-38ae-4207-8340-7fa6ec446ed6")]
	public interface nsIWebBrowserPersistWriteCompletion
	{
		
		/// <summary>
        /// Indicates that serialization is finished.
        ///
        /// @param aDocument     The document that was being serialized.
        ///
        /// @param aStream       The stream that was being written to.  If it
        /// needs to be closed, the callback must do that;
        /// the serialization process leaves it open.
        ///
        /// @param aContentType  The content type with which the document was
        /// actually serialized; this may be useful to set
        /// metadata on the result, or if uploading it.
        ///
        /// @param aStatus       Indicates whether serialization encountered an error.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnFinish([MarshalAs(UnmanagedType.Interface)] nsIWebBrowserPersistDocument aDocument, [MarshalAs(UnmanagedType.Interface)] nsIOutputStream aStream, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aContentType, int aStatus);
	}
	
	/// <summary>
    /// Asynchronous callback for creating a persistable document from some
    /// other object.
    ///
    /// @see nsIWebBrowserPersistable.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("321e3174-594f-4036-b7be-791b821bd376")]
	public interface nsIWebBrowserPersistDocumentReceiver
	{
		
		/// <summary>
        /// Asynchronous callback for creating a persistable document from some
        /// other object.
        ///
        /// @see nsIWebBrowserPersistable.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnDocumentReady([MarshalAs(UnmanagedType.Interface)] nsIWebBrowserPersistDocument aDocument);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnError(int aFailure);
	}
}
