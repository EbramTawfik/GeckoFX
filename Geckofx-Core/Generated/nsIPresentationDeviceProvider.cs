// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPresentationDeviceProvider.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// The callbacks for any device updates and session request.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("46fd372b-2e40-4179-9b36-0478d141e440")]
	public interface nsIPresentationDeviceListener
	{
		
		/// <summary>
        /// The callbacks for any device updates and session request.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddDevice([MarshalAs(UnmanagedType.Interface)] nsIPresentationDevice device);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveDevice([MarshalAs(UnmanagedType.Interface)] nsIPresentationDevice device);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UpdateDevice([MarshalAs(UnmanagedType.Interface)] nsIPresentationDevice device);
		
		/// <summary>
        /// Callback while the remote device is requesting to start a presentation session.
        /// @param device The remote device that sent session request.
        /// @param url The URL requested to open by remote device.
        /// @param presentationId The Id for representing this session.
        /// @param controlChannel The control channel for this session.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnSessionRequest([MarshalAs(UnmanagedType.Interface)] nsIPresentationDevice device, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase url, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase presentationId, [MarshalAs(UnmanagedType.Interface)] nsIPresentationControlChannel controlChannel);
	}
	
	/// <summary>
    /// Device provider for any device protocol, can be registered as default
    /// providers by adding its contractID to category "presentation-device-provider".
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("3db2578a-0f50-44ad-b01b-28427b71b7bf")]
	public interface nsIPresentationDeviceProvider
	{
		
		/// <summary>
        /// The listener for handling any device update.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPresentationDeviceListener GetListenerAttribute();
		
		/// <summary>
        /// The listener for handling any device update.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetListenerAttribute([MarshalAs(UnmanagedType.Interface)] nsIPresentationDeviceListener aListener);
		
		/// <summary>
        /// Force to update device information.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ForceDiscovery();
	}
}
