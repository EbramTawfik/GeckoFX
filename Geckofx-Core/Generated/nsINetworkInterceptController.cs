// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsINetworkInterceptController.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Interface to allow implementors of nsINetworkInterceptController to control the behaviour
    /// of intercepted channels without tying implementation details of the interception to
    /// the actual channel. nsIInterceptedChannel is expected to be implemented by objects
    /// which do not implement nsIChannel.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("64439e24-eda5-4f39-9a7e-162c4b5e0150")]
	public interface nsIInterceptedChannel
	{
		
		/// <summary>
        /// Instruct a channel that has been intercepted to continue with the original
        /// network request.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResetInterception();
		
		/// <summary>
        /// Set the status and reason for the forthcoming synthesized response.
        /// Multiple calls overwrite existing values.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SynthesizeStatus(ushort status, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase reason);
		
		/// <summary>
        /// Attach a header name/value pair to the forthcoming synthesized response.
        /// Overwrites any existing header value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SynthesizeHeader([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase name, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase value);
		
		/// <summary>
        /// Instruct a channel that has been intercepted that a response has been
        /// synthesized and can now be read. No further header modification is allowed
        /// after this point. The caller may optionally pass a spec for a URL that
        /// this response originates from; an empty string will cause the original
        /// intercepted request's URL to be used instead.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FinishSynthesizedResponse([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase finalURLSpec);
		
		/// <summary>
        /// Cancel the pending intercepted request.
        /// @return NS_ERROR_FAILURE if the response has already been synthesized or
        /// the original request has been instructed to continue.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Cancel(int status);
		
		/// <summary>
        /// The synthesized response body to be produced.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIOutputStream GetResponseBodyAttribute();
		
		/// <summary>
        /// The underlying channel object that was intercepted.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIChannel GetChannelAttribute();
		
		/// <summary>
        /// This method allows to override the channel info for the channel.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetChannelInfo(ChannelInfo channelInfo);
		
		/// <summary>
        /// Get the internal load type from the underlying channel.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetInternalContentPolicyTypeAttribute();
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIConsoleReportCollector GetConsoleReportCollectorAttribute();
		
		/// <summary>
        /// Allow the ServiceWorkerManager to set an RAII-style object on the
        /// intercepted channel that should be released once the channel is
        /// torn down.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetReleaseHandle([MarshalAs(UnmanagedType.Interface)] nsISupports aHandle);
	}
	
	/// <summary>
    /// Interface to allow consumers to dispatch the fetch event asynchronously.
    /// Consumers get access to this interface by calling channelIntercepted(),
    /// and they can choose to either dispatch() immediately or do that at some
    /// later time.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("799504e4-36f8-4ab5-b9d2-53f0c0c40c04")]
	public interface nsIFetchEventDispatcher
	{
		
		/// <summary>
        /// Actually dispatches the fetch event to the service worker.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Dispatch();
	}
	
	/// <summary>
    /// Interface to allow consumers to attach themselves to a channel's
    /// notification callbacks/loadgroup and determine if a given channel
    /// request should be intercepted before any network request is initiated.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("49eb1997-90fb-49d6-a25d-41f51c7c99e8")]
	public interface nsINetworkInterceptController
	{
		
		/// <summary>
        /// Returns true if a channel should avoid initiating any network
        /// requests until specifically instructed to do so.
        ///
        /// @param aURI the URI being requested by a channel
        /// @param aIsNavigate True if the request is for a navigation, false for a fetch.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool ShouldPrepareForIntercept([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, [MarshalAs(UnmanagedType.U1)] bool aIsNonSubresourceRequest);
		
		/// <summary>
        /// Notification when a given intercepted channel is prepared to accept a synthesized
        /// response via the provided stream.
        ///
        /// @param aChannel the controlling interface for a channel that has been intercepted
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIFetchEventDispatcher ChannelIntercepted([MarshalAs(UnmanagedType.Interface)] nsIInterceptedChannel aChannel);
	}
}
