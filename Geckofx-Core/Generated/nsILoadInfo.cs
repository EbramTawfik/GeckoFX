// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsILoadInfo.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// An nsILoadOwner represents per-load information about who started the load.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("046db047-a1c1-4519-8ec7-99f3054bc9ac")]
	public interface nsILoadInfo
	{
		
		/// <summary>
        /// loadingPrincipal is the principal that started the load.  Will
        /// never be null.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrincipal GetLoadingPrincipalAttribute();
		
		/// <summary>
        /// A C++-friendly version of loadingPrincipal.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrincipal BinaryLoadingPrincipal();
		
		/// <summary>
        /// If forceInheritPrincipal is true, the data coming from the channel should
        /// use loadingPrincipal for its principal, even when the data is loaded over
        /// http:// or another protocol that would normally use a URI-based principal.
        /// This attribute will never be true when loadingSandboxed is true.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetForceInheritPrincipalAttribute();
		
		/// <summary>
        /// If loadingSandboxed is true, the data coming from the channel is
        /// being loaded sandboxed, so it should have a nonce origin and
        /// hence should use a NullPrincipal.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetLoadingSandboxedAttribute();
	}
}
