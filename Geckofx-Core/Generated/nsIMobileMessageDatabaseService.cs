// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIMobileMessageDatabaseService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("18672be2-c185-4f9c-8af6-2e6ea004de73")]
	public interface nsIMobileMessageDatabaseService
	{
		
		/// <summary>
        ///This Source Code Form is subject to the terms of the Mozilla Public
        /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
        /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMessage(int messageId, [MarshalAs(UnmanagedType.Interface)] nsIMobileMessageCallback request);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeleteMessage([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] int[] messageIds, uint count, [MarshalAs(UnmanagedType.Interface)] nsIMobileMessageCallback request);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsICursorContinueCallback CreateMessageCursor([MarshalAs(UnmanagedType.U1)] bool hasStartDate, ulong startDate, [MarshalAs(UnmanagedType.U1)] bool hasEndDate, ulong endDate, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=5)] System.IntPtr[] numbers, uint numbersCount, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase delivery, [MarshalAs(UnmanagedType.U1)] bool hasRead, [MarshalAs(UnmanagedType.U1)] bool read, [MarshalAs(UnmanagedType.U1)] bool hasThreadId, ulong threadId, [MarshalAs(UnmanagedType.U1)] bool reverse, [MarshalAs(UnmanagedType.Interface)] nsIMobileMessageCursorCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MarkMessageRead(int messageId, [MarshalAs(UnmanagedType.U1)] bool value, [MarshalAs(UnmanagedType.U1)] bool sendReadReport, [MarshalAs(UnmanagedType.Interface)] nsIMobileMessageCallback request);
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsICursorContinueCallback CreateThreadCursor([MarshalAs(UnmanagedType.Interface)] nsIMobileMessageCursorCallback callback);
	}
}
