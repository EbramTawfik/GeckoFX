// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsISpeculativeConnect.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d74a17ac-5b8a-4824-a309-b1f04a3c4aed")]
	public interface nsISpeculativeConnect
	{
		
		/// <summary>
        /// Called as a hint to indicate a new transaction for the URI is likely coming
        /// soon. The implementer may use this information to start a TCP
        /// and/or SSL level handshake for that resource immediately so that it is
        /// ready and/or progressed when the transaction is actually submitted.
        ///
        /// No obligation is taken on by the implementer, nor is the submitter obligated
        /// to actually open the new channel.
        ///
        /// @param aURI the URI of the hinted transaction
        /// @param aCallbacks any security callbacks for use with SSL for interfaces
        /// such as nsIBadCertListener. May be null.
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SpeculativeConnect([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor aCallbacks);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SpeculativeAnonymousConnect([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor aCallbacks);
	}
	
	/// <summary>
    /// This is used to override the default values for various values (documented
    /// inline) to determine whether or not to actually make a speculative
    /// connection.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f6a0d1e5-369f-4abc-81ae-d370d36e4006")]
	public interface nsISpeculativeConnectionOverrider
	{
		
		/// <summary>
        /// Used to determine the maximum number of unused speculative connections
        /// we will have open for a host at any one time
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetParallelSpeculativeConnectLimitAttribute();
		
		/// <summary>
        /// Used to loosen the restrictions nsHttpConnectionMgr::RestrictConnections
        /// to allow more speculative connections when we're unsure if a host will
        /// connect via SPDY or not.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIgnorePossibleSpdyConnectionsAttribute();
		
		/// <summary>
        /// Used to determine if we will ignore the existence of any currently idle
        /// connections when we decide whether or not to make a speculative
        /// connection.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIgnoreIdleAttribute();
		
		/// <summary>
        /// Used by the Predictor to gather telemetry data on speculative connection
        /// usage.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsFromPredictorAttribute();
		
		/// <summary>
        /// by default speculative connections are not made to RFC 1918 addresses
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetAllow1918Attribute();
	}
}
