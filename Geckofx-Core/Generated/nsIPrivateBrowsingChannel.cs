// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPrivateBrowsingChannel.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// This interface is implemented by channels which support overriding the
    /// privacy state of the channel.
    ///
    /// This interface must be used only from the XPCOM main thread.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("df702bb0-55b8-11e2-bcfd-0800200c9a66")]
	public interface nsIPrivateBrowsingChannel
	{
		
		/// <summary>
        /// Determine whether the channel is tied to a private browsing window.
        ///
        /// This value can be set only before the channel is opened.  Setting it
        /// after that does not have any effect.  This value overrides the privacy
        /// state of the channel, which means that if you call this method, then
        /// the loadGroup and load context will no longer be consulted when we
        /// need to know the private mode status for a channel.
        ///
        /// Note that this value is only meant to be used when the channel's privacy
        /// status cannot be obtained from the loadGroup or load context (for
        /// example, when the channel is not associated with any loadGroup or load
        /// context.)  Setting this value directly should be avoided if possible.
        ///
        /// Implementations must enforce the ordering semantics of this function by
        /// raising errors if setPrivate is called on a channel which has a loadGroup
        /// and/or callbacks that implement nsILoadContext, or if the loadGroup
        /// or notificationCallbacks are set after setPrivate has been called.
        ///
        /// @param aPrivate whether the channel should be opened in private mode.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetPrivate([MarshalAs(UnmanagedType.U1)] bool aPrivate);
		
		/// <summary>
        /// States whether the channel is in private browsing mode. This may either
        /// happen because the channel is opened from a private mode context or
        /// when the mode is explicitly set with ::setPrivate().
        ///
        /// This attribute is equivalent to NS_UsePrivateBrowsing(), but scriptable.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsChannelPrivateAttribute();
		
		/// <summary>
        /// This function is used to determine whether the channel's private mode
        /// has been overridden by a call to setPrivate.  It is intended to be used
        /// by NS_UsePrivateBrowsing(), and you should not call it directly.
        ///
        /// @param aValue the overridden value.  This will only be set if the function
        /// returns true.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsPrivateModeOverriden([MarshalAs(UnmanagedType.U1)] ref bool aValue);
	}
}
