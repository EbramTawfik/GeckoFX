// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPushNotificationService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// A service for components to subscribe and receive push messages from web
    /// services. This functionality is exposed to content via the Push API, which
    /// uses service workers to notify applications. This interface exists to allow
    /// privileged code to receive messages without migrating to service workers.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("74586476-d73f-4867-bece-87c1dea35750")]
	public interface nsIPushNotificationService
	{
		
		/// <summary>
        /// Creates a push subscription for the given |scope| URL and |pageURL|.
        /// Returns a promise for the new subscription record, or the existing
        /// record if this |scope| already has a subscription.
        ///
        /// The |pushEndpoint| property of the subscription record is a URL string
        /// that can be used to send push messages to subscribers. For details,
        /// please see the Simple Push protocol docs.
        ///
        /// Each incoming message fires a `push-notification` observer
        /// notification, with an `nsIPushObserverNotification` as the subject and
        /// the |scope| as the data.
        ///
        /// If the server drops a subscription, a `push-subscription-change` observer
        /// will be fired, with the subject set to `null` and the data set to |scope|.
        /// Servers may drop subscriptions at any time, so callers should recreate
        /// subscriptions if desired.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal Register([MarshalAs(UnmanagedType.LPStr)] string scope, ref Gecko.JsVal originAttributes);
		
		/// <summary>
        /// Revokes a push subscription for the given |scope|. Returns a promise
        /// for the revoked subscription record, or `null` if the |scope| is not
        /// subscribed to receive notifications.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal Unregister([MarshalAs(UnmanagedType.LPStr)] string scope, ref Gecko.JsVal originAttributes);
		
		/// <summary>
        /// Returns a promise for the subscription record associated with the
        /// given |scope|, or `null` if the |scope| does not have a subscription.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal Registration([MarshalAs(UnmanagedType.LPStr)] string scope, ref Gecko.JsVal originAttributes);
		
		/// <summary>
        /// Clear all subscriptions.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal ClearAll();
		
		/// <summary>
        /// Clear subscriptions for a domain.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal ClearForDomain([MarshalAs(UnmanagedType.LPStr)] string domain);
	}
	
	/// <summary>nsIPushQuotaManager </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a2555e70-46f8-4b52-bf02-d978b979d143")]
	public interface nsIPushQuotaManager
	{
		
		/// <summary>
        /// Informs the quota manager that a notification
        /// for the given origin has been shown. Used to
        /// determine if push quota should be relaxed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotificationForOriginShown([MarshalAs(UnmanagedType.LPStr)] string origin);
		
		/// <summary>
        /// Informs the quota manager that a notification
        /// for the given origin has been closed. Used to
        /// determine if push quota should be relaxed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotificationForOriginClosed([MarshalAs(UnmanagedType.LPStr)] string origin);
	}
}
