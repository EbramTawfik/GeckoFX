// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsICaptivePortalDetector.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("593fdeec-6284-4de8-b416-8e63cbdc695e")]
	public interface nsICaptivePortalCallback
	{
		
		/// <summary>
        /// Preparation for network interface before captive portal detection started.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Prepare();
		
		/// <summary>
        /// Invoke callbacks after captive portal detection finished.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Complete([MarshalAs(UnmanagedType.U1)] bool success);
	}
	
	/// <summary>nsICaptivePortalDetector </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2f827c5a-f551-477f-af09-71adbfbd854a")]
	public interface nsICaptivePortalDetector
	{
		
		/// <summary>
        /// Perform captive portal detection on specific network interface.
        /// @param ifname The name of network interface, exception will be thrwon
        /// if the same interface has unfinished request.
        /// @param callback Callbacks when detection procedure starts and finishes.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CheckCaptivePortal([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.WStringMarshaler")] string ifname, [MarshalAs(UnmanagedType.Interface)] nsICaptivePortalCallback callback);
		
		/// <summary>
        /// Abort captive portal detection for specific network interface
        /// due to system failure, callback will not be invoked.
        /// @param ifname The name of network interface.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Abort([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.WStringMarshaler")] string ifname);
		
		/// <summary>
        /// Cancel captive portal login procedure by user, callback will be invoked.
        /// @param eventId Login event id provided in |captive-portal-login| event.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CancelLogin([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.WStringMarshaler")] string eventId);
		
		/// <summary>
        /// Notify prepare phase is finished, routing and dns must be ready for sending
        /// out XMLHttpRequest. this is callback for CaptivePortalDetector API user.
        /// @param ifname The name of network interface, must be unique.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FinishPreparation([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.WStringMarshaler")] string ifname);
	}
}
