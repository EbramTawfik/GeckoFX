// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file amIAddonManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// A service to make some AddonManager functionality available to C++ callers.
    /// Javascript callers should still use AddonManager.jsm directly.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7b45d82d-7ad5-48d7-9b05-f32eb9818cd4")]
	public interface amIAddonManager
	{
		
		/// <summary>
        /// Synchronously map a URI to the corresponding Addon ID.
        ///
        /// Mappable URIs are limited to in-application resources belonging to the
        /// add-on, such as Javascript compartments, XUL windows, XBL bindings, etc.
        /// but do not include URIs from meta data, such as the add-on homepage.
        ///
        /// @param  aURI
        /// The nsIURI to map
        /// @return
        /// true if the URI has been mapped successfully to an Addon ID
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool MapURIToAddonID([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aID);
	}
}
