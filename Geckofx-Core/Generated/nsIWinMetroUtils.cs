// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIWinMetroUtils.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Integration with the "Metro"/"Modern" UI environment in Windows 8.
    ///
    /// Note: browser/metro/base/content/browser.js contains a stub
    /// implementation of this interface for non-Windows systems, for testing and
    /// development purposes only.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("319faae0-82ca-4c2f-8a24-2b2445e5a72a")]
	public interface nsIWinMetroUtils
	{
		
		/// <summary>
        /// Determine if the current device has the hardware capabilities to run
        /// in metro mode.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetSupportedAttribute();
		
		/// <summary>
        /// Determine if the current browser is running in the metro immersive
        /// environment.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetImmersiveAttribute();
		
		/// <summary>
        /// Determine the activation URI
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetActivationURIAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aActivationURI);
		
		/// <summary>
        /// Determine the previous execution state. The possible values of this
        /// attribute are exactly those values in the
        /// Windows::ApplicationModel::Activation enumeration.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetPreviousExecutionStateAttribute();
		
		/// <summary>
        /// Helper for our restart logic up in the about flyout. We set this
        /// right before we restart for an update so that MetroAppShell can
        /// communicate this to the ceh.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetUpdatePendingAttribute();
		
		/// <summary>
        /// Helper for our restart logic up in the about flyout. We set this
        /// right before we restart for an update so that MetroAppShell can
        /// communicate this to the ceh.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetUpdatePendingAttribute([MarshalAs(UnmanagedType.U1)] bool aUpdatePending);
		
		/// <summary>
        /// Determine if metro firefox is running in the foreground.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetForegroundAttribute();
		
		/// <summary>
        /// Show the settings flyout
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ShowSettingsFlyout();
		
		/// <summary>
        /// Launches the specified application with the specified arguments and
        /// switches to Desktop mode if in metro mode.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LaunchInDesktop([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aPath, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aArguments);
		
		/// <summary>
        /// Displays a native Windows 8 toast.
        ///
        /// @param aAppId  Application ID for current application.
        /// If using Metro mode, it can be null string.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ShowNativeToast([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aTitle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aMessage, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase anImage, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aCookie, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aAppId);
		
		/// <summary>
        /// Pins a new tile to the Windows 8 start screen.
        ///
        /// @param aTileID         An ID which can later be used to remove the tile
        /// ID must only contain valid filesystem characters
        /// @param aShortName      A short name for the tile
        /// @param aDiplayName     The name that will be displayed on the tile
        /// @param aActivationArgs The arguments to pass to the browser upon
        /// activation of the tile
        /// @param aTileImage An image for the normal tile view
        /// @param aSmallTileImage An image for the small tile view
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PinTileAsync([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aTileID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aShortName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aDisplayName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aActivationArgs, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aTileImage, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aSmallTileImage);
		
		/// <summary>
        /// Unpins a tile from the Windows 8 start screen.
        ///
        /// @param aTileID An existing ID which was previously pinned
        /// ID must only contain valid filesystem characters
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnpinTileAsync([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aTileID);
		
		/// <summary>
        /// Determines if a tile is pinned to the Windows 8 start screen.
        ///
        /// @param aTileID An ID which may have been pinned with pinTileAsync
        /// ID must only contain valid filesystem characters
        /// @return true if the tile is pinned
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsTilePinned([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aTileID);
		
		/// <summary>
        /// Soft keyboard attributes. Used in unison with shown/hidden observer
        /// events sent via FrameworkView.
        ///
        /// keyboardVisible - returns true if the soft keyboard is currently
        /// displayed, false otherwise.
        /// keyboardX, keyboardY, keyboardWidth, keyboardHeight - occlude rect
        /// of the keyboard when displayed in device independent pixels.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetKeyboardVisibleAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetKeyboardXAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetKeyboardYAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetKeyboardWidthAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetKeyboardHeightAttribute();
		
		/// <summary>
        /// Settings panel links. addSettingsPanelEntry adds an entry to
        /// the settings flyout panel that the user can invoke.
        ///
        /// @param aChromePanelId panel id invoked via nsIBrowserDOMWindow's
        /// ShowPanel api. Example: 'prefs-container'
        /// @return a unique identifier that will be passed as "data" in the
        /// "metro-settings-entry-selected" notification when the entry is clicked
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint AddSettingsPanelEntry([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aLabel);
		
		/// <summary>
        /// Change the value of the "switch primary and secondary buttons" preference.
        /// See the Windows SwapMouseButton API docs for details.
        /// Included here for use in automated tests (see bug 839460).
        ///
        /// @param aSwap true to enable the preference, false to disable it.
        /// @return original value of the preference.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool SwapMouseButton([MarshalAs(UnmanagedType.U1)] bool aSwap);
	}
}
