// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file xpctest_interfaces.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Very simple test interfaces.
    ///
    /// This is used by the other test functionality when it needs to play around with
    /// interface pointers.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("3c8fd2f5-970c-42c6-b5dd-cda1c16dcfd8")]
	public interface nsIXPCTestInterfaceA
	{
		
		/// <summary>
        /// Very simple test interfaces.
        ///
        /// This is used by the other test functionality when it needs to play around with
        /// interface pointers.
        /// </summary>
		[return: MarshalAs(UnmanagedType.LPStr)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		string GetNameAttribute();
		
		/// <summary>
        /// Very simple test interfaces.
        ///
        /// This is used by the other test functionality when it needs to play around with
        /// interface pointers.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetNameAttribute([MarshalAs(UnmanagedType.LPStr)] string aName);
	}
	
	/// <summary>nsIXPCTestInterfaceB </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ff528c3a-2410-46de-acaa-449aa6403a33")]
	public interface nsIXPCTestInterfaceB
	{
		
		/// <summary>Member GetNameAttribute </summary>
		/// <returns>A System.String</returns>
		[return: MarshalAs(UnmanagedType.LPStr)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		string GetNameAttribute();
		
		/// <summary>Member SetNameAttribute </summary>
		/// <param name='aName'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetNameAttribute([MarshalAs(UnmanagedType.LPStr)] string aName);
	}
	
	/// <summary>nsIXPCTestInterfaceC </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("401cf1b4-355b-4cee-b7b3-c7973aee49bd")]
	public interface nsIXPCTestInterfaceC
	{
		
		/// <summary>Member GetSomeIntegerAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetSomeIntegerAttribute();
		
		/// <summary>Member SetSomeIntegerAttribute </summary>
		/// <param name='aSomeInteger'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSomeIntegerAttribute(int aSomeInteger);
	}
}
