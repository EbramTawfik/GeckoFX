// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIStorageStream.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// The nsIStorageStream interface maintains an internal data buffer that can be
    /// filled using a single output stream.  One or more independent input streams
    /// can be created to read the data from the buffer non-destructively.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("44a200fe-6c2b-4b41-b4e3-63e8c14e7c0d")]
	public interface nsIStorageStream
	{
		
		/// <summary>
        ///
        /// Initialize the stream, setting up the amount of space that will be
        /// allocated for the stream's backing-store.
        ///
        /// @param segmentSize
        /// Size of each segment. Must be a power of two.
        /// @param maxSize
        /// Maximum total size of this stream. length will always be less
        /// than or equal to this value. Passing UINT32_MAX is safe.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init(uint segmentSize, uint maxSize);
		
		/// <summary>
        /// Get a reference to the one and only output stream for this instance.
        /// The zero-based startPosition argument is used is used to set the initial
        /// write cursor position.  The startPosition cannot be set larger than the
        /// current buffer length.  Calling this method has the side-effect of
        /// truncating the internal buffer to startPosition bytes.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIOutputStream GetOutputStream(int startPosition);
		
		/// <summary>
        /// Create a new input stream to read data (written by the singleton output
        /// stream) from the internal buffer.  Multiple, independent input streams
        /// can be created.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIInputStream NewInputStream(int startPosition);
		
		/// <summary>
        /// The length attribute indicates the total number of bytes stored in the
        /// nsIStorageStream internal buffer, regardless of any consumption by input
        /// streams.  Assigning to the length field can be used to truncate the
        /// buffer data, but can not be used when either the instance's output
        /// stream is in use.
        ///
        /// @See #writeInProgress </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetLengthAttribute();
		
		/// <summary>
        /// The length attribute indicates the total number of bytes stored in the
        /// nsIStorageStream internal buffer, regardless of any consumption by input
        /// streams.  Assigning to the length field can be used to truncate the
        /// buffer data, but can not be used when either the instance's output
        /// stream is in use.
        ///
        /// @See #writeInProgress </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetLengthAttribute(uint aLength);
		
		/// <summary>
        /// True, when output stream has not yet been Close'ed
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetWriteInProgressAttribute();
	}
}
