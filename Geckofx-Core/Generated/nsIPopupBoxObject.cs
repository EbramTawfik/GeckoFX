// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPopupBoxObject.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b1192cac-467b-42ca-88d6-fcdec5bb4ef7")]
	public interface nsIPopupBoxObject
	{
		
		/// <summary>
        /// This method is deprecated. Use openPopup or openPopupAtScreen instead.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ShowPopup([MarshalAs(UnmanagedType.Interface)] nsIDOMElement srcContent, [MarshalAs(UnmanagedType.Interface)] nsIDOMElement popupContent, int xpos, int ypos, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.WStringMarshaler")] string popupType, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.WStringMarshaler")] string anchorAlignment, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.WStringMarshaler")] string popupAlignment);
		
		/// <summary>
        /// Hide the popup if it is open.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HidePopup();
		
		/// <summary>
        /// Allow the popup to automatically position itself.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetAutoPositionAttribute();
		
		/// <summary>
        /// Allow the popup to automatically position itself.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAutoPositionAttribute([MarshalAs(UnmanagedType.U1)] bool aAutoPosition);
		
		/// <summary>
        /// If keyboard navigation is enabled, the keyboard may be used to navigate
        /// the menuitems on the popup. Enabling keyboard navigation is the default
        /// behaviour and will install capturing key event listeners on the popup
        /// that do not propagate key events to the contents. If you wish to place
        /// elements in a popup which accept key events, such as textboxes, keyboard
        /// navigation should be disabled.
        ///
        /// Setting ignorekeys="true" on the popup element also disables keyboard
        /// navigation, and is recommended over calling this method.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnableKeyboardNavigator([MarshalAs(UnmanagedType.U1)] bool enableKeyboardNavigator);
		
		/// <summary>
        /// Enable automatic popup dismissal. This only has effect when called
        /// on an open popup.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnableRollup([MarshalAs(UnmanagedType.U1)] bool enableRollup);
		
		/// <summary>
        ///don't consume the rollup event </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetConsumeRollupEvent(uint consume);
		
		/// <summary>
        /// Size the popup to the given dimensions
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SizeTo(int width, int height);
		
		/// <summary>
        /// Move the popup to a point on screen in CSS pixels.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MoveTo(int left, int top);
		
		/// <summary>
        /// Open the popup relative to a specified node at a specific location.
        ///
        /// The popup may be either anchored to another node or opened freely.
        /// To anchor a popup to a node, supply an anchor node and set the position
        /// to a string indicating the manner in which the popup should be anchored.
        /// Possible values for position are:
        /// before_start, before_end, after_start, after_end,
        /// start_before, start_after, end_before, end_after,
        /// overlap, after_pointer
        ///
        /// The anchor node does not need to be in the same document as the popup.
        ///
        /// If the attributesOverride argument is true, the popupanchor, popupalign
        /// and position attributes on the popup node override the position value
        /// argument. If attributesOverride is false, the attributes are only used
        /// if position is empty.
        ///
        /// For an anchored popup, the x and y arguments may be used to offset the
        /// popup from its anchored position by some distance, measured in CSS pixels.
        /// x increases to the right and y increases down. Negative values may also
        /// be used to move to the left and upwards respectively.
        ///
        /// Unanchored popups may be created by supplying null as the anchor node.
        /// An unanchored popup appears at the position specified by x and y,
        /// relative to the viewport of the document containing the popup node. In
        /// this case, position and attributesOverride are ignored.
        ///
        /// @param anchorElement the node to anchor the popup to, may be null
        /// @param position manner is which to anchor the popup to node
        /// @param x horizontal offset
        /// @param y vertical offset
        /// @param isContextMenu true for context menus, false for other popups
        /// @param attributesOverride true if popup node attributes override position
        /// @param triggerEvent the event that triggered this popup (mouse click for example)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OpenPopup([MarshalAs(UnmanagedType.Interface)] nsIDOMElement anchorElement, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase position, int x, int y, [MarshalAs(UnmanagedType.U1)] bool isContextMenu, [MarshalAs(UnmanagedType.U1)] bool attributesOverride, [MarshalAs(UnmanagedType.Interface)] nsIDOMEvent triggerEvent);
		
		/// <summary>
        /// Open the popup at a specific screen position specified by x and y. This
        /// position may be adjusted if it would cause the popup to be off of the
        /// screen. The x and y coordinates are measured in CSS pixels, and like all
        /// screen coordinates, are given relative to the top left of the primary
        /// screen.
        ///
        /// @param isContextMenu true for context menus, false for other popups
        /// @param x horizontal screen position
        /// @param y vertical screen position
        /// @param triggerEvent the event that triggered this popup (mouse click for example)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OpenPopupAtScreen(int x, int y, [MarshalAs(UnmanagedType.U1)] bool isContextMenu, [MarshalAs(UnmanagedType.Interface)] nsIDOMEvent triggerEvent);
		
		/// <summary>
        /// Returns the state of the popup:
        /// closed - the popup is closed
        /// open - the popup is open
        /// showing - the popup is in the process of being shown
        /// hiding - the popup is in the process of being hidden
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPopupStateAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aPopupState);
		
		/// <summary>
        /// The node that triggered the popup. If the popup is not open, will return
        /// null.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMNode GetTriggerNodeAttribute();
		
		/// <summary>
        /// Retrieve the anchor that was specified to openPopup or for menupopups in a
        /// menu, the parent menu.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement GetAnchorNodeAttribute();
		
		/// <summary>
        /// Retrieve the screen rectangle of the popup, including the area occupied by
        /// any titlebar or borders present.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMClientRect GetOuterScreenRect();
		
		/// <summary>
        /// Move an open popup to the given anchor position. The arguments have the same
        /// meaning as the corresponding argument to openPopup. This method has no effect
        /// on popups that are not open.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MoveToAnchor([MarshalAs(UnmanagedType.Interface)] nsIDOMElement anchorElement, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase position, int x, int y, [MarshalAs(UnmanagedType.U1)] bool attributesOverride);
		
		/// <summary>
        ///Returns the alignment position where the popup has appeared relative to its
        /// anchor node or point, accounting for any flipping that occurred.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAlignmentPositionAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aAlignmentPosition);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetAlignmentOffsetAttribute();
	}
	
	/// <summary>nsIPopupBoxObjectConsts </summary>
	public class nsIPopupBoxObjectConsts
	{
		
		// <summary>
        // Control whether the event that caused the popup to be automatically
        // dismissed ("rolled up") should be consumed, or dispatched as a
        // normal event.  This should be set immediately before calling showPopup()
        // if non-default behavior is desired.
        // </summary>
		public const long ROLLUP_DEFAULT = 0;
		
		// <summary>
        //widget/platform default </summary>
		public const long ROLLUP_CONSUME = 1;
		
		// <summary>
        //consume the rollup event </summary>
		public const long ROLLUP_NO_CONSUME = 2;
	}
}
