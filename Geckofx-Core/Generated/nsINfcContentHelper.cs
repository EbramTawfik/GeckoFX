// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsINfcContentHelper.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("26673d1a-4af4-470a-ba96-f1f54b1f2052")]
	public interface nsINfcPeerCallback
	{
		
		/// <summary>
        /// Callback function used to notify NFC peer events.
        ///
        /// @param event
        /// An event indicating 'PeerReady' or 'PeerLost'
        /// One of NFC_EVENT_PEER_XXXX
        ///
        /// @param sessionToken
        /// SessionToken received from Chrome process
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PeerNotification(uint @event, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionToken);
	}
	
	/// <summary>nsINfcContentHelper </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("26e8123f-ba00-4708-ac77-d1902457168c")]
	public interface nsINfcContentHelper
	{
		
		/// <summary>Member SetSessionToken </summary>
		/// <param name='sessionToken'> </param>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool SetSessionToken([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionToken);
		
		/// <summary>Member GetDetailsNDEF </summary>
		/// <param name='window'> </param>
		/// <param name='sessionToken'> </param>
		/// <returns>A nsIDOMDOMRequest</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest GetDetailsNDEF([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionToken);
		
		/// <summary>Member ReadNDEF </summary>
		/// <param name='window'> </param>
		/// <param name='sessionToken'> </param>
		/// <returns>A nsIDOMDOMRequest</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest ReadNDEF([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionToken);
		
		/// <summary>Member WriteNDEF </summary>
		/// <param name='window'> </param>
		/// <param name='records'> </param>
		/// <param name='sessionToken'> </param>
		/// <returns>A nsIDOMDOMRequest</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest WriteNDEF([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, [MarshalAs(UnmanagedType.Interface)] nsIVariant records, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionToken);
		
		/// <summary>Member MakeReadOnlyNDEF </summary>
		/// <param name='window'> </param>
		/// <param name='sessionToken'> </param>
		/// <returns>A nsIDOMDOMRequest</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest MakeReadOnlyNDEF([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionToken);
		
		/// <summary>Member Connect </summary>
		/// <param name='window'> </param>
		/// <param name='techType'> </param>
		/// <param name='sessionToken'> </param>
		/// <returns>A nsIDOMDOMRequest</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest Connect([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, uint techType, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionToken);
		
		/// <summary>Member Close </summary>
		/// <param name='window'> </param>
		/// <param name='sessionToken'> </param>
		/// <returns>A nsIDOMDOMRequest</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest Close([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionToken);
		
		/// <summary>
        /// Initiate Send file operation
        ///
        /// @param window
        /// Current window
        ///
        /// @param blob
        /// Raw data of the file to be sent. This object represents a file-like
        /// (nsIDOMFile) object of immutable, raw data. The blob data needs
        /// to be 'object wrapped' before calling this interface.
        ///
        /// @param sessionToken
        /// Current token
        ///
        /// Returns DOMRequest, if initiation of send file operation is successful
        /// then 'onsuccess' is called else 'onerror'
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest SendFile([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, ref Gecko.JsVal blob, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionToken);
		
		/// <summary>
        /// Register the given application id with Chrome process
        ///
        /// @param window
        /// Current window
        ///
        /// @param appId
        /// Application ID to be registered
        ///
        /// @param event
        /// Event to be registered. Either NFC_EVENT_PEER_READY or NFC_EVENT_PEER_LOST
        ///
        /// @param callback
        /// Callback that is used to notify upper layers whenever PeerEvents happen.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterTargetForPeerEvent([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, uint appId, System.IntPtr @event, [MarshalAs(UnmanagedType.Interface)] nsINfcPeerCallback callback);
		
		/// <summary>
        /// Unregister the given application id with Chrome process
        ///
        /// @param window
        /// Current window
        ///
        /// @param appId
        /// Application ID to be registered
        ///
        /// @param event
        /// Event to be unregistered. Either NFC_EVENT_PEER_READY or NFC_EVENT_PEER_LOST
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterTargetForPeerEvent([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, uint appId, System.IntPtr @event);
		
		/// <summary>
        /// Checks if the given application's id is a registered peer target (with the Chrome process)
        ///
        /// @param window
        /// Current window
        ///
        /// @param appId
        /// Application ID to be updated with Chrome process
        ///
        /// Returns DOMRequest, if appId is registered then 'onsuccess' is called else 'onerror'
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest CheckP2PRegistration([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, uint appId);
		
		/// <summary>
        /// Notify the Chrome process that user has accepted to share nfc message on P2P UI
        ///
        /// @param window
        /// Current window
        ///
        /// @param appId
        /// Application ID that is capable of handling NFC_EVENT_PEER_READY event
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyUserAcceptedP2P([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, uint appId);
		
		/// <summary>
        /// Notify the status of sendFile operation to Chrome process
        ///
        /// @param window
        /// Current window
        ///
        /// @param status
        /// Status of sendFile operation
        ///
        /// @param requestId
        /// Request ID of SendFile DOM Request
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifySendFileStatus([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, System.IntPtr status, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase requestId);
		
		/// <summary>
        /// Power on the NFC hardware and start polling for NFC tags or devices.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest StartPoll([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window);
		
		/// <summary>
        /// Stop polling for NFC tags or devices. i.e. enter low power mode.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest StopPoll([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window);
		
		/// <summary>
        /// Power off the NFC hardware.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMDOMRequest PowerOff([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window);
	}
	
	/// <summary>nsINfcContentHelperConsts </summary>
	public class nsINfcContentHelperConsts
	{
		
		// 
		public const long NFC_EVENT_PEER_READY = 0x01;
		
		// 
		public const long NFC_EVENT_PEER_LOST = 0x02;
	}
}
