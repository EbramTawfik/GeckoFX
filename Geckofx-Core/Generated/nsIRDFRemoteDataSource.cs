// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIRDFRemoteDataSource.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// A datasource that may load asynchronously
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1D297320-27F7-11d3-BE01-000064657374")]
	public interface nsIRDFRemoteDataSource
	{
		
		/// <summary>
        /// This value is <code>true</code> when the datasource has
        /// fully loaded itself.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetLoadedAttribute();
		
		/// <summary>
        /// Specify the URI for the data source: this is the prefix
        /// that will be used to register the data source in the
        /// data source registry.
        /// @param aURI the URI to load
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init([MarshalAs(UnmanagedType.LPStr)] string aURI);
		
		/// <summary>
        /// Refresh the remote datasource, re-loading its contents
        /// from the URI.
        ///
        /// @param aBlocking If <code>true</code>, the call will block
        /// until the datasource has completely reloaded.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Refresh([MarshalAs(UnmanagedType.U1)] bool aBlocking);
		
		/// <summary>
        /// Request that a data source write its contents out to
        /// permanent storage, if applicable.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Flush();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FlushTo([MarshalAs(UnmanagedType.LPStr)] string aURI);
	}
}
