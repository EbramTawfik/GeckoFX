// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIAccessRulesManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///Copyright Â© 2015, Deutsche Telekom, Inc. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7baedd2a-3189-4b03-b2a3-34016043b5e2")]
	public interface nsIAccessRulesManager
	{
		
		/// <summary>
        /// Initiates Access Rules Manager, this should perform the initial
        /// reading of rules from access rule source
        /// @return Promise which is resolved if init is successful or rejected
        /// otherwise
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal Init();
		
		/// <summary>
        /// Retrieves all access rules.
        ///
        /// Rules are stored in an array. Each rule contains the following properties:
        /// - applet - describes an SE applet referenced by this rule. Might equal
        /// to an applet AID (as a byte array), or to a wildcard "all"
        /// meaning all applets.
        /// - application - describes an application referenced by this rule. Might
        /// be an array of developer certificate hashes (each as
        /// a byte array) in which case it lists all applications
        /// allowed access. Alternatively, might equal to wildcard
        /// "allowed-all" or "denied-all".
        ///
        /// Example rule format:
        /// [{ applet: ALL_APPLET,
        /// application: [[0x01, 0x02, ..., 0x20],
        /// [0x20, 0x19, ...., 0x01]],
        /// { applet: [0x00, 0x01, ..., 0x05],
        /// application: ALLOW_ALL}}]
        ///
        /// @return Promise which resolves with Array containing parsed access rules
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetAccessRules();
	}
	
	/// <summary>nsIAccessRulesManagerConsts </summary>
	public class nsIAccessRulesManagerConsts
	{
		
		// <summary>
        //Wildcard: rule allows all applications to access an SE applet </summary>
		public const ushort ALLOW_ALL = 1;
		
		// <summary>
        //Wildcard: rule denies all applications to access an SE applet </summary>
		public const ushort DENY_ALL = 2;
		
		// <summary>
        //Wildcard: rule allows application(s) access to all SE applets </summary>
		public const ushort ALL_APPLET = 3;
	}
}
