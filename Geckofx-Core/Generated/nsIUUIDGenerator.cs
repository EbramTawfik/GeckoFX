// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIUUIDGenerator.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// nsIUUIDGenerator is implemented by a service that can generate
    /// universally unique identifiers, ideally using any platform-native
    /// method for generating UUIDs.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("138ad1b2-c694-41cc-b201-333ce936d8b8")]
	public interface nsIUUIDGenerator
	{
		
		/// <summary>
        /// Obtains a new UUID using appropriate platform-specific methods to
        /// obtain a nsID that can be considered to be globally unique.
        ///
        /// @returns an nsID filled in with a new UUID.
        ///
        /// @throws NS_ERROR_FAILURE if a UUID cannot be generated (e.g. if
        /// an underlying source of randomness is not available)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GenerateUUID();
		
		/// <summary>
        /// Obtain a new UUID like the generateUUID method, but place it in
        /// the provided nsID pointer instead of allocating a new nsID.
        ///
        /// @param id an existing nsID pointer where the UUID will be stored.
        ///
        /// @throws NS_ERROR_FAILURE if a UUID cannot be generated (e.g. if
        /// an underlying source of randomness is not available)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GenerateUUIDInPlace(System.IntPtr id);
	}
}
