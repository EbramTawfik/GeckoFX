// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsITelephonyService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("baa9f5f3-5cab-40e0-81e9-ae0abd917907")]
	public interface nsITelephonyListener
	{
		
		/// <summary>
        /// Called when enumeration asked by nsITelephonyService::enumerateCalls
        /// is completed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnumerateCallStateComplete();
		
		/// <summary>
        /// Called when nsITelephonyService is asked to enumerate the current
        /// telephony call state (nsITelephonyService::enumerateCalls). This is
        /// called once per call that is currently managed by the RIL.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnumerateCallState([MarshalAs(UnmanagedType.Interface)] nsITelephonyCallInfo info);
		
		/// <summary>
        /// Notified when a telephony call changes state.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CallStateChanged(uint length, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] nsITelephonyCallInfo[] allInfo);
		
		/// <summary>
        /// Notify when RIL receives supplementary service notification.
        ///
        /// @param clientId
        ///            Indicate the RIL client, 0 ~ (number of client - 1).
        /// @param callIndex
        /// Call identifier assigned by the RIL. -1 if not specified
        /// @param notification
        /// One of the nsITelephonyService::NOTIFICATION_* values.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SupplementaryServiceNotification(uint clientId, int callIndex, ushort notification);
		
		/// <summary>
        /// Called when a waiting call comes in CDMA networks.
        ///
        /// @param clientId
        ///            Indicate the RIL client, 0 ~ (number of client - 1).
        /// @param number
        /// Number of the other party.
        /// @param numberPresentation
        /// Presentation of the call number.
        /// One of the nsITelephonyProvider::CALL_PRESENTATION_* values.
        /// @param name
        /// Name of the other party.
        /// @param namePresentation
        /// Presentation of the call name.
        /// One of the nsITelephonyProvider::CALL_PRESENTATION_* values.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyCdmaCallWaiting(uint clientId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase number, ushort numberPresentation, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase name, ushort namePresentation);
		
		/// <summary>
        /// Called when RIL error occurs to creating or separating a conference call.
        ///
        /// @param name
        /// Error name. Possible values are addError and removeError.
        /// @param message
        /// Detailed error message from RIL.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyConferenceError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase message);
	}
	
	/// <summary>
    /// A callback interface for handling asynchronous response.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("cffc3f9d-2c88-4a14-8ebc-f216caf0cc1d")]
	public interface nsITelephonyCallback
	{
		
		/// <summary>
        /// A callback interface for handling asynchronous response.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifySuccess();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase error);
	}
	
	/// <summary>
    /// A callback interface for handling asynchronous response for telephony.dial.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("e16c6e6f-93c6-4e1e-99bf-592b98f67e15")]
	public interface nsITelephonyDialCallback : nsITelephonyCallback
	{
		
		/// <summary>
        /// A callback interface for handling asynchronous response.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void NotifySuccess();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void NotifyError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase error);
		
		/// <summary>
        /// Called when a dial request is treated as an MMI code and it is about to
        /// process the request.
        ///
        /// @param serviceCode
        /// MMI service code key string that defined in MMI_KS_SC_*
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyDialMMI([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase serviceCode);
		
		/// <summary>
        /// Called when a dial request is treated as a call setup and the result
        /// succeeds.
        ///
        /// @param clientId
        ///            Indicate the RIL client, 0 ~ (number of client - 1).
        /// @param callIndex
        /// Call index from RIL.
        /// @param number
        /// Dialed out phone number (ex: Temporary CLIR prefix will be removed)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyDialCallSuccess(uint cliendId, uint callIndex, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase number);
		
		/// <summary>
        /// Called when a MMI code request succeeds.
        /// The function should only be called after notifyDialMMI.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyDialMMISuccess([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase statusMessage);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyDialMMISuccessWithInteger([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase statusMessage, ushort aAdditionalInformation);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyDialMMISuccessWithStrings([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase statusMessage, uint aLength, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] System.IntPtr[] aAdditionalInformation);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyDialMMISuccessWithCallForwardingOptions([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase statusMessage, uint aLength, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] nsIMobileCallForwardingOptions[] aAdditionalInformation);
		
		/// <summary>
        /// Called when a MMI code request fails.
        /// The function should only be called after notifyDialMMI.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyDialMMIError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase error);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyDialMMIErrorWithInfo([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase error, ushort info);
	}
	
	/// <summary>
    /// XPCOM component (in the content process) that provides the telephony
    /// information.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("75e4b5e3-6710-4156-bdaa-ba1081f390f4")]
	public interface nsITelephonyService
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetDefaultServiceIdAttribute();
		
		/// <summary>
        /// Called when a content process registers receiving unsolicited messages from
        /// RadioInterfaceLayer in the chrome process. Only a content process that has
        /// the 'telephony' permission is allowed to register.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterListener([MarshalAs(UnmanagedType.Interface)] nsITelephonyListener listener);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterListener([MarshalAs(UnmanagedType.Interface)] nsITelephonyListener listener);
		
		/// <summary>
        /// Will continue calling listener.enumerateCallState until the listener
        /// returns false.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnumerateCalls([MarshalAs(UnmanagedType.Interface)] nsITelephonyListener listener);
		
		/// <summary>
        /// Functionality for making and managing phone calls.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Dial(uint clientId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase number, [MarshalAs(UnmanagedType.U1)] bool isEmergency, [MarshalAs(UnmanagedType.Interface)] nsITelephonyDialCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendTones(uint clientId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase dtmfChars, uint pauseDuration, uint toneDuration, [MarshalAs(UnmanagedType.Interface)] nsITelephonyCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartTone(uint clientId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase dtmfChar);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StopTone(uint clientId);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AnswerCall(uint clientId, uint callIndex, [MarshalAs(UnmanagedType.Interface)] nsITelephonyCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RejectCall(uint clientId, uint callIndex, [MarshalAs(UnmanagedType.Interface)] nsITelephonyCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HangUpCall(uint clientId, uint callIndex, [MarshalAs(UnmanagedType.Interface)] nsITelephonyCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HoldCall(uint clientId, uint callIndex, [MarshalAs(UnmanagedType.Interface)] nsITelephonyCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResumeCall(uint clientId, uint callIndex, [MarshalAs(UnmanagedType.Interface)] nsITelephonyCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ConferenceCall(uint clientId, [MarshalAs(UnmanagedType.Interface)] nsITelephonyCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SeparateCall(uint clientId, uint callIndex, [MarshalAs(UnmanagedType.Interface)] nsITelephonyCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HangUpConference(uint clientId, [MarshalAs(UnmanagedType.Interface)] nsITelephonyCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HoldConference(uint clientId, [MarshalAs(UnmanagedType.Interface)] nsITelephonyCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResumeConference(uint clientId, [MarshalAs(UnmanagedType.Interface)] nsITelephonyCallback callback);
		
		/// <summary>
        /// Send an USSD on existing session. It results in error if the session is
        /// not existed.
        ///
        /// If successful, callback.notifySuccess() will be called.
        /// Otherwise, callback.notifyError() will be called.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendUSSD(uint clientId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase ussd, [MarshalAs(UnmanagedType.Interface)] nsITelephonyCallback callback);
		
		/// <summary>
        /// Cancel an existing USSD session.
        ///
        /// If successful, callback.notifySuccess() will be called.
        /// Otherwise, callback.notifyError() will be called.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CancelUSSD(uint cliendId, [MarshalAs(UnmanagedType.Interface)] nsITelephonyCallback callback);
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetMicrophoneMutedAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMicrophoneMutedAttribute([MarshalAs(UnmanagedType.U1)] bool aMicrophoneMuted);
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetSpeakerEnabledAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSpeakerEnabledAttribute([MarshalAs(UnmanagedType.U1)] bool aSpeakerEnabled);
	}
	
	/// <summary>nsITelephonyServiceConsts </summary>
	public class nsITelephonyServiceConsts
	{
		
		// <summary>
        // XPCOM component (in the content process) that provides the telephony
        // information.
        // </summary>
		public const ushort CALL_STATE_UNKNOWN = 0;
		
		// 
		public const ushort CALL_STATE_DIALING = 1;
		
		// 
		public const ushort CALL_STATE_ALERTING = 2;
		
		// 
		public const ushort CALL_STATE_CONNECTED = 3;
		
		// 
		public const ushort CALL_STATE_HELD = 4;
		
		// 
		public const ushort CALL_STATE_DISCONNECTED = 5;
		
		// 
		public const ushort CALL_STATE_INCOMING = 6;
		
		// 
		public const ushort NOTIFICATION_REMOTE_HELD = 0;
		
		// 
		public const ushort NOTIFICATION_REMOTE_RESUMED = 1;
		
		// 
		public const ushort CALL_PRESENTATION_ALLOWED = 0;
		
		// 
		public const ushort CALL_PRESENTATION_RESTRICTED = 1;
		
		// 
		public const ushort CALL_PRESENTATION_UNKNOWN = 2;
		
		// 
		public const ushort CALL_PRESENTATION_PAYPHONE = 3;
	}
}
