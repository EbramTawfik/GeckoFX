// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIExternalURLHandlerService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// The external URL handler service is used for finding
    /// platform-specific applications for handling particular URLs.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("56c5c7d3-6fd3-43f8-9429-4397e111453a")]
	public interface nsIExternalURLHandlerService
	{
		
		/// <summary>
        /// Given a URL, looks up the handler info from the OS. This should be
        /// overridden by each OS's implementation.
        ///
        /// @param aURL The URL we are looking for.
        /// @param aFound  Was an OS default handler for this URL found?
        /// @return  An nsIHanderInfo for the protocol.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIHandlerInfo GetURLHandlerInfoFromOS([MarshalAs(UnmanagedType.Interface)] nsIURI aURL, [MarshalAs(UnmanagedType.U1)] ref bool aFound);
	}
}
