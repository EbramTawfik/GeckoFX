// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPresentationDeviceManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Manager for the device availability. User can observe "presentation-device-change"
    /// for any update of the available devices.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("beb61db5-3d5f-454f-a15a-dbfa0337c569")]
	public interface nsIPresentationDeviceManager
	{
		
		/// <summary>
        /// true if there is any device available.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetDeviceAvailableAttribute();
		
		/// <summary>
        /// Register a device provider manually.
        /// @param provider The device provider to add.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddDeviceProvider([MarshalAs(UnmanagedType.Interface)] nsIPresentationDeviceProvider provider);
		
		/// <summary>
        /// Unregister a device provider manually.
        /// @param provider The device provider to remove.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveDeviceProvider([MarshalAs(UnmanagedType.Interface)] nsIPresentationDeviceProvider provider);
		
		/// <summary>
        /// Force all registered device providers to update device information.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ForceDiscovery();
		
		/// <summary>
        /// Retrieve all available devices, return a list of nsIPresentationDevice.
        /// The returned list is a cached device list and could be out-of-date.
        /// Observe device change events to get following updates.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIArray GetAvailableDevices();
	}
}
