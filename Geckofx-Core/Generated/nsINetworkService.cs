// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsINetworkService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("91824160-fb25-11e1-a21f-0800200c9a66")]
	public interface nsIWifiTetheringCallback
	{
		
		/// <summary>
        /// Callback function used to report status to WifiManager.
        ///
        /// @param error
        /// An error message if the operation wasn't successful,
        /// or `null` if it was.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WifiTetheringEnabledChange(ref Gecko.JsVal error);
	}
	
	/// <summary>nsINetworkStatsCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("e079aa2a-ec0a-4bbd-b1a4-d81a9faae464")]
	public interface nsINetworkStatsCallback
	{
		
		/// <summary>Member NetworkStatsAvailable </summary>
		/// <param name='success'> </param>
		/// <param name='rxBytes'> </param>
		/// <param name='txBytes'> </param>
		/// <param name='date'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NetworkStatsAvailable([MarshalAs(UnmanagedType.U1)] bool success, uint rxBytes, uint txBytes, ref Gecko.JsVal date);
	}
	
	/// <summary>nsINetworkUsageAlarmCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0706bfa2-ac2d-11e2-9a8d-7b6d988d4767")]
	public interface nsINetworkUsageAlarmCallback
	{
		
		/// <summary>Member NetworkUsageAlarmResult </summary>
		/// <param name='error'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NetworkUsageAlarmResult(ref Gecko.JsVal error);
	}
	
	/// <summary>nsIWifiOperationModeCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9ede8720-f8bc-11e2-b778-0800200c9a66")]
	public interface nsIWifiOperationModeCallback
	{
		
		/// <summary>
        /// Callback function used to report result to WifiManager.
        ///
        /// @param error
        /// An error message if the operation wasn't successful,
        /// or `null` if it was.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WifiOperationModeResult(ref Gecko.JsVal error);
	}
	
	/// <summary>nsISetDhcpServerCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("097878b0-19fc-11e3-8ffd-0800200c9a66")]
	public interface nsISetDhcpServerCallback
	{
		
		/// <summary>
        /// Callback function used to report the DHCP server set result
        ///
        /// @param error
        /// An error message if the operation wasn't successful,
        /// or `null` if it was.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DhcpServerResult(ref Gecko.JsVal error);
	}
	
	/// <summary>nsIUsbTetheringCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("32407c50-46c7-11e3-8f96-0800200c9a66")]
	public interface nsIUsbTetheringCallback
	{
		
		/// <summary>
        /// Callback function used to report status of enabling usb tethering.
        ///
        /// @param error
        /// An error message if the operation wasn't successful,
        /// or `null` if it was.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UsbTetheringEnabledChange(ref Gecko.JsVal error);
	}
	
	/// <summary>nsIEnableUsbRndisCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("055fd560-46ad-11e3-8f96-0800200c9a66")]
	public interface nsIEnableUsbRndisCallback
	{
		
		/// <summary>
        /// Callback function used to report the status of enabling/disabling usb rndis.
        ///
        /// @param success
        /// Boolean to indicate the operation is successful or not.
        /// @param enable
        /// Boolean to indicate if we are enabling or disabling usb rndis.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnableUsbRndisResult([MarshalAs(UnmanagedType.U1)] bool success, [MarshalAs(UnmanagedType.U1)] bool enable);
	}
	
	/// <summary>nsIUpdateUpStreamCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("4f08cc30-46ad-11e3-8f96-0800200c9a66")]
	public interface nsIUpdateUpStreamCallback
	{
		
		/// <summary>
        /// Callback function used to report the result of updating upstream.
        ///
        /// @param success
        /// Boolean to indicate the operation is successful or not.
        /// @param externalIfname
        /// The external interface name.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UpdateUpStreamResult([MarshalAs(UnmanagedType.U1)] bool success, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase externalIfname);
	}
	
	/// <summary>
    /// Provide network services.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f96461fa-e844-45d2-a6c3-8cd23ab0916b")]
	public interface nsINetworkService
	{
		
		/// <summary>
        /// Enable or disable Wifi Tethering
        ///
        /// @param enabled
        /// Boolean that indicates whether tethering should be enabled (true) or disabled (false).
        /// @param config
        /// The Wifi Tethering configuration from settings db.
        /// @param callback
        /// Callback function used to report status to WifiManager.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetWifiTethering([MarshalAs(UnmanagedType.U1)] bool enabled, ref Gecko.JsVal config, [MarshalAs(UnmanagedType.Interface)] nsIWifiTetheringCallback callback);
		
		/// <summary>
        /// Enable or disable DHCP server
        ///
        /// @param enabled
        /// Boolean that indicates enabling or disabling DHCP server.
        ///
        /// @param config
        /// Config used to enable the DHCP server. It contains
        /// .startIp    start of the ip lease range (string)
        /// .endIp      end of the ip lease range (string)
        /// .serverIp   ip of the DHCP server (string)
        /// .maskLength the length of the subnet mask
        /// .ifname     the interface name
        ///
        /// As for disabling the DHCP server, put this value |null|.
        ///
        /// @param callback
        /// Callback function used to report status.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDhcpServer([MarshalAs(UnmanagedType.U1)] bool enabled, ref Gecko.JsVal config, [MarshalAs(UnmanagedType.Interface)] nsISetDhcpServerCallback callback);
		
		/// <summary>
        /// Retrieve network interface stats.
        ///
        /// @param networkName
        /// Select the Network interface to request estats.
        ///
        /// @param callback
        /// Callback to notify result and provide stats, connectionType
        /// and the date when stats are retrieved
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetNetworkInterfaceStats([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase networkName, [MarshalAs(UnmanagedType.Interface)] nsINetworkStatsCallback callback);
		
		/// <summary>
        /// Set Alarm of usage per interface
        ///
        /// @param networkName
        /// Select the Network interface to set an alarm.
        ///
        /// @param threshold
        /// Amount of data that will trigger the alarm.
        ///
        /// @param callback
        /// Callback to notify the result.
        ///
        /// @return false if there is no interface registered for the networkType param.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool SetNetworkInterfaceAlarm([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase networkName, int threshold, [MarshalAs(UnmanagedType.Interface)] nsINetworkUsageAlarmCallback callback);
		
		/// <summary>
        /// Reload Wifi firmware to specific operation mode.
        ///
        /// @param interfaceName
        /// Wifi Network interface name.
        ///
        /// @param mode
        /// AP  - Access pointer mode.
        /// P2P - Peer to peer connection mode.
        /// STA - Station mode.
        ///
        /// @param callback
        /// Callback to notify Wifi firmware reload result.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetWifiOperationMode([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase interfaceName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase mode, [MarshalAs(UnmanagedType.Interface)] nsIWifiOperationModeCallback callback);
		
		/// <summary>
        /// Set http proxy for specific network
        ///
        /// @param networkInterface
        /// The network interface which contains the http proxy host/port
        /// we want to set.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetNetworkProxy([MarshalAs(UnmanagedType.Interface)] nsINetworkInterface networkInterface);
		
		/// <summary>
        /// Set USB tethering.
        ///
        /// @param enabled
        /// Boolean to indicate we are going to enable or disable usb tethering.
        /// @param config
        /// The usb tethering configuration.
        /// @param callback
        /// Callback function used to report the result enabling/disabling usb tethering.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetUSBTethering([MarshalAs(UnmanagedType.U1)] bool enabled, ref Gecko.JsVal config, [MarshalAs(UnmanagedType.Interface)] nsIUsbTetheringCallback callback);
		
		/// <summary>
        /// Reset routing table.
        ///
        /// @param networkInterface
        /// The network interface we want remove from the routing table.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResetRoutingTable([MarshalAs(UnmanagedType.Interface)] nsINetworkInterface networkInterface);
		
		/// <summary>
        /// Set DNS.
        ///
        /// @param networkInterface
        /// The network interface which contains the DNS we want to set.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDNS([MarshalAs(UnmanagedType.Interface)] nsINetworkInterface networkInterface);
		
		/// <summary>
        /// Set default route and DNS.
        ///
        /// @param networkInterface
        /// The network interface we want to set to the default route and dns.
        /// @param oldInterface
        /// The previous network interface.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDefaultRouteAndDNS([MarshalAs(UnmanagedType.Interface)] nsINetworkInterface networkInterface, [MarshalAs(UnmanagedType.Interface)] nsINetworkInterface oldInterface);
		
		/// <summary>
        /// Remove default route.
        ///
        /// @param networkInterface
        /// The network interface we want remove from the default route.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveDefaultRoute([MarshalAs(UnmanagedType.Interface)] nsINetworkInterface networkInterface);
		
		/// <summary>
        /// Add host route.
        ///
        /// @param networkInterface
        /// The network interface we want to add to the host route.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddHostRoute([MarshalAs(UnmanagedType.Interface)] nsINetworkInterface networkInterface);
		
		/// <summary>
        /// Remove host route.
        ///
        /// @param network
        /// The network interface we want to remove from the host route.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveHostRoute([MarshalAs(UnmanagedType.Interface)] nsINetworkInterface network);
		
		/// <summary>
        /// Remove all host routes.
        ///
        /// @param interfaceName
        /// The interface name we want remove from the routing table.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveHostRoutes([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase interfaceName);
		
		/// <summary>
        /// Add host route with resolve.
        ///
        /// @param network
        /// The network interface we want to add to the host route.
        /// @param hosts
        /// The array of host names we want to add.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddHostRouteWithResolve([MarshalAs(UnmanagedType.Interface)] nsINetworkInterface network, ref Gecko.JsVal hosts);
		
		/// <summary>
        /// Remove host route with resolve.
        ///
        /// @param network
        /// The network interface we want to remove from the host route.
        /// @param hosts
        /// The array of host names we want to remove.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveHostRouteWithResolve([MarshalAs(UnmanagedType.Interface)] nsINetworkInterface network, ref Gecko.JsVal hosts);
		
		/// <summary>
        /// Add route to secondary routing table.
        ///
        /// @param interfaceName
        /// The network interface for this route.
        /// @param route
        /// The route info should have the following fields:
        /// .ip: destination ip address
        /// .prefix: destination prefix
        /// .gateway: gateway ip address
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddSecondaryRoute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase interfaceName, ref Gecko.JsVal route);
		
		/// <summary>
        /// Remove route from secondary routing table.
        ///
        /// @param interfaceName
        /// The network interface for the route we want to remove.
        /// @param route
        /// The route info should have the following fields:
        /// .ip: destination ip address
        /// .prefix: destination prefix
        /// .gateway: gateway ip address
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveSecondaryRoute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase interfaceName, ref Gecko.JsVal route);
		
		/// <summary>
        /// Enable or disable usb rndis.
        ///
        /// @param enable
        /// Boolean to indicate we want enable or disable usb rndis.
        /// @param callback
        /// Callback function to report the result.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnableUsbRndis([MarshalAs(UnmanagedType.U1)] bool enable, [MarshalAs(UnmanagedType.Interface)] nsIEnableUsbRndisCallback callback);
		
		/// <summary>
        /// Update upstream.
        ///
        /// @param previous
        /// The previous internal and external interface.
        /// @param current
        /// The current internal and external interface.
        /// @param callback
        /// Callback function to report the result.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UpdateUpStream(ref Gecko.JsVal previous, ref Gecko.JsVal current, [MarshalAs(UnmanagedType.Interface)] nsIUpdateUpStreamCallback callback);
	}
}
