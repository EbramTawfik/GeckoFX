// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPushClient.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Satisfies contracts similar to the Push API specification.
    ///
    /// If status is not NS_OK, endpoint should be ignored. When subscribing to
    /// a new endpoint, endpoint will be a valid URL on success, when querying for
    /// the presence of an existing subscription, this will be an empty string if
    /// the calling {scope+principal} does not currently have an associated
    /// endpoint.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("dc201064-8e5c-4a26-bd37-d1e33558a903")]
	public interface nsIPushEndpointCallback
	{
		
		/// <summary>
        /// Satisfies contracts similar to the Push API specification.
        ///
        /// If status is not NS_OK, endpoint should be ignored. When subscribing to
        /// a new endpoint, endpoint will be a valid URL on success, when querying for
        /// the presence of an existing subscription, this will be an empty string if
        /// the calling {scope+principal} does not currently have an associated
        /// endpoint.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnPushEndpoint(int status, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase endpoint, uint keyLen, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] byte[] key);
	}
	
	/// <summary>
    /// Satisfies contracts similar to the Push API specification.
    ///
    /// If status is not NS_OK, there was a problem unsubscribing and success should
    /// be ignored.  success is true if unsubscribing was successful and false if
    /// there was no subscription.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9522934d-e844-4f2f-81e8-48c3947b44de")]
	public interface nsIUnsubscribeResultCallback
	{
		
		/// <summary>
        /// Satisfies contracts similar to the Push API specification.
        ///
        /// If status is not NS_OK, there was a problem unsubscribing and success should
        /// be ignored.  success is true if unsubscribing was successful and false if
        /// there was no subscription.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnUnsubscribe(int status, [MarshalAs(UnmanagedType.U1)] bool success);
	}
	
	/// <summary>
    /// Provides an XPIDL component to interact with the PushService from content
    /// processes. Unlike PushManager, this has no relationship to the DOM and is
    /// not exposed to web content. This was added to allow ServiceWorkers to use
    /// it by dispatching appropriate runnables to the main thread.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("6622d599-439e-4ad1-af32-c941bd2b9968")]
	public interface nsIPushClient
	{
		
		/// <summary>
        /// Provides an XPIDL component to interact with the PushService from content
        /// processes. Unlike PushManager, this has no relationship to the DOM and is
        /// not exposed to web content. This was added to allow ServiceWorkers to use
        /// it by dispatching appropriate runnables to the main thread.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Subscribe([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase scope, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal, [MarshalAs(UnmanagedType.Interface)] nsIPushEndpointCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Unsubscribe([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase scope, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal, [MarshalAs(UnmanagedType.Interface)] nsIUnsubscribeResultCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetSubscription([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase scope, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal, [MarshalAs(UnmanagedType.Interface)] nsIPushEndpointCallback callback);
	}
}
