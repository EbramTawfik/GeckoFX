// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPackageKitService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("89bb04f6-ce2a-11e3-8f4f-60a44c717042")]
	public interface nsIPackageKitService
	{
		
		/// <summary>
        ///Ask to install a list of packages via PackageKit
        /// @param   packageKitMethod
        /// The PackageKit installation method
        /// @param   packageArray
        /// A nonempty array of strings describing the list of packages to
        /// install.
        /// @param   An object implementing nsIObserver that will be notified with
        /// a message of topic "packagekit-install". The message data
        /// contains the error returned by PackageKit if the installation
        /// fails and is null otherwise.
        ///
        /// This function may raise an NS_ERROR_INVALID_ARG, NS_ERROR_FAILURE or
        /// NS_ERROR_OUT_OF_MEMORY exception. Otherwise, the observer will be notified
        /// when the operation completes.
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InstallPackages(uint packageKitMethod, [MarshalAs(UnmanagedType.Interface)] nsIArray packageArray, [MarshalAs(UnmanagedType.Interface)] nsIObserver observer);
	}
	
	/// <summary>nsIPackageKitServiceConsts </summary>
	public class nsIPackageKitServiceConsts
	{
		
		// <summary>
        //See https://github.com/nekohayo/gnome-packagekit/blob/master/src/org.freedesktop.PackageKit.xml </summary>
		public const ulong PK_INSTALL_PACKAGE_NAMES = 0;
		
		// 
		public const ulong PK_INSTALL_MIME_TYPES = 1;
		
		// 
		public const ulong PK_INSTALL_FONTCONFIG_RESOURCES = 2;
		
		// 
		public const ulong PK_INSTALL_GSTREAMER_RESOURCES = 3;
		
		// 
		public const ulong PK_INSTALL_METHOD_COUNT = 4;
	}
}
