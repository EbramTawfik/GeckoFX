// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsISyncJPAKE.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("5ab02a98-5122-4b90-93cd-f259c4b42e3a")]
	public interface nsISyncJPAKE
	{
		
		/// <summary>
        /// Perform first round of the JPAKE exchange.
        ///
        /// @param aSignerID
        /// String identifying the signer.
        /// @param aGX1
        /// Schnorr signature value g^x1, in hex representation.
        /// @param aGV1
        /// Schnorr signature value g^v1 (v1 is a random value), in hex
        /// representation.
        /// @param aR1
        /// Schnorr signature value r1 = v1 - x1 * h, in hex representation.
        /// @param aGX2
        /// Schnorr signature value g^x2, in hex representation.
        /// @param aGV2
        /// Schnorr signature value g^v2 (v2 is a random value), in hex
        /// representation.
        /// @param aR2
        /// Schnorr signature value r2 = v2 - x2 * h, in hex representation.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Round1([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aSignerID, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aGX1, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aGV1, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aR1, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aGX2, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aGV2, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aR2);
		
		/// <summary>
        /// Perform second round of the JPAKE exchange.
        ///
        /// @param aPeerID
        /// String identifying the peer.
        /// @param aPIN
        /// String containing the weak secret (PIN).
        /// @param aGX3
        /// Schnorr signature value g^x3, in hex representation.
        /// @param aGV3
        /// Schnorr signature value g^v3 (v3 is a random value), in hex
        /// representation.
        /// @param aR3
        /// Schnorr signature value r3 = v3 - x3 * h, in hex representation.
        /// @param aGX4
        /// Schnorr signature value g^x4, in hex representation.
        /// @param aGV4
        /// Schnorr signature value g^v4 (v4 is a random value), in hex
        /// representation.
        /// @param aR4
        /// Schnorr signature value r4 = v4 - x4 * h, in hex representation.
        /// @param aA
        /// Schnorr signature value A, in hex representation.
        /// @param aGVA
        /// Schnorr signature value g^va (va is a random value), in hex
        /// representation.
        /// @param aRA
        /// Schnorr signature value ra = va - xa * h, in hex representation.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Round2([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aPeerID, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aPIN, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aGX3, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aGV3, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aR3, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aGX4, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aGV4, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aR4, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aA, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aGVA, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aRA);
		
		/// <summary>
        /// Perform the final step of the JPAKE exchange. This will compute
        /// the key and expand the key to two keys, an AES256 encryption key
        /// and a 256 bit HMAC key. It returns a key confirmation value
        /// (SHA256d of the key) and the encryption and HMAC keys.
        ///
        /// @param aB
        /// Schnorr signature value B, in hex representation.
        /// @param aGVB
        /// Schnorr signature value g^vb (vb is a random value), in hex
        /// representation.
        /// @param aRB
        /// Schnorr signature value rb = vb - xb * h, in hex representation.
        /// @param aAES256Key
        /// The AES 256 encryption key, in base64 representation.
        /// @param aHMAC256Key
        /// The 256 bit HMAC key, in base64 representation.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Final([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aB, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aGVB, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aRB, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHkdfInfo, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aAES256Key, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHMAC256Key);
	}
}
