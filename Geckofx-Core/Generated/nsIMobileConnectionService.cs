// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIMobileConnectionService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8884b326-891c-11e5-a434-67def07c4a41")]
	public interface nsIMobileConnectionListener
	{
		
		/// <summary>
        /// Notify when voice info is changed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyVoiceChanged();
		
		/// <summary>
        /// Notify when data info is changed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyDataChanged();
		
		/// <summary>
        /// Notify when data call is failed to establish.
        ///
        /// @param message
        /// Error message from RIL.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyDataError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase message);
		
		/// <summary>
        /// Notify when call forwarding state is changed.
        ///
        /// @param action
        /// One of the nsIMobileConnection.CALL_FORWARD_ACTION_* values.
        /// @param reason
        /// One of the nsIMobileConnection.CALL_FORWARD_REASON_* values.
        /// @param number
        /// Phone number of forwarding address.
        /// @param timeSeconds
        /// The time in seconds should wait before call is forwarded.
        /// @param serviceClass
        /// One of the nsIMobileConnection.ICC_SERVICE_CLASS_* values.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyCFStateChanged(ushort action, ushort reason, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase number, ushort timeSeconds, ushort serviceClass);
		
		/// <summary>
        /// Notify when emergency callback mode is changed.
        ///
        /// @param active
        /// Indicates whether the emergency callback mode is activated.
        /// @param timeoutMs
        /// The timeout in millisecond for emergency callback mode.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyEmergencyCbModeChanged([MarshalAs(UnmanagedType.U1)] bool active, uint timeoutMs);
		
		/// <summary>
        /// Notify when ota status is changed.
        ///
        /// @param status
        /// Ota status. Possible values: 'spl_unlocked', 'spc_retries_exceeded',
        /// 'a_key_exchanged', 'ssd_updated', 'nam_downloaded', 'mdn_downloaded',
        /// 'imsi_downloaded', 'prl_downloaded', 'committed', 'otapa_started',
        /// 'otapa_stopped', 'otapa_aborted'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyOtaStatusChanged([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase status);
		
		/// <summary>
        /// Notify when radio state is changed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyRadioStateChanged();
		
		/// <summary>
        /// Notify when clir mode is changed.
        ///
        /// @param mode
        /// One of the nsIMobileConnection.CLIR_* values.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyClirModeChanged(uint mode);
		
		/// <summary>
        /// Notify when last known network is changed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyLastKnownNetworkChanged();
		
		/// <summary>
        /// Notify when last known home network is changed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyLastKnownHomeNetworkChanged();
		
		/// <summary>
        /// Notify when network selection mode is changed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyNetworkSelectionModeChanged();
		
		/// <summary>
        /// Notify when device identities are changed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyDeviceIdentitiesChanged();
	}
	
	/// <summary>nsIMobileConnectionCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ef5e02a6-adff-4425-8634-ec49ced1f14f")]
	public interface nsIMobileConnectionCallback
	{
		
		/// <summary>
        /// notify*Success*() will be called, when request is succeed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifySuccess();
		
		/// <summary>Member NotifySuccessWithBoolean </summary>
		/// <param name='result'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifySuccessWithBoolean([MarshalAs(UnmanagedType.U1)] bool result);
		
		/// <summary>Member NotifyGetNetworksSuccess </summary>
		/// <param name='count'> </param>
		/// <param name='networks'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyGetNetworksSuccess(uint count, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] nsIMobileNetworkInfo[] networks);
		
		/// <summary>Member NotifyGetCallForwardingSuccess </summary>
		/// <param name='count'> </param>
		/// <param name='results'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyGetCallForwardingSuccess(uint count, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] nsIMobileCallForwardingOptions[] results);
		
		/// <summary>Member NotifyGetCallBarringSuccess </summary>
		/// <param name='program'> </param>
		/// <param name='enabled'> </param>
		/// <param name='serviceClass'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyGetCallBarringSuccess(ushort program, [MarshalAs(UnmanagedType.U1)] bool enabled, ushort serviceClass);
		
		/// <summary>Member NotifyGetCallWaitingSuccess </summary>
		/// <param name='serviceClass'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyGetCallWaitingSuccess(ushort serviceClass);
		
		/// <summary>Member NotifyGetClirStatusSuccess </summary>
		/// <param name='n'> </param>
		/// <param name='m'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyGetClirStatusSuccess(ushort n, ushort m);
		
		/// <summary>Member NotifyGetPreferredNetworkTypeSuccess </summary>
		/// <param name='type'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyGetPreferredNetworkTypeSuccess(int type);
		
		/// <summary>Member NotifyGetRoamingPreferenceSuccess </summary>
		/// <param name='mode'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyGetRoamingPreferenceSuccess(int mode);
		
		/// <summary>
        /// notifyError() will be called, when request is failed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase name);
	}
	
	/// <summary>nsIMobileConnectionService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("eaba3c4a-0dd5-4919-b1a2-7812e49dbbcb")]
	public interface nsIMobileConnectionService
	{
		
		/// <summary>Member GetNumItemsAttribute </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetNumItemsAttribute();
		
		/// <summary>Member GetItemByServiceId </summary>
		/// <param name='serviceId'> </param>
		/// <returns>A nsIMobileConnection</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIMobileConnection GetItemByServiceId(uint serviceId);
	}
	
	/// <summary>nsIMobileConnection </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7a557116-8753-11e5-9f9b-6794b577c0a1")]
	public interface nsIMobileConnection
	{
		
		/// <summary>Member GetServiceIdAttribute </summary>
		/// <returns>A System.UInt32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetServiceIdAttribute();
		
		/// <summary>
        /// Called when any one who is interested in receiving unsolicited messages
        /// from this nsIMobileConnection instance.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterListener([MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionListener listener);
		
		/// <summary>Member UnregisterListener </summary>
		/// <param name='listener'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterListener([MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionListener listener);
		
		/// <summary>
        /// String of format '<mcc>-<mnc>'. When changed, listener method
        /// 'notifyLastKnownNetworkChanged' is called.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLastKnownNetworkAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aLastKnownNetwork);
		
		/// <summary>
        /// String of format '<mcc>-<mnc>[-<spn>]'. When changed, listener method
        /// 'notifyLastKnownHomeNetworkChanged' is called.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLastKnownHomeNetworkAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aLastKnownHomeNetwork);
		
		/// <summary>
        /// Connection information about the voice.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIMobileConnectionInfo GetVoiceAttribute();
		
		/// <summary>
        /// Connection information about the data.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIMobileConnectionInfo GetDataAttribute();
		
		/// <summary>
        /// The selection mode of the voice and data networks. One of the
        /// nsIMobileConnection.NETWORK_SELECTION_MODE_* values.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetNetworkSelectionModeAttribute();
		
		/// <summary>
        /// Current radio state. One of the nsIMobileConnection.MOBILE_RADIO_STATE_*
        /// values.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetRadioStateAttribute();
		
		/// <summary>
        /// Device Identities, including IMEI, IMEISV, ESN and MEID.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIMobileDeviceIdentities GetDeviceIdentitiesAttribute();
		
		/// <summary>
        /// The network types supported by this radio.
        ///
        /// @return an array of nsIMobileConnection.MOBILE_NETWORK_TYPE_* values.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetSupportedNetworkTypes([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] ref int[] types);
		
		/// <summary>
        /// Search for available networks.
        ///
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifyGetNetworksSuccess() will be called. And the
        /// result will be an array of nsIMobileNetworkInfo.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'IllegalSIMorME', or
        /// 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetNetworks([MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Manually selects the passed in network, overriding the radio's current
        /// selection.
        ///
        /// @param network
        /// The manually selecting network.
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifySuccess() will be called.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'IllegalSIMorME', or
        /// 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SelectNetwork([MarshalAs(UnmanagedType.Interface)] nsIMobileNetworkInfo network, [MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Tell the radio to automatically select a network.
        ///
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifySuccess() will be called.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'IllegalSIMorME', or
        /// 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SelectNetworkAutomatically([MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Set preferred network type.
        ///
        /// @param type
        /// One of the nsIMobileConnection.PREFERRED_NETWORK_TYPE_* values.
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifySuccess() will be called.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'InvalidParameter',
        /// 'IllegalSIMorME', or 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetPreferredNetworkType(int type, [MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Query current preferred network type.
        ///
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifyGetPreferredNetworkTypeSuccess() will be called,
        /// and the result 'type' will be one of the
        /// nsIMobileConnection.PREFERRED_NETWORK_TYPE_* values, indicating the current
        /// preferred network type.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'IllegalSIMorME', or
        /// 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPreferredNetworkType([MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Set roaming preference.
        ///
        /// @param mode
        /// One of the nsIMobileConnection.CDMA_ROAMING_PREFERENCE_* values.
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifySuccess() will be called.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', InvalidParameter',
        /// 'IllegalSIMorME', or 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetRoamingPreference(int mode, [MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Query current roaming preference.
        ///
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifyGetRoamingPreferenceSuccess() will be called, and
        /// the result 'mode' will be one of the
        /// nsIMobileConnection.CDMA_ROAMING_PREFERENCE_* values, indicating the
        /// current roaming preference.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'IllegalSIMorME', or
        /// 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetRoamingPreference([MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Set voice privacy preference.
        ///
        /// @param enabled
        /// Boolean indicates the preferred voice privacy mode used in voice
        /// scrambling in CDMA networks. 'True' means the enhanced voice security
        /// is required.
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifySuccess() will be called.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'IllegalSIMorME', or
        /// 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetVoicePrivacyMode([MarshalAs(UnmanagedType.U1)] bool enabled, [MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Query current voice privacy mode.
        ///
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifySuccessWithBoolean() will be called. And the result
        /// will be a boolean indicating the current voice privacy mode.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'IllegalSIMorME', or
        /// 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetVoicePrivacyMode([MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Queries current call forwarding options.
        ///
        /// @param reason
        /// Indicates the reason the call is being forwarded. It shall be one of
        /// the nsIMobileConnectionService.CALL_FORWARD_REASON_* values.
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifyGetCallForwardingSuccess() will be called. And the
        /// result will be an array of nsIMobileCallForwardingOptions.
        /// @see nsIMobileCallForwardingOptions for the detail of result.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'InvalidParameter',
        /// 'IllegalSIMorME', or 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCallForwarding(ushort reason, [MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Configures call forwarding options.
        ///
        /// @param action
        /// One of the nsIMobileConnection.CALL_FORWARD_ACTION_* values.
        /// @param reason
        /// One of the nsIMobileConnection.CALL_FORWARD_REASON_* values.
        /// @param number
        /// Phone number of forwarding address.
        /// @param timeSeconds
        /// When "no reply" is enabled or queried, this gives the time in
        /// seconds to wait before call is forwarded.
        /// @param serviceClass
        /// One of the nsIMobileConnection.ICC_SERVICE_CLASS_* values.
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifySuccess() will be called.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'InvalidParameter',
        /// 'IllegalSIMorME', or 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCallForwarding(ushort action, ushort reason, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase number, ushort timeSeconds, ushort serviceClass, [MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Queries current call barring status.
        ///
        /// @param program
        /// One of the nsIMobileConnection.CALL_BARRING_PROGRAM_* values.
        /// @param password
        /// Call barring password. Use "" if no password specified.
        /// @param serviceClass
        /// One of the nsIMobileConnection.ICC_SERVICE_CLASS_* values.
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifyGetCallBarringSuccess() will be called. And the
        /// result will contain correct 'enabled' property indicating the status of
        /// this rule.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'InvalidParameter',
        /// 'IllegalSIMorME', or 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCallBarring(ushort program, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase password, ushort serviceClass, [MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Configures call barring option.
        ///
        /// @param program
        /// One of the nsIMobileConnection.CALL_BARRING_PROGRAM_* values.
        /// @param enabled
        /// Enable or disable the call barring program.
        /// @param password
        /// Call barring password. Use "" if no password specified.
        /// @param serviceClass
        /// One of the nsIMobileConnection.ICC_SERVICE_CLASS_* values.
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifySuccess() will be called.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'InvalidParameter',
        /// 'IllegalSIMorME', or 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCallBarring(ushort program, [MarshalAs(UnmanagedType.U1)] bool enabled, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase password, ushort serviceClass, [MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Change call barring facility password.
        ///
        /// @param pin
        /// Old call barring password.
        /// @param newPin
        /// New call barring password.
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifySuccess() will be called.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'InvalidParameter',
        /// 'IllegalSIMorME', or 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ChangeCallBarringPassword([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase pin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase newPin, [MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Configures call waiting options.
        ///
        /// @param enabled
        /// Boolean indicates the desired call waiting status.
        /// @param serviceClass
        /// One of the nsIMobileConnection.ICC_SERVICE_CLASS_* values.
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifySuccess() will be called.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'IllegalSIMorME', or
        /// 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCallWaiting([MarshalAs(UnmanagedType.U1)] bool enabled, ushort serviceClass, [MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Queries current call waiting options.
        ///
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifyGetCallWaitingSuccess() will be called. And the
        /// result will be a service class bit vector of services for which call
        /// waiting is enabled. e.g. 3 means call waiting is enabled for data
        /// and voice and disabled for everything else. 0 means call waiting is
        /// disabled for all service.
        /// @see nsIMobileConnection.ICC_SERVICE_CLASS_*.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'IllegalSIMorME', or
        /// 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCallWaiting([MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Enables or disables the presentation of the calling line identity (CLI) to
        /// the called party when originating a call.
        ///
        /// @param clirMode
        /// One of the nsIMobileConnection.CLIR_* values.
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifySuccess() will be called.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'InvalidParameter',
        /// 'IllegalSIMorME', or 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCallingLineIdRestriction(ushort clirMode, [MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Queries current CLIR status.
        ///
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifyGetClirStatusSuccess() will be called. And the
        /// result will be a an object containing CLIR 'n' and 'm' parameter.
        /// @see MozClirStatus for the detail of result.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'IllegalSIMorME', or
        /// 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCallingLineIdRestriction([MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Exit emergency callback mode.
        ///
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifySuccess() will be called.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'RadioNotAvailable', 'RequestNotSupported', 'IllegalSIMorME', or
        /// 'GenericFailure'.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ExitEmergencyCbMode([MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Set radio enabled/disabled.
        ///
        /// @param enabled
        /// Boolean indicates the desired radio power. True to enable the radio.
        /// @param requestCallback
        /// Called when request is finished.
        ///
        /// If successful, the notifySuccess() will be called.
        ///
        /// Otherwise, the notifyError() will be called, and the error will be either
        /// 'InvalidStateError', 'RadioNotAvailable', 'IllegalSIMorME', or
        /// 'GenericFailure'.
        ///
        /// Note: Request is not available when radioState is null, 'enabling', or
        /// 'disabling'. Calling the function in above conditions will receive
        /// 'InvalidStateError' error.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetRadioEnabled([MarshalAs(UnmanagedType.U1)] bool enabled, [MarshalAs(UnmanagedType.Interface)] nsIMobileConnectionCallback requestCallback);
		
		/// <summary>
        /// Request neighboring cell ids in GSM/UMTS network.
        ///
        /// @param callback
        /// Called when request is finished. See nsINeighboringCellIdsCallback
        /// for details.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetNeighboringCellIds([MarshalAs(UnmanagedType.Interface)] nsINeighboringCellIdsCallback callback);
		
		/// <summary>
        /// Request all of the current cell information known to the radio, including
        /// neighboring cells.
        ///
        /// @param callback
        /// Called when request is finished. See nsICellInfoListCallback
        /// for details.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCellInfoList([MarshalAs(UnmanagedType.Interface)] nsICellInfoListCallback callback);
	}
	
	/// <summary>nsIMobileConnectionConsts </summary>
	public class nsIMobileConnectionConsts
	{
		
		// <summary>
        // ICC service class.
        // </summary>
		public const long ICC_SERVICE_CLASS_NONE = 0;
		
		// <summary>
        // not available
        // </summary>
		public const long ICC_SERVICE_CLASS_VOICE = (1<<0);
		
		// 
		public const long ICC_SERVICE_CLASS_DATA = (1<<1);
		
		// 
		public const long ICC_SERVICE_CLASS_FAX = (1<<2);
		
		// 
		public const long ICC_SERVICE_CLASS_SMS = (1<<3);
		
		// 
		public const long ICC_SERVICE_CLASS_DATA_SYNC = (1<<4);
		
		// 
		public const long ICC_SERVICE_CLASS_DATA_ASYNC = (1<<5);
		
		// 
		public const long ICC_SERVICE_CLASS_PACKET = (1<<6);
		
		// 
		public const long ICC_SERVICE_CLASS_PAD = (1<<7);
		
		// 
		public const long ICC_SERVICE_CLASS_MAX = (1<<7);
		
		// <summary>
        // Call forwarding action.
        //
        // @see 3GPP TS 27.007 7.11 "mode".
        // </summary>
		public const long CALL_FORWARD_ACTION_UNKNOWN = -1;
		
		// <summary>
        // not available
        // </summary>
		public const long CALL_FORWARD_ACTION_DISABLE = 0;
		
		// 
		public const long CALL_FORWARD_ACTION_ENABLE = 1;
		
		// 
		public const long CALL_FORWARD_ACTION_QUERY_STATUS = 2;
		
		// 
		public const long CALL_FORWARD_ACTION_REGISTRATION = 3;
		
		// 
		public const long CALL_FORWARD_ACTION_ERASURE = 4;
		
		// <summary>
        // Call forwarding reason.
        //
        // @see 3GPP TS 27.007 7.11 "reason".
        // </summary>
		public const long CALL_FORWARD_REASON_UNKNOWN = -1;
		
		// <summary>
        // not available
        // </summary>
		public const long CALL_FORWARD_REASON_UNCONDITIONAL = 0;
		
		// 
		public const long CALL_FORWARD_REASON_MOBILE_BUSY = 1;
		
		// 
		public const long CALL_FORWARD_REASON_NO_REPLY = 2;
		
		// 
		public const long CALL_FORWARD_REASON_NOT_REACHABLE = 3;
		
		// 
		public const long CALL_FORWARD_REASON_ALL_CALL_FORWARDING = 4;
		
		// 
		public const long CALL_FORWARD_REASON_ALL_CONDITIONAL_CALL_FORWARDING = 5;
		
		// <summary>
        // Call barring program.
        // </summary>
		public const long CALL_BARRING_PROGRAM_UNKNOWN = -1;
		
		// <summary>
        // not available
        // </summary>
		public const long CALL_BARRING_PROGRAM_ALL_OUTGOING = 0;
		
		// 
		public const long CALL_BARRING_PROGRAM_OUTGOING_INTERNATIONAL = 1;
		
		// 
		public const long CALL_BARRING_PROGRAM_OUTGOING_INTERNATIONAL_EXCEPT_HOME = 2;
		
		// 
		public const long CALL_BARRING_PROGRAM_ALL_INCOMING = 3;
		
		// 
		public const long CALL_BARRING_PROGRAM_INCOMING_ROAMING = 4;
		
		// 
		public const long CALL_BARRING_PROGRAM_ALL_SERVICE = 5;
		
		// 
		public const long CALL_BARRING_PROGRAM_OUTGOING_SERVICE = 6;
		
		// 
		public const long CALL_BARRING_PROGRAM_INCOMING_SERVICE = 7;
		
		// <summary>
        // Calling line identification restriction constants.
        //
        // @see 3GPP TS 27.007 7.7 Defined values.
        // </summary>
		public const long CLIR_DEFAULT = 0;
		
		// 
		public const long CLIR_INVOCATION = 1;
		
		// 
		public const long CLIR_SUPPRESSION = 2;
		
		// <summary>
        // Network selection mode.
        // </summary>
		public const long NETWORK_SELECTION_MODE_UNKNOWN = -1;
		
		// <summary>
        // not available
        // </summary>
		public const long NETWORK_SELECTION_MODE_AUTOMATIC = 0;
		
		// 
		public const long NETWORK_SELECTION_MODE_MANUAL = 1;
		
		// <summary>
        // Mobile Radio State.
        // </summary>
		public const long MOBILE_RADIO_STATE_UNKNOWN = -1;
		
		// 
		public const long MOBILE_RADIO_STATE_ENABLING = 0;
		
		// 
		public const long MOBILE_RADIO_STATE_ENABLED = 1;
		
		// 
		public const long MOBILE_RADIO_STATE_DISABLING = 2;
		
		// 
		public const long MOBILE_RADIO_STATE_DISABLED = 3;
		
		// <summary>
        // Preferred network type.
        // </summary>
		public const long PREFERRED_NETWORK_TYPE_WCDMA_GSM = 0;
		
		// 
		public const long PREFERRED_NETWORK_TYPE_GSM_ONLY = 1;
		
		// 
		public const long PREFERRED_NETWORK_TYPE_WCDMA_ONLY = 2;
		
		// 
		public const long PREFERRED_NETWORK_TYPE_WCDMA_GSM_AUTO = 3;
		
		// 
		public const long PREFERRED_NETWORK_TYPE_CDMA_EVDO = 4;
		
		// 
		public const long PREFERRED_NETWORK_TYPE_CDMA_ONLY = 5;
		
		// 
		public const long PREFERRED_NETWORK_TYPE_EVDO_ONLY = 6;
		
		// 
		public const long PREFERRED_NETWORK_TYPE_WCDMA_GSM_CDMA_EVDO = 7;
		
		// 
		public const long PREFERRED_NETWORK_TYPE_LTE_CDMA_EVDO = 8;
		
		// 
		public const long PREFERRED_NETWORK_TYPE_LTE_WCDMA_GSM = 9;
		
		// 
		public const long PREFERRED_NETWORK_TYPE_LTE_WCDMA_GSM_CDMA_EVDO = 10;
		
		// 
		public const long PREFERRED_NETWORK_TYPE_LTE_ONLY = 11;
		
		// <summary>
        // CDMA roaming preference.
        // </summary>
		public const long CDMA_ROAMING_PREFERENCE_HOME = 0;
		
		// 
		public const long CDMA_ROAMING_PREFERENCE_AFFILIATED = 1;
		
		// 
		public const long CDMA_ROAMING_PREFERENCE_ANY = 2;
		
		// <summary>
        // Supported network type.
        // </summary>
		public const long MOBILE_NETWORK_TYPE_GSM = 0;
		
		// 
		public const long MOBILE_NETWORK_TYPE_WCDMA = 1;
		
		// 
		public const long MOBILE_NETWORK_TYPE_CDMA = 2;
		
		// 
		public const long MOBILE_NETWORK_TYPE_EVDO = 3;
		
		// 
		public const long MOBILE_NETWORK_TYPE_LTE = 4;
	}
}
