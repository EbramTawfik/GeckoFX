// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIObserver.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// This interface is implemented by an object that wants
    /// to observe an event corresponding to a topic.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("DB242E01-E4D9-11d2-9DDE-000064657374")]
	public interface nsIObserver
	{
		
		/// <summary>
        /// Observe will be called when there is a notification for the
        /// topic |aTopic|.  This assumes that the object implementing
        /// this interface has been registered with an observer service
        /// such as the nsIObserverService.
        ///
        /// If you expect multiple topics/subjects, the impl is
        /// responsible for filtering.
        ///
        /// You should not modify, add, remove, or enumerate
        /// notifications in the implemention of observe.
        ///
        /// @param aSubject : Notification specific interface pointer.
        /// @param aTopic   : The notification topic or subject.
        /// @param aData    : Notification specific wide string.
        /// subject event.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Observe([MarshalAs(UnmanagedType.Interface)] nsISupports aSubject, [MarshalAs(UnmanagedType.LPStr)] string aTopic, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.WStringMarshaler")] string aData);
	}
}
