// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIClipboardCommands.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// An interface for embedding clients who wish to interact with
    /// the system-wide OS clipboard. Mozilla does not use a private
    /// clipboard, instead it places its data directly onto the system
    /// clipboard. The webshell implements this interface.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b8100c90-73be-11d2-92a5-00105a1b0d64")]
	public interface nsIClipboardCommands
	{
		
		/// <summary>
        /// Returns whether there is a selection and it is not read-only.
        ///
        /// @return <code>true</code> if the current selection can be cut,
        /// <code>false</code> otherwise.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanCutSelection();
		
		/// <summary>
        /// Returns whether there is a selection and it is copyable.
        ///
        /// @return <code>true</code> if there is a selection,
        /// <code>false</code> otherwise.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanCopySelection();
		
		/// <summary>
        /// Returns whether we can copy a link location.
        ///
        /// @return <code>true</code> if a link is selected,
        /// <code>false</code> otherwise.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanCopyLinkLocation();
		
		/// <summary>
        /// Returns whether we can copy an image location.
        ///
        /// @return <code>true</code> if an image is selected,
        ///              <code>false</code> otherwise.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanCopyImageLocation();
		
		/// <summary>
        /// Returns whether we can copy an image's contents.
        ///
        /// @return <code>true</code> if an image is selected,
        /// <code>false</code> otherwise
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanCopyImageContents();
		
		/// <summary>
        /// Returns whether the current contents of the clipboard can be
        /// pasted and if the current selection is not read-only.
        ///
        /// @return <code>true</code> there is data to paste on the clipboard
        /// and the current selection is not read-only,
        /// <code>false</code> otherwise
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanPaste();
		
		/// <summary>
        /// Cut the current selection onto the clipboard.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CutSelection();
		
		/// <summary>
        /// Copy the current selection onto the clipboard.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CopySelection();
		
		/// <summary>
        /// Copy the link location of the current selection (e.g.,
        /// the |href| attribute of a selected |a| tag).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CopyLinkLocation();
		
		/// <summary>
        /// Copy the location of the selected image.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CopyImageLocation();
		
		/// <summary>
        /// Copy the contents of the selected image.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CopyImageContents();
		
		/// <summary>
        /// Paste the contents of the clipboard into the current selection.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Paste();
		
		/// <summary>
        /// Select the entire contents.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SelectAll();
		
		/// <summary>
        /// Clear the current selection (if any). Insertion point ends up
        /// at beginning of current selection.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SelectNone();
	}
}
