// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIWifiService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("4d4389e0-1547-11e3-8ffd-0800200c9a66")]
	public interface nsIWifiEventListener
	{
		
		/// <summary>
        ///This Source Code Form is subject to the terms of the Mozilla Public
        /// License, v. 2.0. If a copy of the MPL was not distributed with this
        /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnWaitEvent([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase @event, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aInterface);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnCommand(ref Gecko.JsVal result, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aInterface);
	}
	
	/// <summary>nsIWifiProxyService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("5e2bd8c0-1547-11e3-8ffd-0800200c9a66")]
	public interface nsIWifiProxyService
	{
		
		/// <summary>Member Start </summary>
		/// <param name='listener'> </param>
		/// <param name='aInterfaces'> </param>
		/// <param name='aNumOfInterface'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Start([MarshalAs(UnmanagedType.Interface)] nsIWifiEventListener listener, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] string[] aInterfaces, uint aNumOfInterface);
		
		/// <summary>Member Shutdown </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Shutdown();
		
		/// <summary>Member SendCommand </summary>
		/// <param name='parameters'> </param>
		/// <param name='aInterface'> </param>
		/// <param name='jsContext'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendCommand(ref Gecko.JsVal parameters, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aInterface, System.IntPtr jsContext);
		
		/// <summary>Member WaitForEvent </summary>
		/// <param name='aInterface'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WaitForEvent([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aInterface);
	}
}
