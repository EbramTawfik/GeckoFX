// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIScriptChannel.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// An interface representing a channel which will have to execute some sort of
    /// program provided via its URI to compute the data it should return.
    ///
    /// If a channel implements this interface, the execution of the program in
    /// question will be restricted in the following ways:
    ///
    /// - If the channel does not have an owner principal, the program will not be
    /// executed at all, no matter what.  This is necessary because in this
    /// circumstance we have no way to tell whether script execution is allowed at
    /// all for the originating security context of this channel.
    /// - If the channel has an owner principal, how it is executed is controlled by
    /// this interface.  However if the owner principal does not subsume the
    /// principal of the environment in which the program is to be executed the
    /// execution will be forced to happen in a sandbox.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("33234b99-9588-4c7d-9da6-86b8b7cba565")]
	public interface nsIScriptChannel
	{
		
		/// <summary>
        /// Whether and how the program represented by this channel is to be executed.
        /// The default value if this property has never been set on this channel MUST
        /// be either EXECUTE_IN_SANDBOX or NO_EXECUTION.
        ///
        /// @throws NS_ERROR_INVALID_ARG when set to an unrecognized value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetExecutionPolicyAttribute();
		
		/// <summary>
        /// Whether and how the program represented by this channel is to be executed.
        /// The default value if this property has never been set on this channel MUST
        /// be either EXECUTE_IN_SANDBOX or NO_EXECUTION.
        ///
        /// @throws NS_ERROR_INVALID_ARG when set to an unrecognized value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetExecutionPolicyAttribute(uint aExecutionPolicy);
		
		/// <summary>
        /// Control whether the program should be executed synchronosly when
        /// the channel's AsyncOpen method is called or whether it should be
        /// executed asynchronously.  In both cases, any data that the
        /// channel returns will be returned asynchronously; the only thing
        /// this property affects is when the program executes.
        ///
        /// The default value of this property is TRUE.
        ///
        /// Setting this property after asyncOpen has been called on the
        /// channel has no effect.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetExecuteAsyncAttribute();
		
		/// <summary>
        /// Control whether the program should be executed synchronosly when
        /// the channel's AsyncOpen method is called or whether it should be
        /// executed asynchronously.  In both cases, any data that the
        /// channel returns will be returned asynchronously; the only thing
        /// this property affects is when the program executes.
        ///
        /// The default value of this property is TRUE.
        ///
        /// Setting this property after asyncOpen has been called on the
        /// channel has no effect.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetExecuteAsyncAttribute([MarshalAs(UnmanagedType.U1)] bool aExecuteAsync);
	}
	
	/// <summary>nsIScriptChannelConsts </summary>
	public class nsIScriptChannelConsts
	{
		
		// <summary>
        // Don't execute at all.
        // </summary>
		public const ulong NO_EXECUTION = 0;
		
		// <summary>
        // Execute against the target environment if the principals allow it.
        // </summary>
		public const ulong EXECUTE_NORMAL = 2;
	}
}
