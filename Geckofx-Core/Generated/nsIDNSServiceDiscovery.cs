// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDNSServiceDiscovery.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Service information
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("670ed0f9-2fa5-4544-bf1e-ea58ac179374")]
	public interface nsIDNSServiceInfo
	{
		
		/// <summary>
        /// The host name of the service. (E.g. "Android.local.")
        /// @throws NS_ERROR_NOT_INITIALIZED when getting unset value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetHostAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aHost);
		
		/// <summary>
        /// The host name of the service. (E.g. "Android.local.")
        /// @throws NS_ERROR_NOT_INITIALIZED when getting unset value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetHostAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aHost);
		
		/// <summary>
        /// The IP address of the service.
        /// @throws NS_ERROR_NOT_INITIALIZED when getting unset value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAddressAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aAddress);
		
		/// <summary>
        /// The IP address of the service.
        /// @throws NS_ERROR_NOT_INITIALIZED when getting unset value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAddressAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aAddress);
		
		/// <summary>
        /// The port number of the service. (E.g. 80)
        /// @throws NS_ERROR_NOT_INITIALIZED when getting unset value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetPortAttribute();
		
		/// <summary>
        /// The port number of the service. (E.g. 80)
        /// @throws NS_ERROR_NOT_INITIALIZED when getting unset value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetPortAttribute(ushort aPort);
		
		/// <summary>
        /// The service name of the service for display. (E.g. "My TV")
        /// @throws NS_ERROR_NOT_INITIALIZED when getting unset value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetServiceNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aServiceName);
		
		/// <summary>
        /// The service name of the service for display. (E.g. "My TV")
        /// @throws NS_ERROR_NOT_INITIALIZED when getting unset value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetServiceNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aServiceName);
		
		/// <summary>
        /// The type of the service. (E.g. "_http._tcp")
        /// @throws NS_ERROR_NOT_INITIALIZED when getting unset value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetServiceTypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aServiceType);
		
		/// <summary>
        /// The type of the service. (E.g. "_http._tcp")
        /// @throws NS_ERROR_NOT_INITIALIZED when getting unset value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetServiceTypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aServiceType);
		
		/// <summary>
        /// The domain name of the service. (E.g. "local.")
        /// @throws NS_ERROR_NOT_INITIALIZED when getting unset value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDomainNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aDomainName);
		
		/// <summary>
        /// The domain name of the service. (E.g. "local.")
        /// @throws NS_ERROR_NOT_INITIALIZED when getting unset value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDomainNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aDomainName);
		
		/// <summary>
        /// The attributes of the service.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPropertyBag2 GetAttributesAttribute();
		
		/// <summary>
        /// The attributes of the service.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAttributesAttribute([MarshalAs(UnmanagedType.Interface)] nsIPropertyBag2 aAttributes);
	}
	
	/// <summary>
    /// The callback interface for service discovery
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("3025b7f2-97bb-435b-b43d-26731b3f5fc4")]
	public interface nsIDNSServiceDiscoveryListener
	{
		
		/// <summary>
        /// Callback when the discovery begins.
        /// @param   aServiceType
        /// the service type of |startDiscovery|.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnDiscoveryStarted([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aServiceType);
		
		/// <summary>
        /// Callback when the discovery ends.
        /// @param   aServiceType
        /// the service type of |startDiscovery|.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnDiscoveryStopped([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aServiceType);
		
		/// <summary>
        /// Callback when the a service is found.
        /// @param   aServiceInfo
        /// the info about the found service, where |serviceName|, |aServiceType|, and |domainName| are set.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnServiceFound([MarshalAs(UnmanagedType.Interface)] nsIDNSServiceInfo aServiceInfo);
		
		/// <summary>
        /// Callback when the a service is lost.
        /// @param   aServiceInfo
        /// the info about the lost service, where |serviceName|, |aServiceType|, and |domainName| are set.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnServiceLost([MarshalAs(UnmanagedType.Interface)] nsIDNSServiceInfo aServiceInfo);
		
		/// <summary>
        /// Callback when the discovery cannot start.
        /// @param   aServiceType
        /// the service type of |startDiscovery|.
        /// @param   aErrorCode
        /// the error code.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnStartDiscoveryFailed([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aServiceType, int aErrorCode);
		
		/// <summary>
        /// Callback when the discovery cannot stop.
        /// @param   aServiceType
        /// the service type of |startDiscovery|.
        /// @param   aErrorCode
        /// the error code.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnStopDiscoveryFailed([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aServiceType, int aErrorCode);
	}
	
	/// <summary>
    /// The callback interface for service registration
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("e165e4be-abf4-4963-a66d-ed3ca116e5e4")]
	public interface nsIDNSRegistrationListener
	{
		
		/// <summary>
        /// Callback when the service is registered successfully.
        /// @param   aServiceInfo
        /// the info about the registered service,
        /// where |serviceName|, |aServiceType|, and |domainName| are set.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnServiceRegistered([MarshalAs(UnmanagedType.Interface)] nsIDNSServiceInfo aServiceInfo);
		
		/// <summary>
        /// Callback when the service is unregistered successfully.
        /// @param   aServiceInfo
        /// the info about the unregistered service.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnServiceUnregistered([MarshalAs(UnmanagedType.Interface)] nsIDNSServiceInfo aServiceInfo);
		
		/// <summary>
        /// Callback when the service cannot be registered.
        /// @param   aServiceInfo
        /// the info about the service to be registered.
        /// @param   aErrorCode
        /// the error code.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnRegistrationFailed([MarshalAs(UnmanagedType.Interface)] nsIDNSServiceInfo aServiceInfo, int aErrorCode);
		
		/// <summary>
        /// Callback when the service cannot be unregistered.
        /// @param   aServiceInfo
        /// the info about the registered service.
        /// @param   aErrorCode
        /// the error code.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnUnregistrationFailed([MarshalAs(UnmanagedType.Interface)] nsIDNSServiceInfo aServiceInfo, int aErrorCode);
	}
	
	/// <summary>nsIDNSRegistrationListenerConsts </summary>
	public class nsIDNSRegistrationListenerConsts
	{
		
		// <summary>
        // The callback interface for service registration
        // </summary>
		public const long ERROR_SERVICE_NOT_RUNNING = -65563;
	}
	
	/// <summary>
    /// The callback interface for service resolve
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("24ee6408-648e-421d-accf-c6e5adeccf97")]
	public interface nsIDNSServiceResolveListener
	{
		
		/// <summary>
        /// Callback when the service is resolved successfully.
        /// @param   aServiceInfo
        /// the info about the resolved service, where |host| and |port| are set.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnServiceResolved([MarshalAs(UnmanagedType.Interface)] nsIDNSServiceInfo aServiceInfo);
		
		/// <summary>
        /// Callback when the service cannot be resolved.
        /// @param   aServiceInfo
        /// the info about the service to be resolved.
        /// @param   aErrorCode
        /// the error code.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnResolveFailed([MarshalAs(UnmanagedType.Interface)] nsIDNSServiceInfo aServiceInfo, int aErrorCode);
	}
	
	/// <summary>
    /// The interface for DNS service discovery/registration/resolve
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("6487899b-beb1-455a-ba65-e4fd465066d7")]
	public interface nsIDNSServiceDiscovery
	{
		
		/// <summary>
        /// Browse for instances of a service.
        /// @param   aServiceType
        /// the service type to be discovered, E.g. "_http._tcp".
        /// @param   aListener
        /// callback interface for discovery notifications.
        /// @return  An object that can be used to cancel the service discovery.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsICancelable StartDiscovery([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aServiceType, [MarshalAs(UnmanagedType.Interface)] nsIDNSServiceDiscoveryListener aListener);
		
		/// <summary>
        /// Register a service that is discovered via |startDiscovery| and |resolveService| calls.
        /// @param   aServiceInfo
        /// the service information to be registered.
        /// |port| and |aServiceType| are required attributes.
        /// @param   aListener
        /// callback interface for registration notifications.
        /// @return  An object that can be used to cancel the service registration.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsICancelable RegisterService([MarshalAs(UnmanagedType.Interface)] nsIDNSServiceInfo aServiceInfo, [MarshalAs(UnmanagedType.Interface)] nsIDNSRegistrationListener aListener);
		
		/// <summary>
        /// Resolve a service name discovered via |startDiscovery| to a target host name, port number.
        /// @param   aServiceInfo
        /// the service information to be registered.
        /// |serviceName|, |aServiceType|, and |domainName| are required attributes as reported to the |onServiceFound| callback.
        /// @param   aListener
        /// callback interface for registration notifications.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResolveService([MarshalAs(UnmanagedType.Interface)] nsIDNSServiceInfo aServiceInfo, [MarshalAs(UnmanagedType.Interface)] nsIDNSServiceResolveListener aListener);
	}
}
