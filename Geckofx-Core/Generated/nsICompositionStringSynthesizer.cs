// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsICompositionStringSynthesizer.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Stores composition clauses information and caret information for synthesizing
    /// composition string.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9a7d7851-8c0a-4061-9edc-60d6693f86c9")]
	public interface nsICompositionStringSynthesizer
	{
		
		/// <summary>
        /// Set composition string or committed string.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetString([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aString);
		
		/// <summary>
        /// Append a clause.
        ///
        /// TODO: Should be able to specify custom clause style.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AppendClause(uint aLength, uint aAttribute);
		
		/// <summary>
        /// Set caret information.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCaret(uint aOffset, uint aLength);
		
		/// <summary>
        /// Synthesize composition string with given information by dispatching
        /// a proper event.
        ///
        /// If clauses have never been set, this dispatches a commit event.
        /// If clauses are not filled all over the composition string, this throw an
        /// error.
        ///
        /// After dispatching event, this clears all the information about the
        /// composition string. So, you can reuse this instance.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool DispatchEvent();
	}
	
	/// <summary>nsICompositionStringSynthesizerConsts </summary>
	public class nsICompositionStringSynthesizerConsts
	{
		
		// <summary>
        // NOTE: These values must be same to NS_TEXTRANGE_* in TextEvents.h
        // </summary>
		public const ulong ATTR_RAWINPUT = 0x02;
		
		// 
		public const ulong ATTR_SELECTEDRAWTEXT = 0x03;
		
		// 
		public const ulong ATTR_CONVERTEDTEXT = 0x04;
		
		// 
		public const ulong ATTR_SELECTEDCONVERTEDTEXT = 0x05;
	}
}
