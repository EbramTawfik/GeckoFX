// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDashboard.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///A JavaScript callback function that takes a JSON as its parameter.
    /// The returned JSON contains arrays with data
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("19d7f24f-a95a-4fd9-87e2-d96e9e4b1f6d")]
	public interface NetDashboardCallback
	{
		
		/// <summary>
        ///A JavaScript callback function that takes a JSON as its parameter.
        /// The returned JSON contains arrays with data
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnDashboardDataAvailable(ref Gecko.JsVal data);
	}
	
	/// <summary>
    ///The dashboard service.
    /// The async API returns JSONs, which hold arrays with the required info.
    /// Only one request of each type may be pending at any time.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("c79eb3c6-091a-45a6-8544-5a8d1ab79537")]
	public interface nsIDashboard
	{
		
		/// <summary>
        ///Arrays: host, port, tcp, active, socksent, sockreceived
        /// Values: sent, received </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RequestSockets(NetDashboardCallback cb);
		
		/// <summary>
        ///Arrays: host, port, spdy, ssl
        /// Array of arrays: active, idle </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RequestHttpConnections(NetDashboardCallback cb);
		
		/// <summary>
        ///Arrays: hostport, encrypted, msgsent, msgreceived, sentsize, receivedsize </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RequestWebsocketConnections(NetDashboardCallback cb);
		
		/// <summary>
        ///Arrays: hostname, family, hostaddr, expiration </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RequestDNSInfo(NetDashboardCallback cb);
		
		/// <summary>
        ///aProtocol: a transport layer protocol:
        /// ex: "ssl", "tcp", default is "tcp".
        /// aHost: the host's name
        /// aPort: the port which the connection will open on
        /// aTimeout: the timespan before the connection will be timed out </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RequestConnection([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHost, uint aPort, [MarshalAs(UnmanagedType.LPStr)] string aProtocol, uint aTimeout, NetDashboardCallback cb);
		
		/// <summary>
        ///When true, the service will log websocket events </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetEnableLoggingAttribute();
		
		/// <summary>
        ///When true, the service will log websocket events </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetEnableLoggingAttribute([MarshalAs(UnmanagedType.U1)] bool aEnableLogging);
		
		/// <summary>
        ///DNS resolver for host name
        /// aHost: host name </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RequestDNSLookup([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHost, NetDashboardCallback cb);
	}
}
