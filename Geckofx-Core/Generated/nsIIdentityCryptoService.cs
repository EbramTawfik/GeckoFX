// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIIdentityCryptoService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// "@mozilla.org/identity/crypto-service;1"
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f087e6bc-dd33-4f6c-a106-dd786e052ee9")]
	public interface nsIIdentityCryptoService
	{
		
		/// <summary>
        /// "@mozilla.org/identity/crypto-service;1"
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GenerateKeyPair([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase algorithm, [MarshalAs(UnmanagedType.Interface)] nsIIdentityKeyGenCallback callback);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Base64UrlEncode([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase toEncode, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase retval);
	}
	
	/// <summary>
    /// This interface provides a keypair and signing interface for Identity functionality
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("73962dc7-8ee7-4346-a12b-b039e1d9b54d")]
	public interface nsIIdentityKeyPair
	{
		
		/// <summary>
        /// This interface provides a keypair and signing interface for Identity functionality
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetKeyTypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aKeyType);
		
		/// <summary>
        /// RSA properties, only accessible when keyType == "RS256"
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetHexRSAPublicKeyExponentAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aHexRSAPublicKeyExponent);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetHexRSAPublicKeyModulusAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aHexRSAPublicKeyModulus);
		
		/// <summary>
        /// DSA properties, only accessible when keyType == "DS128"
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetHexDSAPrimeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aHexDSAPrime);
		
		/// <summary>
        /// p
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetHexDSASubPrimeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aHexDSASubPrime);
		
		/// <summary>
        /// q
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetHexDSAGeneratorAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aHexDSAGenerator);
		
		/// <summary>
        /// g
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetHexDSAPublicValueAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aHexDSAPublicValue);
		
		/// <summary>
        /// y
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Sign([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aText, [MarshalAs(UnmanagedType.Interface)] nsIIdentitySignCallback callback);
	}
	
	/// <summary>
    /// This interface provides a JavaScript callback object used to collect the
    /// nsIIdentityServeKeyPair when the keygen operation is complete
    ///
    /// though there is discussion as to whether we need the nsresult,
    /// we keep it so we can track deeper crypto errors.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("90f24ca2-2b05-4ca9-8aec-89d38e2f905a")]
	public interface nsIIdentityKeyGenCallback
	{
		
		/// <summary>
        /// This interface provides a JavaScript callback object used to collect the
        /// nsIIdentityServeKeyPair when the keygen operation is complete
        ///
        /// though there is discussion as to whether we need the nsresult,
        /// we keep it so we can track deeper crypto errors.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GenerateKeyPairFinished(int rv, [MarshalAs(UnmanagedType.Interface)] nsIIdentityKeyPair keyPair);
	}
	
	/// <summary>
    /// This interface provides a JavaScript callback object used to collect the
    /// AUTF8String signature
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2d3e5036-374b-4b47-a430-1196b67b890f")]
	public interface nsIIdentitySignCallback
	{
		
		/// <summary>
        ///On success, base64urlSignature is the base-64-URL-encoded signature
        ///
        /// For RS256 signatures, XXX bug 769858
        ///
        /// For DSA128 signatures, the signature is the r value concatenated with the
        /// s value, each component padded with leading zeroes as necessary.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SignFinished(int rv, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase base64urlSignature);
	}
}
