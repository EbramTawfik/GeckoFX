// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDOMTCPServerSocket.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// nsIDOMTCPServerSocket
    ///
    /// An interface to a server socket that can accept incoming connections for gaia apps.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("821638a1-5327-416d-8031-668764f2ec04")]
	public interface nsIDOMTCPServerSocket
	{
		
		/// <summary>
        /// The port of this server socket object.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetLocalPortAttribute();
		
		/// <summary>
        /// The onconnect event handler is called when a client connection is accepted.
        /// The data attribute of the event passed to the onconnect handler will be a TCPSocket
        /// instance, which is used for communication between client and server.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetOnconnectAttribute();
		
		/// <summary>
        /// The onconnect event handler is called when a client connection is accepted.
        /// The data attribute of the event passed to the onconnect handler will be a TCPSocket
        /// instance, which is used for communication between client and server.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnconnectAttribute(Gecko.JsVal aOnconnect);
		
		/// <summary>
        /// The onerror handler will be called when the listen of a server socket is aborted.
        /// The data attribute of the event passed to the onerror handler will have a
        /// description of the kind of error.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetOnerrorAttribute();
		
		/// <summary>
        /// The onerror handler will be called when the listen of a server socket is aborted.
        /// The data attribute of the event passed to the onerror handler will have a
        /// description of the kind of error.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetOnerrorAttribute(Gecko.JsVal aOnerror);
		
		/// <summary>
        /// Close the server socket.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Close();
	}
	
	/// <summary>
    /// Internal interfaces for use in cross-process server-socket implementation.
    /// Needed to account for multiple possible types that can be provided to
    /// the socket callbacks as arguments.
    ///
    /// These interfaces are for calling each method from the server socket object
    /// on the parent and child side for an IPC protocol implementation.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b64b1e68-4efa-497c-b0d8-69f067ad5ec8")]
	public interface nsITCPServerSocketInternal
	{
		
		/// <summary>
        /// Initialization after creating a TCP server socket object.
        ///
        /// @param windowVal
        /// An object to create ArrayBuffer for this window. See Bug 831107.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init(ref Gecko.JsVal windowVal);
		
		/// <summary>
        /// Listen on a port
        ///
        /// @param localPort
        /// The port of the server socket. Pass -1 to indicate no preference,
        /// and a port will be selected automatically.
        /// @param options
        /// An object specifying one or more parameters which
        /// determine the details of the socket.
        ///
        /// binaryType: "arraybuffer" to use UInt8 array
        /// instances in the ondata callback and as the argument
        /// to send. Defaults to "string", to use JavaScript strings.
        /// @param backlog
        /// The maximum length the queue of pending connections may grow to.
        /// This parameter may be silently limited by the operating system.
        /// Pass -1 to use the default value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Listen(ushort localPort, ref Gecko.JsVal options, ushort backlog);
		
		/// <summary>
        /// Listener for receiving an accepted socket.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CallListenerAccept([MarshalAs(UnmanagedType.Interface)] nsITCPSocketChild socketChild);
		
		/// <summary>
        /// Listener for handling an error caused in chrome process.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CallListenerError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase message, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase filename, uint lineNumber, uint columnNumber);
	}
}
