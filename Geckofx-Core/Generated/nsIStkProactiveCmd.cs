// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIStkProactiveCmd.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1510cf0c-5db6-11e4-9869-6bf419e26642")]
	public interface nsIStkDuration
	{
		
		/// <summary>
        /// The value of Time units defined in 12.8 Duration of TS 11.14.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetTimeUnitAttribute();
		
		/// <summary>
        /// The length of time required, expressed in timeUnit.
        ///
        /// Note: the range is from 1 unit to 255 units.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetTimeIntervalAttribute();
	}
	
	/// <summary>nsIStkIcon </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("c7b6e57a-696d-11e4-bcaa-bfe8386e75a9")]
	public interface nsIStkIcon
	{
		
		/// <summary>
        /// Width of the icon.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetWidthAttribute();
		
		/// <summary>
        /// Height of the icon.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetHeightAttribute();
		
		/// <summary>
        /// Image coding scheme of the icon.
        /// One of CODING_SCHEME_*.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetCodingSchemeAttribute();
		
		/// <summary>
        /// Array of pixels. Each pixel represents a color in the RGBA format made up
        /// of four bytes, that is, the Red sample in the highest 8 bits, followed by
        /// the Green sample, Blue sample and the Alpha sample in the lowest 8 bits.
        ///
        /// @param aCount
        /// The number of pixels.
        ///
        /// @returns a copy of the array of pixels.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPixels(ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref uint[] aPixels);
	}
	
	/// <summary>nsIStkIconConsts </summary>
	public class nsIStkIconConsts
	{
		
		// <summary>
        // The color coding schemes defined in 4.6.1.1 of TS 31.102.
        // </summary>
		public const ushort CODING_SCHEME_BASIC = 0x11;
		
		// 
		public const ushort CODING_SCHEME_COLOR = 0x21;
		
		// 
		public const ushort CODING_SCHEME_COLOR_TRANSPARENCY = 0x22;
	}
	
	/// <summary>nsIStkIconInfo </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("4a6d173e-5e8b-11e4-9d78-071bb3d6ba8f")]
	public interface nsIStkIconInfo
	{
		
		/// <summary>
        /// Indicates how the icon is to be used.
        ///
        /// @see TS 11.14, clause 12.31, Icon Identifier.
        ///
        /// true: icon replaces the text string.
        /// false: icon shall be displayed together with the text string.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIconSelfExplanatoryAttribute();
		
		/// <summary>
        /// Icon(s) that replaces or accompanies the text string.
        ///
        /// @see TS 11.14, clause 12.31, Icon Identifier.
        ///
        /// Array of icons, basically of a same image, that may differ in size,
        /// resolution or coding scheme. The first icon should be the default one.
        ///
        /// @param aCount
        /// The number of icons.
        ///
        /// @returns a copy of the list of icons.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetIcons(ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref nsIStkIcon[] aIcons);
	}
	
	/// <summary>nsIStkItem </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ea95d25c-5e84-11e4-bd96-07285c50c1f2")]
	public interface nsIStkItem
	{
		
		/// <summary>
        /// Identifier of item.
        ///
        /// The identifier is a single byte between '01' and 'FF'. Each item shall
        /// have a unique identifier within an Item list.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetIdentifierAttribute();
		
		/// <summary>
        /// Text string of item.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTextAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aText);
		
		/// <summary>
        /// (Optional)
        /// Icon info of item.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkIconInfo GetIconInfoAttribute();
	}
	
	/// <summary>nsIStkTimer </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1ec0d430-eeec-11e4-8566-df81b6d562c8")]
	public interface nsIStkTimer
	{
		
		/// <summary>
        /// Identifier of a timer.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetTimerIdAttribute();
		
		/// <summary>
        /// Length of time during which the timer has to run.
        ///
        /// The possible duration of a timer is between 1 s and 24 h.
        /// The resolution of a timer is 1 second.
        ///
        /// Note: In TS 11.14, clause 6.6.21 TIMER MANAGEMENT,
        /// "
        /// The SIM shall supply this data object only when a timer has to
        /// be started.
        /// "
        /// Hence, set to TIMER_VALUE_INVALID when |timerAction| is not equal to
        /// TIMER_ACTION_START.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetTimerValueAttribute();
		
		/// <summary>
        /// The action requested from UICC.
        /// It shall be one of TIMER_ACTION_*.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetTimerActionAttribute();
	}
	
	/// <summary>nsIStkTimerConsts </summary>
	public class nsIStkTimerConsts
	{
		
		// 
		public const ulong TIMER_VALUE_INVALID = 0xFFFFFFFF;
		
		// <summary>
        // Times actions defined in TS 11.14, clause 12.6,
        // Command Qualifier, TIMER MANAGEMENT
        // </summary>
		public const ushort TIMER_ACTION_START = 0x00;
		
		// 
		public const ushort TIMER_ACTION_DEACTIVATE = 0x01;
		
		// 
		public const ushort TIMER_ACTION_GET_CURRENT_VALUE = 0x02;
		
		// 
		public const ushort TIMER_ACTION_INVALID = 0xFF;
	}
	
	/// <summary>nsIStkLocationInfo </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("09903cfe-f3bf-11e4-a029-23d988cd1a82")]
	public interface nsIStkLocationInfo
	{
		
		/// <summary>
        /// Mobile Country Code (MCC) of the current serving operator.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMccAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aMcc);
		
		/// <summary>
        /// Mobile Network Code (MNC) of the current serving operator.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMncAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aMnc);
		
		/// <summary>
        /// Mobile Location Area Code (LAC) for the current serving operator.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetGsmLocationAreaCodeAttribute();
		
		/// <summary>
        /// Mobile Cell ID for the current serving operator.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetGsmCellIdAttribute();
	}
	
	/// <summary>
    /// The base class of all STK Proactive Commands.
    ///
    /// This interface is to be applied by the commands that provide info no more than:
    /// |commandNumber|, |typeOfCommand|, |commandQualifier|.
    ///
    /// The commands in this category are:
    /// - STK_CMD_REFRESH
    /// - STK_CMD_POLL_OFF
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f47f25b2-5d84-11e4-8637-7f59ea6da82f")]
	public interface nsIStkProactiveCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetCommandQualifierAttribute();
	}
	
	/// <summary>
    /// This interface is to be applied by STK_CMD_POLL_INTERVAL.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0a27c090-5dbc-11e4-92eb-ebc26db3db29")]
	public interface nsIStkPollIntervalCmd : nsIStkProactiveCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// The maximum interval between two STATUS commands related to
        /// Proactive Polling.
        ///
        /// Note: Mandatory for STK_CMD_POLL_INTERVAL.
        ///
        /// @See TS 11.14, clause 6.6.6 POLL INTERVAL
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkDuration GetDurationAttribute();
	}
	
	/// <summary>
    /// This interface is to be applied by STK_CMD_PROVIDE_LOCAL_INFO.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("89a304ce-5dc6-11e4-8dce-23723fb242b4")]
	public interface nsIStkProvideLocalInfoCmd : nsIStkProactiveCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// Values defined in TS 11.14, clause 12.6, Command Qualifier,
        /// PROVIDE LOCAL INFORMATION
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetLocalInfoTypeAttribute();
	}
	
	/// <summary>
    /// This interface is to be applied by STK_CMD_SET_UP_EVENT_LIST.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("5f796dec-5e6a-11e4-aaf3-bb675cb36df5")]
	public interface nsIStkSetupEventListCmd : nsIStkProactiveCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// (Optional)
        /// Get the list of events.
        /// Each event could be one of values defined in TS 11.14, clause 8.25, Event list.
        ///
        /// Note: It could be null as an indication to the terminal to remove the
        /// existing list of events in the terminal.
        ///
        /// @param aCount
        /// The number of events.
        ///
        /// @returns a copy of the list of events.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		unsigned short GetEventList(ref uint aCount);
	}
	
	/// <summary>
    /// This interface is to be applied by STK_CMD_SET_UP_MENU.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d7a66664-a602-11e4-9cc7-c7ce5fdade7d")]
	public interface nsIStkSetUpMenuCmd : nsIStkProactiveCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// (Optional for STK_CMD_SELECT_ITEM)
        /// Title of the menu.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTitleAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aTitle);
		
		/// <summary>
        /// Get the list of menu items.
        ///
        /// Note: The minimal number of items is 1.
        /// See TS 11.14, clause 6.6.7 SET-UP MENU and 6.6.8 SELECT ITEM.
        ///
        /// @param aCount
        /// The number of items.
        ///
        /// @returns a copy of the list of menu items.
        /// For |SET-UP MENU|, the 1st item in |aItems| could be null as an
        /// indication to the ME to remove the existing menu from the menu
        /// system in the ME.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetItems(ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref nsIStkItem[] aItems);
		
		/// <summary>
        /// (Optional)
        /// Get the list of Next Action Indicators.
        ///
        /// Each element should be the value of |Next Action Indicator| in TS 11.14,
        /// clause 13.4.
        ///
        /// @see TS 11.14, clause 12.24, Items Next Action Indicator.
        ///
        /// @param aCount
        /// The number of indicators.
        ///
        /// @returns a copy of the list of Next Action Indicators.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		unsigned short GetNextActionList(ref uint aCount);
		
		/// <summary>
        /// (Optional)
        /// Icon info of the menu.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkIconInfo GetIconInfoAttribute();
		
		/// <summary>
        /// Help information available or not.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, SET UP MENU, bit 8.
        ///
        /// true: help information available.
        /// false: no help information available.
        ///
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsHelpAvailableAttribute();
	}
	
	/// <summary>
    /// This interface is to be applied by STK_CMD_SELECT_ITEM.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("eb71f0fa-a602-11e4-926f-a3814461d218")]
	public interface nsIStkSelectItemCmd : nsIStkSetUpMenuCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// (Optional for STK_CMD_SELECT_ITEM)
        /// Title of the menu.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetTitleAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aTitle);
		
		/// <summary>
        /// Get the list of menu items.
        ///
        /// Note: The minimal number of items is 1.
        /// See TS 11.14, clause 6.6.7 SET-UP MENU and 6.6.8 SELECT ITEM.
        ///
        /// @param aCount
        /// The number of items.
        ///
        /// @returns a copy of the list of menu items.
        /// For |SET-UP MENU|, the 1st item in |aItems| could be null as an
        /// indication to the ME to remove the existing menu from the menu
        /// system in the ME.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetItems(ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref nsIStkItem[] aItems);
		
		/// <summary>
        /// (Optional)
        /// Get the list of Next Action Indicators.
        ///
        /// Each element should be the value of |Next Action Indicator| in TS 11.14,
        /// clause 13.4.
        ///
        /// @see TS 11.14, clause 12.24, Items Next Action Indicator.
        ///
        /// @param aCount
        /// The number of indicators.
        ///
        /// @returns a copy of the list of Next Action Indicators.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new unsigned short GetNextActionList(ref uint aCount);
		
		/// <summary>
        /// (Optional)
        /// Icon info of the menu.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIStkIconInfo GetIconInfoAttribute();
		
		/// <summary>
        /// Help information available or not.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, SET UP MENU, bit 8.
        ///
        /// true: help information available.
        /// false: no help information available.
        ///
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool GetIsHelpAvailableAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetPresentationTypeAttribute();
		
		/// <summary>
        /// (Optional)
        /// Default item identifier of the menu.
        ///
        /// Set to DEFAULT_ITEM_INVALID if null.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetDefaultItemAttribute();
	}
	
	/// <summary>nsIStkSelectItemCmdConsts </summary>
	public class nsIStkSelectItemCmdConsts
	{
		
		// <summary>
        // Presentation type, one of PRESENTATION_TYPE_*.
        //
        // @See TS 11.14, clause 12.6, Command Qualifier: Select Item
        // </summary>
		public const ushort PRESENTATION_TYPE_NOT_SPECIFIED = 0x00;
		
		// 
		public const ushort PRESENTATION_TYPE_DATA_VALUES = 0x01;
		
		// 
		public const ushort PRESENTATION_TYPE_NAVIGATION_OPTIONS = 0x03;
		
		// 
		public const ushort DEFAULT_ITEM_INVALID = 0xFFFF;
	}
	
	/// <summary>
    /// This interface is to be applied by
    /// - STK_CMD_SET_UP_IDLE_MODE_TEXT
    /// - STK_CMD_SEND_{SS|USSD|SMS|DTMF}
    /// - STK_CMD_OPEN_CHANNEL
    /// - STK_CMD_CLOSE_CHANNEL
    /// - STK_CMD_SEND_DATA
    /// - STK_CMD_RECEIVE_DATA
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("61c42b3c-6324-11e4-959e-7fb2dc9a3f0d")]
	public interface nsIStkTextMessageCmd : nsIStkProactiveCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// Text String.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTextAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aText);
		
		/// <summary>
        /// (Optional)
        /// Icon to be displayed.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkIconInfo GetIconInfoAttribute();
	}
	
	/// <summary>
    /// This interface is to be applied by STK_CMD_DISPLAY_TEXT.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("66a83f0a-6322-11e4-a773-9382de87a74a")]
	public interface nsIStkDisplayTextCmd : nsIStkTextMessageCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// Text String.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetTextAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aText);
		
		/// <summary>
        /// (Optional)
        /// Icon to be displayed.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIStkIconInfo GetIconInfoAttribute();
		
		/// <summary>
        /// (Optional)
        /// The length of time for which the ME shall display the dialog.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkDuration GetDurationAttribute();
		
		/// <summary>
        /// Indicate this text message is high priority or normal priority.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, Display Text, bit 1.
        ///
        /// true: high priority
        /// false: normal priority
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsHighPriorityAttribute();
		
		/// <summary>
        /// Need to wait for user to clear message or not.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, Display Text, bit 8.
        ///
        /// true: Wait for user to clear message.
        /// false: clear message after a delay.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetUserClearAttribute();
		
		/// <summary>
        /// Need to response immediately or not.
        ///
        /// @see TS 11.14, clause 12.43, Immediate response.
        ///
        /// true: The terminal shall send response immediately.
        /// false: otherwise.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetResponseNeededAttribute();
	}
	
	/// <summary>
    /// The base interface of nsIStkInputKeyCmd, nsIStkInputTextCmd.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ed16a67e-6022-11e4-a8fd-c34fe6e6bb11")]
	public interface nsIStkInputCmd : nsIStkProactiveCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// Text for the ME to display in conjunction with asking the user to respond.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTextAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aText);
		
		/// <summary>
        /// (Optional)
        /// The length of time for which the ME shall display the dialog.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkDuration GetDurationAttribute();
		
		/// <summary>
        /// Minimum length of response.
        /// Set to 1 for STK_CMD_GET_INKEY.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetMinLengthAttribute();
		
		/// <summary>
        /// Maximum length of response.
        /// Set to 1 for STK_CMD_GET_INKEY.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetMaxLengthAttribute();
		
		/// <summary>
        /// (Optional)
        /// Text for the ME to display, corresponds to a default text string offered
        /// by the ICC.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDefaultTextAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aDefaultText);
		
		/// <summary>
        /// Input format.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, GET INPUT/GET INKEY, bit 1.
        ///
        /// true: Alphabet set.
        /// false: Digits only.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsAlphabetAttribute();
		
		/// <summary>
        /// Alphabet encoding.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, GET INPUT/GET INKEY, bit 2.
        ///
        /// true: UCS2 alphabet.
        /// false: default SMS alphabet.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsUCS2Attribute();
		
		/// <summary>
        /// Help information available or not.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, GET INPUT/GET INKEY, bit 8.
        ///
        /// true: help information available.
        /// false: no help information available.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsHelpAvailableAttribute();
		
		/// <summary>
        /// (Optional)
        /// Icon to be displayed.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkIconInfo GetIconInfoAttribute();
	}
	
	/// <summary>
    /// This interface is to be applied by STK_CMD_GET_INKEY.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("27a4078a-6025-11e4-a9ab-bf39252bfaf1")]
	public interface nsIStkInputKeyCmd : nsIStkInputCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// Text for the ME to display in conjunction with asking the user to respond.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetTextAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aText);
		
		/// <summary>
        /// (Optional)
        /// The length of time for which the ME shall display the dialog.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIStkDuration GetDurationAttribute();
		
		/// <summary>
        /// Minimum length of response.
        /// Set to 1 for STK_CMD_GET_INKEY.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetMinLengthAttribute();
		
		/// <summary>
        /// Maximum length of response.
        /// Set to 1 for STK_CMD_GET_INKEY.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetMaxLengthAttribute();
		
		/// <summary>
        /// (Optional)
        /// Text for the ME to display, corresponds to a default text string offered
        /// by the ICC.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetDefaultTextAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aDefaultText);
		
		/// <summary>
        /// Input format.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, GET INPUT/GET INKEY, bit 1.
        ///
        /// true: Alphabet set.
        /// false: Digits only.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool GetIsAlphabetAttribute();
		
		/// <summary>
        /// Alphabet encoding.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, GET INPUT/GET INKEY, bit 2.
        ///
        /// true: UCS2 alphabet.
        /// false: default SMS alphabet.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool GetIsUCS2Attribute();
		
		/// <summary>
        /// Help information available or not.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, GET INPUT/GET INKEY, bit 8.
        ///
        /// true: help information available.
        /// false: no help information available.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool GetIsHelpAvailableAttribute();
		
		/// <summary>
        /// (Optional)
        /// Icon to be displayed.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIStkIconInfo GetIconInfoAttribute();
		
		/// <summary>
        /// Yes/No response is requested.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, GET INKEY, bit 3.
        ///
        /// true: Yes/No response is requested, and character sets
        /// (Alphabet set and UCS2) are disabled.
        /// false: Character sets (Alphabet set and UCS2) are enabled.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsYesNoRequestedAttribute();
	}
	
	/// <summary>
    /// This interface is to be applied by STK_CMD_GET_INPUT.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f3c33ae8-60d4-11e4-9da8-4ff4cb8566c3")]
	public interface nsIStkInputTextCmd : nsIStkInputCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// Text for the ME to display in conjunction with asking the user to respond.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetTextAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aText);
		
		/// <summary>
        /// (Optional)
        /// The length of time for which the ME shall display the dialog.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIStkDuration GetDurationAttribute();
		
		/// <summary>
        /// Minimum length of response.
        /// Set to 1 for STK_CMD_GET_INKEY.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetMinLengthAttribute();
		
		/// <summary>
        /// Maximum length of response.
        /// Set to 1 for STK_CMD_GET_INKEY.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetMaxLengthAttribute();
		
		/// <summary>
        /// (Optional)
        /// Text for the ME to display, corresponds to a default text string offered
        /// by the ICC.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetDefaultTextAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aDefaultText);
		
		/// <summary>
        /// Input format.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, GET INPUT/GET INKEY, bit 1.
        ///
        /// true: Alphabet set.
        /// false: Digits only.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool GetIsAlphabetAttribute();
		
		/// <summary>
        /// Alphabet encoding.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, GET INPUT/GET INKEY, bit 2.
        ///
        /// true: UCS2 alphabet.
        /// false: default SMS alphabet.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool GetIsUCS2Attribute();
		
		/// <summary>
        /// Help information available or not.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, GET INPUT/GET INKEY, bit 8.
        ///
        /// true: help information available.
        /// false: no help information available.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool GetIsHelpAvailableAttribute();
		
		/// <summary>
        /// (Optional)
        /// Icon to be displayed.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIStkIconInfo GetIconInfoAttribute();
		
		/// <summary>
        /// Visibility of input.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, GET INPUT, bit 3.
        ///
        /// true: User input shall not be revealed in any way.
        /// false: ME may echo user input on the display.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetHideInputAttribute();
		
		/// <summary>
        /// User input in packed or unpacked format.
        ///
        /// @see TS 11.14, clause 12.6, Command Qualifier, GET INPUT, bit 4.
        ///
        /// true: User input to be in SMS packed format.
        /// false: User input to be in unpacked format.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsPackedAttribute();
	}
	
	/// <summary>
    /// This interface is to be applied by STK_CMD_SET_UP_CALL.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("6abbf688-6956-11e4-a9d3-4b07f063ef21")]
	public interface nsIStkSetUpCallCmd : nsIStkProactiveCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// The Dialling number.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAddressAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aAddress);
		
		/// <summary>
        /// (Optional)
        /// The text message used in user confirmation phase.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetConfirmTextAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aConfirmText);
		
		/// <summary>
        /// (Optional)
        /// Icon to be displayed in user confirmation phase.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkIconInfo GetConfirmIconInfoAttribute();
		
		/// <summary>
        /// (Optional)
        /// The text message used in call set up phase.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCallTextAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aCallText);
		
		/// <summary>
        /// (Optional)
        /// Icon to be displayed in call set up phase.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkIconInfo GetCallIconInfoAttribute();
		
		/// <summary>
        /// (Optional)
        /// The maximum duration for the redial mechanism.
        /// The time elapsed since the first call set-up attempt has exceeded the duration
        /// requested by the UICC, the redial mechanism is terminated.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkDuration GetDurationAttribute();
	}
	
	/// <summary>
    /// This interface is to be applied by STK_CMD_LAUNCH_BROWSER.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b9bca548-695b-11e4-8c1f-cfb850f421ab")]
	public interface nsIStkBrowserSettingCmd : nsIStkProactiveCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// The URL to be opened by browser.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetUrlAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aUrl);
		
		/// <summary>
        /// Browser launch mode.
        /// @See TS 11.14, clause 12.6, Command Qualifier, LAUNCH BROWSER.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetModeAttribute();
		
		/// <summary>
        /// (Optional)
        /// Confirm message to launch browser.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetConfirmTextAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aConfirmText);
		
		/// <summary>
        /// (Optional)
        /// Icon to be displayed in user confirmation phase.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkIconInfo GetConfirmIconInfoAttribute();
	}
	
	/// <summary>
    /// This interface is to be applied by STK_CMD_PLAY_TONE.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f49dd148-60ee-11e4-af46-6b938538de51")]
	public interface nsIStkPlayToneCmd : nsIStkProactiveCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// (Optional)
        /// Text String.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTextAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aText);
		
		/// <summary>
        /// (Optional)
        /// One of the tone value coded in TS 11.14, clause 12.16, Tone.
        ///
        /// Set to TONE_TYPE_INVALID if null.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetToneAttribute();
		
		/// <summary>
        /// (Optional)
        /// The length of time for which the ME shall generate the tone.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkDuration GetDurationAttribute();
		
		/// <summary>
        /// Need to vibrate or not.
        /// true: vibrate alert, if available, with the tone.
        /// false: use of vibrate alert is up to the ME.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsVibrateAttribute();
		
		/// <summary>
        /// (Optional)
        /// Icon to be displayed.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkIconInfo GetIconInfoAttribute();
	}
	
	/// <summary>nsIStkPlayToneCmdConsts </summary>
	public class nsIStkPlayToneCmdConsts
	{
		
		// <summary>
        // This interface is to be applied by STK_CMD_PLAY_TONE.
        // </summary>
		public const ushort TONE_TYPE_INVALID = 0xFFFF;
	}
	
	/// <summary>
    /// This interface is to be applied by STK_CMD_TIMER_MANAGEMENT.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("e421b122-60f3-11e4-b8d7-bfe75825a796")]
	public interface nsIStkTimerManagementCmd : nsIStkProactiveCmd
	{
		
		/// <summary>
        /// The number of command issued by ICC. And it is assigned
        /// by ICC may take any hexadecimal value betweean '01' and 'FE'.
        ///
        /// @see TS 11.14, clause 6.5.1
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandNumberAttribute();
		
		/// <summary>
        /// The value of |Type of Command| defined in TS 11.14, clause 13.4
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetTypeOfCommandAttribute();
		
		/// <summary>
        /// Qualifiers specific to the command.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetCommandQualifierAttribute();
		
		/// <summary>
        /// Timer Information.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkTimer GetTimerInfoAttribute();
	}
	
	/// <summary>
    /// The base class of all STK Terminal Respones.
    ///
    /// This interface is to be applied by the responses that provide info no more
    /// than |resultCode| and |additionalInformation|.
    ///
    /// @see |6.8 Structure of Terminal Response| and |12.12 Result| in TS 11.14 for
    /// for the common structure of the response.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8e9f94de-0059-11e5-8608-67b08648d3d9")]
	public interface nsIStkTerminalResponse
	{
		
		/// <summary>
        /// The general result of the response.
        /// One of RESULT_*.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetResultCodeAttribute();
		
		/// <summary>
        /// (Optional)
        /// The additional info of the response.
        ///
        /// One of ADDITIONAL_INFO_*.
        /// Set to ADDITIONAL_INFO_INVALID if not available.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetAdditionalInformationAttribute();
	}
	
	/// <summary>nsIStkTerminalResponseConsts </summary>
	public class nsIStkTerminalResponseConsts
	{
		
		// <summary>
        //Command performed successfully </summary>
		public const ushort RESULT_OK = 0x00;
		
		// <summary>
        //Command performed with partial comprehension </summary>
		public const ushort RESULT_PRFRMD_WITH_PARTIAL_COMPREHENSION = 0x01;
		
		// <summary>
        //Command performed, with missing information </summary>
		public const ushort RESULT_PRFRMD_WITH_MISSING_INFO = 0x02;
		
		// <summary>
        //REFRESH performed with additional EFs read </summary>
		public const ushort RESULT_PRFRMD_WITH_ADDITIONAL_EFS_READ = 0x03;
		
		// <summary>
        //Command performed successfully, but icon could not be displayed </summary>
		public const ushort RESULT_PRFRMD_ICON_NOT_DISPLAYED = 0x04;
		
		// <summary>
        //Command performed successfully, limited service </summary>
		public const ushort RESULT_PRFRMD_LIMITED_SERVICE = 0x06;
		
		// <summary>
        //Proactive UICC session terminated by the user </summary>
		public const ushort RESULT_UICC_SESSION_TERM_BY_USER = 0x10;
		
		// <summary>
        //Backward move in the proactive UICC session requested by the user </summary>
		public const ushort RESULT_BACKWARD_MOVE_BY_USER = 0x11;
		
		// <summary>
        //No response from user </summary>
		public const ushort RESULT_NO_RESPONSE_FROM_USER = 0x12;
		
		// <summary>
        //Help information required by the user </summary>
		public const ushort RESULT_HELP_INFO_REQUIRED = 0x13;
		
		// <summary>
        //USSD or SS transaction terminated by the user </summary>
		public const ushort RESULT_USSD_SS_SESSION_TERM_BY_USER = 0x14;
		
		// <summary>
        //Terminal currently unable to process command </summary>
		public const ushort RESULT_TERMINAL_CRNTLY_UNABLE_TO_PROCESS = 0x20;
		
		// <summary>
        //Network currently unable to process command </summary>
		public const ushort RESULT_NETWORK_CRNTLY_UNABLE_TO_PROCESS = 0x21;
		
		// <summary>
        //User did not accept the proactive command </summary>
		public const ushort RESULT_USER_NOT_ACCEPT = 0x22;
		
		// <summary>
        //User cleared down call before connection or network release </summary>
		public const ushort RESULT_USER_CLEAR_DOWN_CALL = 0x23;
		
		// <summary>
        //Action in contradiction with the current timer state </summary>
		public const ushort RESULT_ACTION_CONTRADICTION_TIMER_STATE = 0x24;
		
		// <summary>
        //Launch browser generic error code </summary>
		public const ushort RESULT_LAUNCH_BROWSER_ERROR = 0x26;
		
		// <summary>
        //Command beyond terminal's capabilities </summary>
		public const ushort RESULT_BEYOND_TERMINAL_CAPABILITY = 0x30;
		
		// <summary>
        //Command type not understood by terminal </summary>
		public const ushort RESULT_CMD_TYPE_NOT_UNDERSTOOD = 0x31;
		
		// <summary>
        //Command data not understood by terminal </summary>
		public const ushort RESULT_CMD_DATA_NOT_UNDERSTOOD = 0x32;
		
		// <summary>
        //Command number not known by terminal </summary>
		public const ushort RESULT_CMD_NUM_NOT_KNOWN = 0x33;
		
		// <summary>
        //SS return error </summary>
		public const ushort RESULT_SS_RETURN_ERROR = 0x34;
		
		// <summary>
        //SMS RP-ERROR </summary>
		public const ushort RESULT_SMS_RP_ERROR = 0x35;
		
		// <summary>
        //Error, required values are missing </summary>
		public const ushort RESULT_REQUIRED_VALUES_MISSING = 0x36;
		
		// <summary>
        //USSD return error </summary>
		public const ushort RESULT_USSD_RETURN_ERROR = 0x37;
		
		// <summary>
        //MultipleCard commands error </summary>
		public const ushort RESULT_MULTI_CARDS_CMD_ERROR = 0x38;
		
		// <summary>
        // Interaction with call control by USIM or MO short message control by
        // USIM, permanent problem.
        // </summary>
		public const ushort RESULT_USIM_CALL_CONTROL_PERMANENT = 0x39;
		
		// <summary>
        //Bearer independent protocol error </summary>
		public const ushort RESULT_BIP_ERROR = 0x3a;
		
		// <summary>
        // 12.12.2 Additional information for ME problem:
        // </summary>
		public const ushort ADDITIONAL_INFO_ME_PROBLEM_SCREEN_IS_BUSY = 0x01;
		
		// 
		public const ushort ADDITIONAL_INFO_INVALID = 0xFFFF;
	}
	
	/// <summary>
    /// This interface is to be applied by the response of STK_CMD_SELECT_ITEM.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8eaa2496-ed7e-11e4-9aff-bfcf22a78770")]
	public interface nsIStkSelectItemResponse : nsIStkTerminalResponse
	{
		
		/// <summary>
        /// The general result of the response.
        /// One of RESULT_*.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetResultCodeAttribute();
		
		/// <summary>
        /// (Optional)
        /// The additional info of the response.
        ///
        /// One of ADDITIONAL_INFO_*.
        /// Set to ADDITIONAL_INFO_INVALID if not available.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetAdditionalInformationAttribute();
		
		/// <summary>
        /// The selected menu item.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetItemIdentifierAttribute();
	}
	
	/// <summary>
    /// This interface is to be applied by the response of STK_CMD_GET_INKEY and
    /// STK_CMD_GET_INPUT.
    ///
    /// Note: Either |isYesNo| or |input| shall be valid.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f39d9cd8-ee33-11e4-a55b-ef2489a0707d")]
	public interface nsIStkGetInputResponse : nsIStkTerminalResponse
	{
		
		/// <summary>
        /// The general result of the response.
        /// One of RESULT_*.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetResultCodeAttribute();
		
		/// <summary>
        /// (Optional)
        /// The additional info of the response.
        ///
        /// One of ADDITIONAL_INFO_*.
        /// Set to ADDITIONAL_INFO_INVALID if not available.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetAdditionalInformationAttribute();
		
		/// <summary>
        /// (Optional)
        /// The response if Yes/No response is requested.
        /// Set to YES_NO_INVALID if not available.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetIsYesNoAttribute();
		
		/// <summary>
        /// (Optional)
        /// The response of user input.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetInputAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aInput);
	}
	
	/// <summary>nsIStkGetInputResponseConsts </summary>
	public class nsIStkGetInputResponseConsts
	{
		
		// <summary>
        // This interface is to be applied by the response of STK_CMD_GET_INKEY and
        // STK_CMD_GET_INPUT.
        //
        // Note: Either |isYesNo| or |input| shall be valid.
        // </summary>
		public const ushort YES_NO_INVALID = 0xFFFF;
		
		// 
		public const ushort YES = 1;
		
		// 
		public const ushort NO = 0;
	}
	
	/// <summary>
    /// This interface is to be applied for the response of STK_CMD_CALL_SET_UP.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("dbf61506-ed7f-11e4-93ea-233485a1bac9")]
	public interface nsIStkCallSetupResponse : nsIStkTerminalResponse
	{
		
		/// <summary>
        /// The general result of the response.
        /// One of RESULT_*.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetResultCodeAttribute();
		
		/// <summary>
        /// (Optional)
        /// The additional info of the response.
        ///
        /// One of ADDITIONAL_INFO_*.
        /// Set to ADDITIONAL_INFO_INVALID if not available.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetAdditionalInformationAttribute();
		
		/// <summary>
        /// True if user confirm to set up call.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetHasConfirmedAttribute();
	}
	
	/// <summary>
    /// This interface is to be applied by the response of STK_CMD_PROVIDE_LOCAL_INFO.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("24fd4ece-ee37-11e4-8ac4-af876b1ce771")]
	public interface nsIStkLocalInfoResponse : nsIStkTerminalResponse
	{
		
		/// <summary>
        /// The general result of the response.
        /// One of RESULT_*.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetResultCodeAttribute();
		
		/// <summary>
        /// (Optional)
        /// The additional info of the response.
        ///
        /// One of ADDITIONAL_INFO_*.
        /// Set to ADDITIONAL_INFO_INVALID if not available.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetAdditionalInformationAttribute();
		
		/// <summary>
        /// (Optional)
        /// IMEI information
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetImeiAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aImei);
		
		/// <summary>
        /// (Optional)
        /// Location Information
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkLocationInfo GetLocationInfoAttribute();
		
		/// <summary>
        /// (Optional)
        /// Date information
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		long GetDateAttribute();
		
		/// <summary>
        /// (Optional)
        /// Language Information
        ///
        /// @see ISO 639-1, Alpha-2 code
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLanguageAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aLanguage);
	}
	
	/// <summary>nsIStkLocalInfoResponseConsts </summary>
	public class nsIStkLocalInfoResponseConsts
	{
		
		// <summary>
        // This interface is to be applied by the response of STK_CMD_PROVIDE_LOCAL_INFO.
        // </summary>
		public const ushort DATE_INVALID = 0;
	}
	
	/// <summary>
    /// This interface is to be applied by the response of STK_CMD_TIMER_MANAGEMENT.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("19f37a02-ed84-11e4-8316-0fde52ecfba6")]
	public interface nsIStkTimerResponse : nsIStkTerminalResponse
	{
		
		/// <summary>
        /// The general result of the response.
        /// One of RESULT_*.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetResultCodeAttribute();
		
		/// <summary>
        /// (Optional)
        /// The additional info of the response.
        ///
        /// One of ADDITIONAL_INFO_*.
        /// Set to ADDITIONAL_INFO_INVALID if not available.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetAdditionalInformationAttribute();
		
		/// <summary>
        /// Timer Info.
        ///
        /// Note: Only timer.timerId and timer.timerValue will be used in response.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkTimer GetTimerAttribute();
	}
	
	/// <summary>
    /// The base class of events used by Event Download.
    ///
    /// This interface is to be applied by the event that provide info no more
    /// than |eventType|. e.g. STK_EVENT_TYPE_USER_ACTIVITY,
    /// STK_EVENT_TYPE_IDLE_SCREEN_AVAILABLE.
    ///
    /// @see TS 102 223, clause 8.25 Event List, caluse 7.5 Event download
    /// for all structures of the event download.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0215d918-ee4a-11e4-9dcf-ab2c197c9211")]
	public interface nsIStkDownloadEvent
	{
		
		/// <summary>
        /// The event type of this download event.
        ///
        /// @see TS 102 223, clause 8.25 Event List.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetEventTypeAttribute();
	}
	
	/// <summary>
    /// This interface is to be applied by STK_EVENT_TYPE_LOCATION_STATUS.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("807b14f0-0059-11e5-aff7-1f8b4e659dbc")]
	public interface nsIStkLocationEvent : nsIStkDownloadEvent
	{
		
		/// <summary>
        /// The event type of this download event.
        ///
        /// @see TS 102 223, clause 8.25 Event List.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetEventTypeAttribute();
		
		/// <summary>
        /// Indicate current service state of the MS with one of the values listed
        /// One of SERVICE_STATE_*.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetLocationStatusAttribute();
		
		/// <summary>
        /// (Optional)
        /// Location Information
        ///
        /// Note: This object shall be included only if locationStatus is equal to
        /// SERVICE_STATE_NORMAL.
        ///
        /// @See TS 102 223, clause 7.5.4 Location status event.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIStkLocationInfo GetLocationInfoAttribute();
	}
	
	/// <summary>nsIStkLocationEventConsts </summary>
	public class nsIStkLocationEventConsts
	{
		
		// <summary>
        // This interface is to be applied by STK_EVENT_TYPE_LOCATION_STATUS.
        // </summary>
		public const ushort SERVICE_STATE_NORMAL = 0x00;
		
		// 
		public const ushort SERVICE_STATE_LIMITED = 0x01;
		
		// 
		public const ushort SERVICE_STATE_UNAVAILABLE = 0x02;
	}
	
	/// <summary>
    /// This interface is to be applied by STK_EVENT_TYPE_MT_CALL,
    /// STK_EVENT_TYPE_CALL_CONNECTED and STK_EVENT_TYPE_CALL_DISCONNECTED.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("e47dfc98-ee51-11e4-a672-43216a0b375a")]
	public interface nsIStkCallEvent : nsIStkDownloadEvent
	{
		
		/// <summary>
        /// The event type of this download event.
        ///
        /// @see TS 102 223, clause 8.25 Event List.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetEventTypeAttribute();
		
		/// <summary>
        /// Remote party number.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetNumberAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aNumber);
		
		/// <summary>
        /// For the STK_EVENT_TYPE_CALL_CONNECTED event, setting this to true means
        /// the connection is answered by remote end, that is, this is an outgoing call.
        /// For the STK_EVENT_TYPE_CALL_DISCONNECTED event, setting this to true
        /// indicates the connection is hung up by remote.
        /// For the STK_EVENT_TYPE_MT_CALL event, this flag is ignored.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsIssuedByRemoteAttribute();
		
		/// <summary>
        /// Indicate the cause of disconnection.
        /// The cause string is the one passed to gaia through the error listener of
        /// CallEvent.
        /// Set to null if there's no error.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetErrorAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aError);
	}
	
	/// <summary>
    /// This interface is to be applied by STK_EVENT_TYPE_LANGUAGE_SELECTION.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d185f0dc-ee51-11e4-912a-933874ee6cec")]
	public interface nsIStkLanguageSelectionEvent : nsIStkDownloadEvent
	{
		
		/// <summary>
        /// The event type of this download event.
        ///
        /// @see TS 102 223, clause 8.25 Event List.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetEventTypeAttribute();
		
		/// <summary>
        /// Language Information
        ///
        /// @see ISO 639-1, Alpha-2 code
        /// "de" for German, "en" for English, "zh" for Chinese, etc.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLanguageAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aLanguage);
	}
	
	/// <summary>
    /// This interface is to be applied by STK_EVENT_TYPE_LANGUAGE_SELECTION.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7ae84bde-0059-11e5-8238-8ba12036dc26")]
	public interface nsIStkBrowserTerminationEvent : nsIStkDownloadEvent
	{
		
		/// <summary>
        /// The event type of this download event.
        ///
        /// @see TS 102 223, clause 8.25 Event List.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new ushort GetEventTypeAttribute();
		
		/// <summary>
        /// The browser termination cause.
        /// One of BROWSER_TERMINATION_CAUSE_*
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetTerminationCauseAttribute();
	}
	
	/// <summary>nsIStkBrowserTerminationEventConsts </summary>
	public class nsIStkBrowserTerminationEventConsts
	{
		
		// <summary>
        // This interface is to be applied by STK_EVENT_TYPE_LANGUAGE_SELECTION.
        // </summary>
		public const ushort BROWSER_TERMINATION_CAUSE_USER = 0x00;
		
		// 
		public const ushort BROWSER_TERMINATION_CAUSE_ERROR = 0x01;
	}
}
