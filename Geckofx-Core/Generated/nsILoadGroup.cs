// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsILoadGroup.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// A load group maintains a collection of nsIRequest objects.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("afb57ac2-bce5-4ee3-bb34-385089a9ba5c")]
	public interface nsILoadGroup : nsIRequest
	{
		
		/// <summary>
        /// The name of the request.  Often this is the URI of the request.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetNameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aName);
		
		/// <summary>
        /// Indicates whether the request is pending. nsIRequest::isPending is
        /// true when there is an outstanding asynchronous event that will make
        /// the request no longer be pending.  Requests do not necessarily start
        /// out pending; in some cases, requests have to be explicitly initiated
        /// (e.g. nsIChannel implementations are only pending once asyncOpen
        /// returns successfully).
        ///
        /// Requests can become pending multiple times during their lifetime.
        ///
        /// @return TRUE if the request has yet to reach completion.
        /// @return FALSE if the request has reached completion (e.g., after
        /// OnStopRequest has fired).
        /// @note Suspended requests are still considered pending.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsPending();
		
		/// <summary>
        /// The error status associated with the request.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new int GetStatusAttribute();
		
		/// <summary>
        /// Cancels the current request.  This will close any open input or
        /// output streams and terminate any async requests.  Users should
        /// normally pass NS_BINDING_ABORTED, although other errors may also
        /// be passed.  The error passed in will become the value of the
        /// status attribute.
        ///
        /// Implementations must not send any notifications (e.g. via
        /// nsIRequestObserver) synchronously from this function. Similarly,
        /// removal from the load group (if any) must also happen asynchronously.
        ///
        /// Requests that use nsIStreamListener must not call onDataAvailable
        /// anymore after cancel has been called.
        ///
        /// @param aStatus the reason for canceling this request.
        ///
        /// NOTE: most nsIRequest implementations expect aStatus to be a
        /// failure code; however, some implementations may allow aStatus to
        /// be a success code such as NS_OK.  In general, aStatus should be
        /// a failure code.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Cancel(int aStatus);
		
		/// <summary>
        /// Suspends the current request.  This may have the effect of closing
        /// any underlying transport (in order to free up resources), although
        /// any open streams remain logically opened and will continue delivering
        /// data when the transport is resumed.
        ///
        /// Calling cancel() on a suspended request must not send any
        /// notifications (such as onstopRequest) until the request is resumed.
        ///
        /// NOTE: some implementations are unable to immediately suspend, and
        /// may continue to deliver events already posted to an event queue. In
        /// general, callers should be capable of handling events even after
        /// suspending a request.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Suspend();
		
		/// <summary>
        /// Resumes the current request.  This may have the effect of re-opening
        /// any underlying transport and will resume the delivery of data to
        /// any open streams.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Resume();
		
		/// <summary>
        /// The load group of this request.  While pending, the request is a
        /// member of the load group.  It is the responsibility of the request
        /// to implement this policy.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsILoadGroup GetLoadGroupAttribute();
		
		/// <summary>
        /// The load group of this request.  While pending, the request is a
        /// member of the load group.  It is the responsibility of the request
        /// to implement this policy.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetLoadGroupAttribute([MarshalAs(UnmanagedType.Interface)] nsILoadGroup aLoadGroup);
		
		/// <summary>
        /// The load flags of this request.  Bits 0-15 are reserved.
        ///
        /// When added to a load group, this request's load flags are merged with
        /// the load flags of the load group.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new uint GetLoadFlagsAttribute();
		
		/// <summary>
        /// The load flags of this request.  Bits 0-15 are reserved.
        ///
        /// When added to a load group, this request's load flags are merged with
        /// the load flags of the load group.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetLoadFlagsAttribute(uint aLoadFlags);
		
		/// <summary>
        /// The group observer is notified when requests are added to and removed
        /// from this load group.  The groupObserver is weak referenced.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIRequestObserver GetGroupObserverAttribute();
		
		/// <summary>
        /// The group observer is notified when requests are added to and removed
        /// from this load group.  The groupObserver is weak referenced.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetGroupObserverAttribute([MarshalAs(UnmanagedType.Interface)] nsIRequestObserver aGroupObserver);
		
		/// <summary>
        /// Accesses the default load request for the group.  Each time a number
        /// of requests are added to a group, the defaultLoadRequest may be set
        /// to indicate that all of the requests are related to a base request.
        ///
        /// The load group inherits its load flags from the default load request.
        /// If the default load request is NULL, then the group's load flags are
        /// not changed.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIRequest GetDefaultLoadRequestAttribute();
		
		/// <summary>
        /// Accesses the default load request for the group.  Each time a number
        /// of requests are added to a group, the defaultLoadRequest may be set
        /// to indicate that all of the requests are related to a base request.
        ///
        /// The load group inherits its load flags from the default load request.
        /// If the default load request is NULL, then the group's load flags are
        /// not changed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDefaultLoadRequestAttribute([MarshalAs(UnmanagedType.Interface)] nsIRequest aDefaultLoadRequest);
		
		/// <summary>
        /// Adds a new request to the group.  This will cause the default load
        /// flags to be applied to the request.  If this is a foreground
        /// request then the groupObserver's onStartRequest will be called.
        ///
        /// If the request is the default load request or if the default load
        /// request is null, then the load group will inherit its load flags from
        /// the request.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddRequest([MarshalAs(UnmanagedType.Interface)] nsIRequest aRequest, [MarshalAs(UnmanagedType.Interface)] nsISupports aContext);
		
		/// <summary>
        /// Removes a request from the group.  If this is a foreground request
        /// then the groupObserver's onStopRequest will be called.
        ///
        /// By the time this call ends, aRequest will have been removed from the
        /// loadgroup, even if this function throws an exception.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveRequest([MarshalAs(UnmanagedType.Interface)] nsIRequest aRequest, [MarshalAs(UnmanagedType.Interface)] nsISupports aContext, int aStatus);
		
		/// <summary>
        /// Returns the requests contained directly in this group.
        /// Enumerator element type: nsIRequest.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISimpleEnumerator GetRequestsAttribute();
		
		/// <summary>
        /// Returns the count of "active" requests (ie. requests without the
        /// LOAD_BACKGROUND bit set).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetActiveCountAttribute();
		
		/// <summary>
        /// Notification callbacks for the load group.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIInterfaceRequestor GetNotificationCallbacksAttribute();
		
		/// <summary>
        /// Notification callbacks for the load group.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetNotificationCallbacksAttribute([MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor aNotificationCallbacks);
		
		/// <summary>
        /// Connection information for managing things like js/css
        /// connection blocking, and per-tab connection grouping
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsILoadGroupConnectionInfo GetConnectionInfoAttribute();
		
		/// <summary>
        /// The set of load flags that will be added to all new requests added to
        /// this group. Any existing requests in the load group are not modified,
        /// so it is expected these flags will be added before requests are added
        /// to the group - typically via nsIDocShell::defaultLoadFlags on a new
        /// docShell.
        /// Note that these flags are *not* added to the default request for the
        /// load group; it is expected the default request will already have these
        /// flags (again, courtesy of setting nsIDocShell::defaultLoadFlags before
        /// the docShell has created the default request.)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetDefaultLoadFlagsAttribute();
		
		/// <summary>
        /// The set of load flags that will be added to all new requests added to
        /// this group. Any existing requests in the load group are not modified,
        /// so it is expected these flags will be added before requests are added
        /// to the group - typically via nsIDocShell::defaultLoadFlags on a new
        /// docShell.
        /// Note that these flags are *not* added to the default request for the
        /// load group; it is expected the default request will already have these
        /// flags (again, courtesy of setting nsIDocShell::defaultLoadFlags before
        /// the docShell has created the default request.)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDefaultLoadFlagsAttribute(uint aDefaultLoadFlags);
	}
	
	/// <summary>
    /// Used to maintain state about the connections of a load group and
    /// how they interact with blocking items like HEAD css/js loads.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("fdc9659c-b597-4ac0-9c9e-14b04dbb682f")]
	public interface nsILoadGroupConnectionInfo
	{
		
		/// <summary>
        /// Number of active blocking transactions associated with this load group
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetBlockingTransactionCountAttribute();
		
		/// <summary>
        /// Increase the number of active blocking transactions associated
        /// with this load group by one.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddBlockingTransaction();
		
		/// <summary>
        /// Decrease the number of active blocking transactions associated
        /// with this load group by one. The return value is the number of remaining
        /// blockers.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint RemoveBlockingTransaction();
		
		/// <summary>
        ///reading this attribute gives out weak pointers to the push
        /// cache. The nsILoadGroupConnectionInfo implemenation owns the cache
        /// and will destroy it when overwritten or when the load group
        /// ends.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetSpdyPushCacheAttribute();
		
		/// <summary>
        ///reading this attribute gives out weak pointers to the push
        /// cache. The nsILoadGroupConnectionInfo implemenation owns the cache
        /// and will destroy it when overwritten or when the load group
        /// ends.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSpdyPushCacheAttribute(System.IntPtr aSpdyPushCache);
	}
}
