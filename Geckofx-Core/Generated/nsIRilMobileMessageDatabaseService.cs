// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIRilMobileMessageDatabaseService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("92986322-8d56-11e2-8816-73a531c493c2")]
	public interface nsIRilMobileMessageDatabaseCallback
	{
		
		/// <summary>
        /// |aDomMessage|: the nsIDOMMoz{Mms,Sms}Message
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Notify(int aRv, [MarshalAs(UnmanagedType.Interface)] nsISupports aDomMessage);
	}
	
	/// <summary>nsIRilMobileMessageDatabaseRecordCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("32b02bbe-60a1-45e0-a748-ad40709b09dd")]
	public interface nsIRilMobileMessageDatabaseRecordCallback
	{
		
		/// <summary>
        /// |aMessageRecord| Object: the mobile-message database record
        /// |aDomMessage|: the nsIDOMMoz{Mms,Sms}Message. Noted, this value might be null.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Notify(int aRv, ref Gecko.JsVal aMessageRecord, [MarshalAs(UnmanagedType.Interface)] nsISupports aDomMessage);
	}
	
	/// <summary>nsIRilMobileMessageDatabaseConcatenationCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1b0ff03c-a2bc-11e3-a443-838d034c9805")]
	public interface nsIRilMobileMessageDatabaseConcatenationCallback
	{
		
		/// <summary>
        /// |aCompleteMessage|: jsval: the completely concatenated message. Noted, this value might be null.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Notify(int aRv, ref Gecko.JsVal aCompleteMessage);
	}
	
	/// <summary>nsIRilMobileMessageDatabaseService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0b437a5c-a2bc-11e3-bd1b-dbb173eb35f8")]
	public interface nsIRilMobileMessageDatabaseService : nsIMobileMessageDatabaseService
	{
		
		/// <summary>
        ///This Source Code Form is subject to the terms of the Mozilla Public
        /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
        /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetMessage(int messageId, [MarshalAs(UnmanagedType.Interface)] nsIMobileMessageCallback request);
		
		/// <summary>Member DeleteMessage </summary>
		/// <param name='messageIds'> </param>
		/// <param name='count'> </param>
		/// <param name='request'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void DeleteMessage([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] int[] messageIds, uint count, [MarshalAs(UnmanagedType.Interface)] nsIMobileMessageCallback request);
		
		/// <summary>Member CreateMessageCursor </summary>
		/// <param name='filter'> </param>
		/// <param name='reverse'> </param>
		/// <param name='callback'> </param>
		/// <returns>A nsICursorContinueCallback</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsICursorContinueCallback CreateMessageCursor([MarshalAs(UnmanagedType.Interface)] nsIDOMMozSmsFilter filter, [MarshalAs(UnmanagedType.U1)] bool reverse, [MarshalAs(UnmanagedType.Interface)] nsIMobileMessageCursorCallback callback);
		
		/// <summary>Member MarkMessageRead </summary>
		/// <param name='messageId'> </param>
		/// <param name='value'> </param>
		/// <param name='sendReadReport'> </param>
		/// <param name='request'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void MarkMessageRead(int messageId, [MarshalAs(UnmanagedType.U1)] bool value, [MarshalAs(UnmanagedType.U1)] bool sendReadReport, [MarshalAs(UnmanagedType.Interface)] nsIMobileMessageCallback request);
		
		/// <summary>Member CreateThreadCursor </summary>
		/// <param name='callback'> </param>
		/// <returns>A nsICursorContinueCallback</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsICursorContinueCallback CreateThreadCursor([MarshalAs(UnmanagedType.Interface)] nsIMobileMessageCursorCallback callback);
		
		/// <summary>
        /// |aMessage| Object: should contain the following properties for internal use:
        /// - |type| DOMString: "sms" or "mms"
        /// - |timestamp| Number: the timestamp of received message
        /// - |iccId| DOMString: [optional] the ICC ID of the SIM for receiving
        /// message if available.
        ///
        /// - If |type| == "sms", we also need:
        /// - |messageClass| DOMString: the message class of received message
        /// - |receiver| DOMString: the phone number of receiver
        /// - |pid| Number: the TP-PID field of the SMS TPDU, default 0.
        /// - |sender| DOMString: the phone number of sender
        ///
        /// - If |type| == "mms", we also need:
        /// - |delivery| DOMString: the delivery state of received message
        /// - |deliveryStatus| DOMString: the delivery status of received message
        /// - |receivers| DOMString Array: the phone numbers of receivers
        /// - |phoneNumber| DOMString: [optional] my own phone number.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SaveReceivedMessage(ref Gecko.JsVal aMessage, [MarshalAs(UnmanagedType.Interface)] nsIRilMobileMessageDatabaseCallback aCallback);
		
		/// <summary>
        /// |aMessage| Object: should contain the following properties for internal use:
        /// - |type| DOMString: "sms" or "mms"
        /// - |sender| DOMString: the phone number of sender
        /// - |timestamp| Number: the timestamp of sending message
        /// - |deliveryStatusRequested| Bool: true when the delivery report is requested.
        /// - |iccId| DOMString: the ICC ID of the SIM for sending message
        ///
        /// - If |type| == "sms", we also need:
        /// - |receiver| DOMString: the phone number of receiver
        ///
        /// - If |type| == "mms", we also need:
        /// - |receivers| DOMString Array: the phone numbers of receivers
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SaveSendingMessage(ref Gecko.JsVal aMessage, [MarshalAs(UnmanagedType.Interface)] nsIRilMobileMessageDatabaseCallback aCallback);
		
		/// <summary>
        /// |aMessageId| Number: the message's DB record ID.
        /// |aReceiver| DOMString: the phone number of receiver (for MMS; can be null).
        /// |aDelivery| DOMString: the new delivery value to update (can be null).
        /// |aDeliveryStatus| DOMString: the new delivery status to update (can be null).
        /// |aEnvelopeId| DOMString: the "message-id" specified in the MMS PDU headers.
        /// |aCallback| nsIRilMobileMessageDatabaseCallback: an optional callback.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMessageDeliveryByMessageId(int aMessageId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aReceiver, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aDelivery, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aDeliveryStatus, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aEnvelopeId, [MarshalAs(UnmanagedType.Interface)] nsIRilMobileMessageDatabaseCallback aCallback);
		
		/// <summary>
        /// |aEnvelopeId| DOMString: the "message-id" specified in the MMS PDU headers.
        /// |aReceiver| DOMString: the phone number of receiver (for MMS; can be null).
        /// |aDeliveryStatus| DOMString: the new delivery status to be updated (can be null).
        /// |aCallback| nsIRilMobileMessageDatabaseCallback: an optional callback.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMessageDeliveryStatusByEnvelopeId([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aEnvelopeId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aReceiver, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aDeliveryStatus, [MarshalAs(UnmanagedType.Interface)] nsIRilMobileMessageDatabaseCallback aCallback);
		
		/// <summary>
        /// |aEnvelopeId| DOMString: the "message-id" specified in the MMS PDU headers.
        /// |aReceiver| DOMString: the phone number of receiver (for MMS; can be null).
        /// |aReadStatus| DOMString: the new read status to be updated.
        /// |aCallback| nsIRilMobileMessageDatabaseCallback: an optional callback.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetMessageReadStatusByEnvelopeId([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aEnvelopeId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aReceiver, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aReadStatus, [MarshalAs(UnmanagedType.Interface)] nsIRilMobileMessageDatabaseCallback aCallback);
		
		/// <summary>
        /// |aMessageId| Number: the message's DB record ID.
        /// |aCallback| nsIRilMobileMessageDatabaseRecordCallback: a callback which
        /// takes result flag, message record and domMessage as parameters.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMessageRecordById(int aMessageId, [MarshalAs(UnmanagedType.Interface)] nsIRilMobileMessageDatabaseRecordCallback aCallback);
		
		/// <summary>
        /// |aTransactionId| DOMString: the transaction ID of MMS PDU.
        /// |aCallback| nsIRilMobileMessageDatabaseRecordCallback: a callback which
        /// takes result flag and message record as parameters.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMessageRecordByTransactionId([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aTransactionId, [MarshalAs(UnmanagedType.Interface)] nsIRilMobileMessageDatabaseRecordCallback aCallback);
		
		/// <summary>
        /// |aCrError| nsresult: the NS_ERROR defined in Components.results.
        ///
        /// @returns the error code defined in nsIMobileMessageCallback
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal TranslateCrErrorToMessageCallbackError(int aCrError);
		
		/// <summary>
        /// |aSmsSegment| jsval: Decoded Single SMS PDU.
        /// |aCallback| nsIRilMobileMessageDatabaseConcatenationCallback: a callback which
        /// takes result flag, and complete mesage as parameters.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SaveSmsSegment(ref Gecko.JsVal aSmsSegment, [MarshalAs(UnmanagedType.Interface)] nsIRilMobileMessageDatabaseConcatenationCallback aCallback);
	}
}
