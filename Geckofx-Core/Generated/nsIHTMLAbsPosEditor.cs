// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIHTMLAbsPosEditor.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("91375f52-20e6-4757-9835-eb04fabe5498")]
	public interface nsIHTMLAbsPosEditor
	{
		
		/// <summary>
        /// true if the selection container is absolutely positioned
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetSelectionContainerAbsolutelyPositionedAttribute();
		
		/// <summary>
        /// this contains the absolutely positioned element currently edited
        /// or null
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement GetPositionedElementAttribute();
		
		/// <summary>
        /// true if Absolute Positioning handling is enabled in the editor
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetAbsolutePositioningEnabledAttribute();
		
		/// <summary>
        /// true if Absolute Positioning handling is enabled in the editor
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAbsolutePositioningEnabledAttribute([MarshalAs(UnmanagedType.U1)] bool aAbsolutePositioningEnabled);
		
		/// <summary>
        /// true if Snap To Grid is enabled in the editor.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetSnapToGridEnabledAttribute();
		
		/// <summary>
        /// true if Snap To Grid is enabled in the editor.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSnapToGridEnabledAttribute([MarshalAs(UnmanagedType.U1)] bool aSnapToGridEnabled);
		
		/// <summary>
        /// sets the grid size in pixels.
        /// @param aSizeInPixels [IN] the size of the grid in pixels
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetGridSizeAttribute();
		
		/// <summary>
        /// sets the grid size in pixels.
        /// @param aSizeInPixels [IN] the size of the grid in pixels
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetGridSizeAttribute(uint aGridSize);
		
		/// <summary>
        /// returns the deepest absolutely positioned container of the selection
        /// if it exists or null.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement GetAbsolutelyPositionedSelectionContainerAttribute();
		
		/// <summary>
        /// extracts the selection from the normal flow of the document and
        /// positions it.
        /// @param aEnabled [IN] true to absolutely position the selection,
        /// false to put it back in the normal flow
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AbsolutePositionSelection([MarshalAs(UnmanagedType.U1)] bool aEnabled);
		
		/// <summary>
        /// adds aChange to the z-index of the currently positioned element.
        /// @param aChange [IN] relative change to apply to current z-index
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RelativeChangeZIndex(int aChange);
		
		/// <summary>
        /// extracts an element from the normal flow of the document and
        /// positions it, and puts it back in the normal flow.
        /// @param aElement [IN] the element
        /// @param aEnabled [IN] true to absolutely position the element,
        /// false to put it back in the normal flow
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AbsolutelyPositionElement([MarshalAs(UnmanagedType.Interface)] nsIDOMElement aElement, [MarshalAs(UnmanagedType.U1)] bool aEnabled);
		
		/// <summary>
        /// sets the position of an element; warning it does NOT check if the
        /// element is already positioned or not and that's on purpose.
        /// @param aElement [IN] the element
        /// @param aX       [IN] the x position in pixels.
        /// @param aY       [IN] the y position in pixels.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetElementPosition([MarshalAs(UnmanagedType.Interface)] nsIDOMElement aElement, int aX, int aY);
		
		/// <summary>
        /// returns the absolute z-index of a positioned element. Never returns 'auto'.
        /// @return         the z-index of the element
        /// @param aElement [IN] the element.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetElementZIndex([MarshalAs(UnmanagedType.Interface)] nsIDOMElement aElement);
		
		/// <summary>
        /// sets the z-index of an element.
        /// @param aElement [IN] the element
        /// @param aZorder  [IN] the z-index
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetElementZIndex([MarshalAs(UnmanagedType.Interface)] nsIDOMElement aElement, int aZorder);
		
		/// <summary>
        /// adds aChange to the z-index of an arbitrary element.
        /// @return         the new z-index of the element
        /// @param aElement [IN] the element
        /// @param aChange  [IN] relative change to apply to current z-index of
        /// the element
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int RelativeChangeElementZIndex([MarshalAs(UnmanagedType.Interface)] nsIDOMElement aElement, int aChange);
		
		/// <summary>
        /// shows a grabber attached to an arbitrary element. The grabber is an image
        /// positioned on the left hand side of the top border of the element. Dragging
        /// and dropping it allows to change the element's absolute position in the
        /// document. See chrome://editor/content/images/grabber.gif
        /// @param aElement [IN] the element
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ShowGrabberOnElement([MarshalAs(UnmanagedType.Interface)] nsIDOMElement aElement);
		
		/// <summary>
        /// hide the grabber if it shown.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HideGrabber();
		
		/// <summary>
        /// refreshes the grabber if it shown, possibly updating its position or
        /// even hiding it.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RefreshGrabber();
	}
}
