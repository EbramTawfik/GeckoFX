// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsICameraTestHardware.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2e567730-f164-49d7-b975-862caa4425a5")]
	public interface nsICameraTestHardware
	{
		
		/// <summary>
        ///Attach a delegate handler object such that the test hardware
        ///     will call the given handlers for the given operations to decide
        ///     what to do. This allows a test case to define specific behaviours
        ///     on a fine grained basis.
        ///     The following handlers may be supplied as properties of the
        ///     given delagate handler object:
        ///       autoFocus
        ///       cancelAutoFocus
        ///       cancelTakePicture
        ///       init
        ///       pushParameters
        ///       pullParameters
        ///       startFaceDetection
        ///       startPreview
        ///       startRecording
        ///       stopFaceDetection
        ///       stopPreview
        ///       stopRecording
        ///       takePicture
        ///     Implementation notes for handlers:
        ///     - If the handler throws an error, we will the return code
        ///       of the driver operation.
        ///     - If the handler returns true, we will perform the default
        ///       action (if any) for the operation. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Attach(ref Gecko.JsVal mock);
		
		/// <summary>
        ///Detach a delegate handler object such that the test hardware
        ///     will revert to default behaviour when a function is called. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Detach();
		
		/// <summary>
        ///Reset the state of the test hardware back to the initial state.
        ///     This is useful when one test case has been completed and we need
        ///     a clean slate for the next. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Reset(ref Gecko.JsVal window);
		
		/// <summary>
        ///Trigger an OnAutoFocusMoving callback at the Gonk layer.
        ///     state is a boolean indicating where or not the camera focus
        ///     is moving. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FireAutoFocusComplete([MarshalAs(UnmanagedType.U1)] bool state);
		
		/// <summary>
        ///Trigger an OnAutoFocusComplete callback at the Gonk layer.
        ///     state is a boolean indicating where or not the camera is focused. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FireAutoFocusMoving([MarshalAs(UnmanagedType.U1)] bool moving);
		
		/// <summary>
        ///Trigger an OnTakePictureComplete callback at the Gonk layer.
        ///     blob should be a Blob object. The actual content of the blob
        ///     is unimportant since nothing processes it as an image internally. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FireTakePictureComplete([MarshalAs(UnmanagedType.Interface)] nsIDOMBlob picture);
		
		/// <summary>
        ///Trigger an OnTakePictureError callback at the Gonk layer. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FireTakePictureError();
		
		/// <summary>
        ///Trigger an OnSystemError callback at the Gonk layer. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FireSystemError();
		
		/// <summary>
        ///Trigger an OnShutter callback at the Gonk layer. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FireShutter();
		
		/// <summary>
        ///Trigger an OnFacesDetected callback at the Gonk layer.
        ///     faces is an array of CameraDetectedFaceInit dictionaries although
        ///     hasLeftEye, hasRightEye and hasMouth may be omitted and will be
        ///     implied by the presence/absence of leftEye, rightEye and mouth. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FireFacesDetected(ref Gecko.JsVal faces);
		
		/// <summary>
        ///Object which stores the camera parameters read/written by the
        ///     camera control layer from the hardware. The test case may set
        ///     its own values to control the behaviour of the camera middleware.
        ///     E.g. params['preview-sizes'] = '320x240,640x480'; </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetParamsAttribute();
		
		/// <summary>
        ///Object which stores the camera parameters read/written by the
        ///     camera control layer from the hardware. The test case may set
        ///     its own values to control the behaviour of the camera middleware.
        ///     E.g. params['preview-sizes'] = '320x240,640x480'; </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetParamsAttribute(Gecko.JsVal aParams);
		
		/// <summary>
        ///Set a handler to capture asynchronous events triggered by the
        ///     test case via the fireXXX methods. E.g.:
        ///       nsCOMPtr<nsICameraHardware> wrapper =
        ///         do_GetService("@mozilla.org/cameratesthardware;1");
        ///       nsCOMPtr<nsIDOMEventListener> listener = new HwListener();
        ///       wrapper->setHander(listener);
        ///     where
        ///       class HwListener : public nsIDOMEventListener {
        ///         NS_IMETHODIMP HandleEvent(nsIDOMEvent *aEvent) {
        ///           nsString type;
        ///           aEvent->GetType(&type);
        ///           if (aEvent.EqualsLiteral("focus")) {
        ///              ...
        ///           } else {
        ///              ...
        ///           }
        ///         }
        ///       };
        ///     The following event types may be generated:
        ///       focus: CameraStateChangeEvent where newState should map
        ///       to the OnAutoFocusComplete and OnAutoFocusMoving callbacks:
        ///       -- focused: OnAutoFocusComplete(false)
        ///       -- unfocused: OnAutoFocusComplete(true)
        ///       -- focusing: OnAutoFocusMoving(true)
        ///       -- not_focusing: OnAutoFocusMoving(false)
        ///       picture: BlobEvent which contains the picture type and
        ///       data corresponding to the OnTakePictureComplete callback.
        ///       error: ErrorEvent corresponding to the various error callbacks,
        ///       where the message is:
        ///       -- picture: OnTakePictureError()
        ///       -- system: OnSystemError(100, 0)
        ///       facesdetected: CameraFacesDetectedEvent which contains the
        ///       faces data corresponding to OnFacesDetected callback.
        ///       shutter: Event which corresponds to the OnShutter callback. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetHandler([MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener handler);
		
		/// <summary>
        ///Execute an intercepted Init() driver call. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InitCamera();
		
		/// <summary>
        ///Execute an intercepted AutoFocus() driver call. Default behaviour is
        ///     to trigger OnAutoFocusComplete where the camera is focused. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AutoFocus();
		
		/// <summary>
        ///Execute an intercepted CancelAutoFocus() driver call. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CancelAutoFocus();
		
		/// <summary>
        ///Execute an intercepted StartFaceDetection() driver call. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartFaceDetection();
		
		/// <summary>
        ///Execute an intercepted StopFaceDetection() driver call. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StopFaceDetection();
		
		/// <summary>
        ///Execute an intercepted TakePicture() driver call. Default behaviour is
        ///     to trigger OnTakePictureComplete with a fake jpeg blob. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TakePicture();
		
		/// <summary>
        ///Execute an intercepted CancelTakePicture() driver call. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CancelTakePicture();
		
		/// <summary>
        ///Execute an intercepted StartPreview() driver call. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartPreview();
		
		/// <summary>
        ///Execute an intercepted StopPreview() driver call. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StopPreview();
		
		/// <summary>
        ///Execute an intercepted StartRecording() driver call. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartRecording();
		
		/// <summary>
        ///Execute an intercepted StopRecording() driver call. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StopRecording();
		
		/// <summary>
        ///Execute an intercepted PushParameters() driver call. If the delegate
        ///     handler throws an error, it will restore the old parameters.
        ///     When the delegate is called, the new proposed parameters are
        ///     placed in this.params. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PushParameters([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase @params);
		
		/// <summary>
        ///Execute an intercepted PullParameters() driver call. Unless the delegate
        ///     handler throws an error, it will return an assembled parameter
        ///     list derived from the this.params hash table. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PullParameters([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase retval);
	}
}
