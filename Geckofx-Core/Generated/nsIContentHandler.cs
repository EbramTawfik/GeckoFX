// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIContentHandler.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("49439df2-b3d2-441c-bf62-866bdaf56fd2")]
	public interface nsIContentHandler
	{
		
		/// <summary>
        /// Tells the content handler to take over handling the content. If this
        /// function succeeds, the URI Loader will leave this request alone, ignoring
        /// progress notifications. Failure of this method will cause the request to be
        /// cancelled, unless the error code is NS_ERROR_WONT_HANDLE_CONTENT (see
        /// below).
        ///
        /// @param aWindowContext
        /// Window context, used to get things like the current nsIDOMWindow
        /// for this request. May be null.
        /// @param aContentType
        /// The content type of aRequest
        /// @param aRequest
        /// A request whose content type is already known.
        ///
        /// @throw NS_ERROR_WONT_HANDLE_CONTENT Indicates that this handler does not
        /// want to handle this content. A different way for handling this
        /// content should be tried.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleContent([MarshalAs(UnmanagedType.LPStr)] string aContentType, [MarshalAs(UnmanagedType.Interface)] nsIInterfaceRequestor aWindowContext, [MarshalAs(UnmanagedType.Interface)] nsIRequest aRequest);
	}
}
