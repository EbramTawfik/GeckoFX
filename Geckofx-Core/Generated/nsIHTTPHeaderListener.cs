// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIHTTPHeaderListener.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// The nsIHTTPHeaderListener interface allows plugin authors to
    /// access HTTP Response headers after issuing an
    /// nsIPluginHost::{GetURL,PostURL}() call. <P>
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ea51e0b8-871c-4b85-92da-6f400394c5ec")]
	public interface nsIHTTPHeaderListener
	{
		
		/// <summary>
        /// Called for each HTTP Response header.
        /// NOTE: You must copy the values of the params.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NewResponseHeader([MarshalAs(UnmanagedType.LPStr)] string headerName, [MarshalAs(UnmanagedType.LPStr)] string headerValue);
		
		/// <summary>
        /// Called once for the HTTP Response status line.
        /// Value does NOT include a terminating newline.
        /// NOTE: You must copy this value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StatusLine([MarshalAs(UnmanagedType.LPStr)] string line);
	}
}
