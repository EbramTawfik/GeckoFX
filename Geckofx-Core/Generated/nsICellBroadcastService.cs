// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsICellBroadcastService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("56f66190-44a0-11e4-aa32-636783cc014a")]
	public interface nsICellBroadcastListener
	{
		
		/// <summary>
        /// Called when a Cell Broadcast message has been received by the network.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyMessageReceived(uint aServiceId, uint aGsmGeographicalScope, ushort aMessageCode, ushort aMessageId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aLanguage, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aBody, uint aMessageClass, long aTimestamp, uint aCdmaServiceCategory, [MarshalAs(UnmanagedType.U1)] bool aHasEtwsInfo, uint aEtwsWarningType, [MarshalAs(UnmanagedType.U1)] bool aEtwsEmergencyUserAlert, [MarshalAs(UnmanagedType.U1)] bool aEtwsPopup);
	}
	
	/// <summary>
    /// XPCOM component that provides the cell broadcast information.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("906cda5a-6b18-11e4-973b-5ff3fc075b6b")]
	public interface nsICellBroadcastService
	{
		
		/// <summary>
        /// Called to register receiving cellbroadcast messages.
        ///
        /// 'cellbroadcast' permission is required for registration/unregistration.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterListener([MarshalAs(UnmanagedType.Interface)] nsICellBroadcastListener listener);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterListener([MarshalAs(UnmanagedType.Interface)] nsICellBroadcastListener listener);
	}
	
	/// <summary>nsICellBroadcastServiceConsts </summary>
	public class nsICellBroadcastServiceConsts
	{
		
		// <summary>
        // Constant definitions of predefined GSM Geographic Scope
        // See 3GPP TS 23.041 clause 9.4.1.2.1 Serial Number
        // </summary>
		public const ushort GSM_GEOGRAPHICAL_SCOPE_CELL_IMMEDIATE = 0;
		
		// 
		public const ushort GSM_GEOGRAPHICAL_SCOPE_PLMN = 1;
		
		// 
		public const ushort GSM_GEOGRAPHICAL_SCOPE_LOCATION_AREA = 2;
		
		// 
		public const ushort GSM_GEOGRAPHICAL_SCOPE_CELL = 3;
		
		// 
		public const ushort GSM_GEOGRAPHICAL_SCOPE_INVALID = 0xFFFF;
		
		// <summary>
        // Constant definitions of predefined GSM Message Class
        // See 3GPP TS 23.038 clause 5 CBS Data Coding Scheme
        //
        // Set to GSM_MESSAGE_CLASS_NORMAL if no message class is specified.
        // </summary>
		public const ushort GSM_MESSAGE_CLASS_0 = 0;
		
		// 
		public const ushort GSM_MESSAGE_CLASS_1 = 1;
		
		// 
		public const ushort GSM_MESSAGE_CLASS_2 = 2;
		
		// 
		public const ushort GSM_MESSAGE_CLASS_3 = 3;
		
		// 
		public const ushort GSM_MESSAGE_CLASS_USER_1 = 4;
		
		// 
		public const ushort GSM_MESSAGE_CLASS_USER_2 = 5;
		
		// 
		public const ushort GSM_MESSAGE_CLASS_NORMAL = 6;
		
		// <summary>
        // Constant definitions of predefined GSM ETWS Warning Types
        // see 3GPP TS 23.041 clause 9.3.24 Warning-Type
        // </summary>
		public const ushort GSM_ETWS_WARNING_EARTHQUAKE = 0;
		
		// 
		public const ushort GSM_ETWS_WARNING_TSUNAMI = 1;
		
		// 
		public const ushort GSM_ETWS_WARNING_EARTHQUAKE_TSUNAMI = 2;
		
		// 
		public const ushort GSM_ETWS_WARNING_TEST = 3;
		
		// 
		public const ushort GSM_ETWS_WARNING_OTHER = 4;
		
		// 
		public const ushort GSM_ETWS_WARNING_INVALID = 0xFFFF;
		
		// <summary>
        // Attribute CdmaServiceCategory is only valid in CDMA network.
        // Set to CDMA_SERVICE_CATEGORY_INVALID if received from GSM/UMTS network.
        // </summary>
		public const ulong CDMA_SERVICE_CATEGORY_INVALID = 0xFFFFFFFF;
	}
}
