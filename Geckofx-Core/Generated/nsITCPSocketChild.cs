// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsITCPSocketChild.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Implemented in C++ as TCPSocketChild, referenced as _socketBridge in TCPSocket.js
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("4277aff0-4c33-11e3-8f96-0800200c9a66")]
	public interface nsITCPSocketChild
	{
		
		/// <summary>
        /// Tell the chrome process to open a corresponding connection with the given parameters
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendOpen([MarshalAs(UnmanagedType.Interface)] nsITCPSocketInternal socket, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase host, ushort port, [MarshalAs(UnmanagedType.U1)] bool ssl, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase binaryType, [MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, ref Gecko.JsVal windowVal, System.IntPtr jsContext);
		
		/// <summary>
        /// Tell the chrome process to perform send and update the tracking number.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendSend(ref Gecko.JsVal data, uint byteOffset, uint byteLength, uint trackingNumber, System.IntPtr jsContext);
		
		/// <summary>
        /// Tell the chrome process to perform equivalent operations to all following methods
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendResume();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendSuspend();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendClose();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendStartTLS();
		
		/// <summary>
        /// Initialize the TCP socket on the child side for IPC. It is called from the child side,
        /// which is generated in receiving a notification of accepting any open request
        /// on the parent side. We use single implementation that works on a child process
        /// as well as in the single process model.
        ///
        /// @param socket
        /// The TCP socket on the child side.
        /// This instance is connected with the child IPC side of the IPC bridge.
        /// @param windowVal
        /// The window object on the child side to create data
        /// as "jsval" for deserialization.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSocketAndWindow([MarshalAs(UnmanagedType.Interface)] nsITCPSocketInternal socket, ref Gecko.JsVal windowVal, System.IntPtr jsContext);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetHostAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aHost);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetPortAttribute();
	}
}
