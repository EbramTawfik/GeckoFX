// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsISecureElementConnector.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1ff3f35a-1b6f-4e65-a89e-a363b8604cd7")]
	public interface nsISEChannelCallback
	{
		
		/// <summary>
        /// Callback function to notify on successfully opening a logical channel.
        ///
        /// @param channel
        /// The Channel Number/Handle that is successfully opened.
        /// @param openResponse
        /// Response from SE for OpenChannel operation.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyOpenChannelSuccess(int channel, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase openResponse);
		
		/// <summary>
        /// Callback function to notify on successfully closing the logical channel.
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyCloseChannelSuccess();
		
		/// <summary>
        /// Callback function to notify the status of 'seExchangeAPDU' command.
        ///
        /// @param sw1
        /// Response's First Status Byte
        /// @param sw2
        /// Response's Second Status Byte
        /// @param data
        /// Response's data
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyExchangeAPDUResponse(System.IntPtr sw1, System.IntPtr sw2, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase data);
		
		/// <summary>
        /// Callback function to notify error
        ///
        /// @param error
        /// Error describing the reason for failure.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase error);
	}
	
	/// <summary>nsISEListener </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("417f59ee-f582-45b9-9a4e-e9dcefecb4f7")]
	public interface nsISEListener
	{
		
		/// <summary>Member NotifySEPresenceChanged </summary>
		/// <param name='seType'> </param>
		/// <param name='isPresent'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifySEPresenceChanged([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase seType, [MarshalAs(UnmanagedType.U1)] bool isPresent);
	}
	
	/// <summary>nsISecureElementConnector </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("3cef313a-1d01-432d-9cd2-6610a80911f3")]
	public interface nsISecureElementConnector
	{
		
		/// <summary>
        /// Open a logical communication channel with the specific secure element type
        ///
        /// @param aid
        /// Application Identifier of the Card Applet on the secure element.
        /// @param callback
        /// callback to notify the result of the operation.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OpenChannel([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aid, [MarshalAs(UnmanagedType.Interface)] nsISEChannelCallback callback);
		
		/// <summary>
        /// Exchanges APDU channel with the specific secure element type
        ///
        /// @param channel
        /// Channel on which C-APDU to be transmitted.
        /// @param cla
        ///             Class Byte.
        /// @param ins
        ///             Instruction Byte
        /// @param p1
        ///             Reference parameter first byte
        /// @param p2
        ///             Reference parameter second byte
        /// Refer to 3G TS 31.101 , 10.2 'Command APDU Structure' for all the cases.
        /// @param data
        ///             Sequence of C-APDU data octets
        /// @param le [optional]
        /// le is the length of expected response. If the response is not expected,
        ///             it should be explicitly set to -1.
        /// @param callback
        /// callback to notify the result of the operation.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ExchangeAPDU(int channel, System.IntPtr cla, System.IntPtr ins, System.IntPtr p1, System.IntPtr p2, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase data, short le, [MarshalAs(UnmanagedType.Interface)] nsISEChannelCallback callback);
		
		/// <summary>
        /// Closes the logical communication channel to the specific secure element type
        ///
        /// @param channel
        /// Channel to be closed.
        /// @param callback
        /// callback to notify the result of the operation.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CloseChannel(int channel, [MarshalAs(UnmanagedType.Interface)] nsISEChannelCallback callback);
		
		/// <summary>
        /// Register a Secure Element listener
        ///
        /// @param listener
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterListener([MarshalAs(UnmanagedType.Interface)] nsISEListener listener);
		
		/// <summary>
        /// Unregister a Secure Element listener
        ///
        /// @param listener
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterListener([MarshalAs(UnmanagedType.Interface)] nsISEListener listener);
	}
}
