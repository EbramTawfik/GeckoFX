// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIDataCallManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b8bcd6aa-5b06-4362-a68c-317878429e51")]
	public interface nsIRilNetworkInfo : nsINetworkInfo
	{
		
		/// <summary>
        /// Current network state, one of the NETWORK_STATE_* constants.
        ///
        /// When this changes, network interface implementations notify with
        /// updateNetworkInterface() API.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new int GetStateAttribute();
		
		/// <summary>
        /// Network type. One of the NETWORK_TYPE_* constants.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new int GetTypeAttribute();
		
		/// <summary>
        /// Interface name of the network interface this network info belongs to.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetNameAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aName);
		
		/// <summary>
        /// Get the list of ip addresses and prefix lengths, ip address could be IPv4
        /// or IPv6, typically 1 IPv4 or 1 IPv6 or one of each.
        ///
        /// @param ips
        /// The list of ip addresses retrieved.
        /// @param prefixLengths
        /// The list of prefix lengths retrieved.
        ///
        /// @returns the length of the lists.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new uint GetAddresses([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] ref System.IntPtr[] ips, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] ref uint[] prefixLengths);
		
		/// <summary>
        /// Get the list of gateways, could be IPv4 or IPv6, typically 1 IPv4 or 1
        /// IPv6 or one of each.
        ///
        /// @param count
        /// The length of the list of gateways
        ///
        /// @returns the list of gateways.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetGateways(ref uint count, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref System.IntPtr[] gateways);
		
		/// <summary>
        /// Get the list of dnses, could be IPv4 or IPv6.
        ///
        /// @param count
        /// The length of the list of dnses.
        ///
        /// @returns the list of dnses.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetDnses(ref uint count, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref System.IntPtr[] dnses);
		
		/// <summary>
        ///This Source Code Form is subject to the terms of the Mozilla Public
        /// License, v. 2.0. If a copy of the MPL was not distributed with this
        /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetServiceIdAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetIccIdAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aIccId);
		
		/// <summary>
        ///The following attributes are for MMS proxy settings. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMmscAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aMmsc);
		
		/// <summary>
        /// Empty string if not set.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetMmsProxyAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aMmsProxy);
		
		/// <summary>
        /// Empty string if not set.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetMmsPortAttribute();
		
		/// <summary>
        /// Get the list of pcscf addresses, could be IPv4 or IPv6.
        ///
        /// @param count
        /// The length of the list of pcscf addresses.
        ///
        /// @returns the list of pcscf addresses.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPcscf(ref uint count, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref System.IntPtr[] pcscf);
	}
	
	/// <summary>nsIDeactivateDataCallsCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("cb2f0f5b-67f4-4c14-93e8-01e66b630464")]
	public interface nsIDeactivateDataCallsCallback
	{
		
		/// <summary>
        /// Callback function used to notify when all data calls are disconnected.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyDataCallsDisconnected();
	}
	
	/// <summary>nsIDataCallHandler </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("e3feec20-36b4-47de-a7a5-e32a65f20186")]
	public interface nsIDataCallHandler
	{
		
		/// <summary>
        /// PDP APIs
        ///
        /// @param networkType
        /// Mobile network type, that is,
        /// nsINetworkInterface.NETWORK_TYPE_MOBILE or one of the
        /// nsINetworkInterface.NETWORK_TYPE_MOBILE_* values.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetupDataCallByType(int networkType);
		
		/// <summary>Member DeactivateDataCallByType </summary>
		/// <param name='networkType'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeactivateDataCallByType(int networkType);
		
		/// <summary>Member GetDataCallStateByType </summary>
		/// <param name='networkType'> </param>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetDataCallStateByType(int networkType);
		
		/// <summary>
        /// Deactivate all data calls.
        ///
        /// @param callback
        /// Callback to notify when all data calls are disconnected.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DeactivateDataCalls([MarshalAs(UnmanagedType.Interface)] nsIDeactivateDataCallsCallback callback);
		
		/// <summary>
        /// Called to reconsider data call state.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UpdateRILNetworkInterface();
	}
	
	/// <summary>nsIDataCallManager </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2c46e37d-88dc-4d25-bb37-e1c0d3e9cb5f")]
	public interface nsIDataCallManager
	{
		
		/// <summary>Member GetDataDefaultServiceIdAttribute </summary>
		/// <returns>A System.Int32</returns>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetDataDefaultServiceIdAttribute();
		
		/// <summary>
        /// Get the corresponding data call handler.
        ///
        /// @param clientId
        /// clientId of the data call handler to get.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDataCallHandler GetDataCallHandler(uint clientId);
	}
}
