// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsITVSimulatorService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8ecae67d-a959-4f8a-a786-14dc12bd8d3c")]
	public interface nsITVSimulatorService : nsITVService
	{
		
		/// <summary>
        /// XPCOM component which interacts with the underlying TV components.
        ///
        /// NOTE: The implementation is expected to be done by TV vendors to cooperate
        /// with their own TV stack. The methods should not be called on any thread
        /// except for the XPCOM main thread.
        ///
        /// NOTE: The callbacks passing in the methods must be called asynchronously. In
        /// the implementation, actual runnable objects may need to be created and call
        /// the callback off of the runnables, after the function returns.
        /// TVServiceRunnables.h provides some ready-made runnables and could be used in
        /// the following way.
        ///
        /// nsCOMPtr<nsIRunnable> runnable =
        /// new TVServiceNotifyRunnable(callback, dataList, optional errorCode);
        /// return NS_DispatchToCurrentThread(runnable);
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsITVSourceListener GetSourceListenerAttribute();
		
		/// <summary>
        /// XPCOM component which interacts with the underlying TV components.
        ///
        /// NOTE: The implementation is expected to be done by TV vendors to cooperate
        /// with their own TV stack. The methods should not be called on any thread
        /// except for the XPCOM main thread.
        ///
        /// NOTE: The callbacks passing in the methods must be called asynchronously. In
        /// the implementation, actual runnable objects may need to be created and call
        /// the callback off of the runnables, after the function returns.
        /// TVServiceRunnables.h provides some ready-made runnables and could be used in
        /// the following way.
        ///
        /// nsCOMPtr<nsIRunnable> runnable =
        /// new TVServiceNotifyRunnable(callback, dataList, optional errorCode);
        /// return NS_DispatchToCurrentThread(runnable);
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetSourceListenerAttribute([MarshalAs(UnmanagedType.Interface)] nsITVSourceListener aSourceListener);
		
		/// <summary>
        /// Get all tuners.
        ///
        /// @param callback   The callback object where either |notifyError| or
        /// |notifySuccess|, which takes an array of
        /// |nsITVTunerData|, is expected.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetTuners([MarshalAs(UnmanagedType.Interface)] nsITVServiceCallback callback);
		
		/// <summary>
        /// Set the source type to be used by the given tuner.
        ///
        /// @param tunerId    The ID of the tuner.
        /// @param sourceType The source type to be used.
        /// @param callback   The callback object where either |notifyError| or
        /// |notifySuccess| is expected.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetSource([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase tunerId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sourceType, [MarshalAs(UnmanagedType.Interface)] nsITVServiceCallback callback);
		
		/// <summary>
        /// Start scanning channels on the given tuner.
        ///
        /// Once the operation successfully starts, a series of |notifyChannelScanned|
        /// from |nsITVSourceListener| are expected, and followed by one of either
        /// |notifyChannelScanComplete| or |notifyChannelScanStopped|.
        ///
        /// @param tunerId     The ID of the tuner.
        /// @param sourceType  The source type to be used.
        /// @param callback    The callback object where either |notifyError| or
        /// |notifySuccess| is expected.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void StartScanningChannels([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase tunerId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sourceType, [MarshalAs(UnmanagedType.Interface)] nsITVServiceCallback callback);
		
		/// <summary>
        /// Stop scanning channels on the given tuner.
        ///
        /// Once the operation succeeds, a call of |notifyChannelScanStopped| from
        /// |nsITVSourceListener| should be expected.
        ///
        /// @param tunerId    The ID of the tuner.
        /// @param sourceType The source type to be used.
        /// @param callback   The callback object where either |notifyError| or
        /// |notifySuccess| is expected.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void StopScanningChannels([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase tunerId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sourceType, [MarshalAs(UnmanagedType.Interface)] nsITVServiceCallback callback);
		
		/// <summary>
        /// Clear the cache for scanned channels, if any, from the underlying layer.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void ClearScannedChannelsCache();
		
		/// <summary>
        /// Set the channel to be used by the tuner.
        ///
        /// @param tunerId       The ID of the tuner.
        /// @param sourceType    The source type to be used.
        /// @param channelNumber The LCN (Logical Channel Number) of the channel.
        /// @param callback      The callback object where either |notifyError| or
        /// |notifySuccess| is expected.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetChannel([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase tunerId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sourceType, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase channelNumber, [MarshalAs(UnmanagedType.Interface)] nsITVServiceCallback callback);
		
		/// <summary>
        /// Get the channels, ordered by the LCN (Logical Channel Number), of a given
        /// source type.
        ///
        /// @param tunerId       The ID of the tuner.
        /// @param sourceType    The source type to be used.
        /// @param callback      The callback object where either |notifyError| or
        /// |notifySuccess|, which takes an array of
        /// |nsITVChannelData| ordered by the LCN (Logical Channel
        /// Number), is expected.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetChannels([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase tunerId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sourceType, [MarshalAs(UnmanagedType.Interface)] nsITVServiceCallback callback);
		
		/// <summary>
        /// Get the programs, ordered by the start time, of a given channel.
        ///
        /// @param tunerId       The ID of the tuner.
        /// @param sourceType    The source type to be used.
        /// @param channelNumber The LCN (Logical Channel Number) of the channel.
        /// @param startTime     The begining of the searching time frame for programs.
        /// @param endTime       The end of the searching time frame for programs.
        /// @param callback      The callback object where either |notifyError| or
        /// |notifySuccess|, which takes an array of
        /// |nsITVProgramData| ordered by the start time, is
        /// expected.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetPrograms([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase tunerId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sourceType, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase channelNumber, ulong startTime, ulong endTime, [MarshalAs(UnmanagedType.Interface)] nsITVServiceCallback callback);
		
		/// <summary>
        /// Get the overlay ID of a given tuner.
        ///
        /// @param tunerId       The ID of the tuner.
        /// @param callback      The callback object where either |notifyError| or
        /// |notifySuccess|, which takes an array of
        /// |nsISupportsString| with only one element, is expected.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetOverlayId([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase tunerId, [MarshalAs(UnmanagedType.Interface)] nsITVServiceCallback callback);
		
		/// <summary>
        /// Get the URL of simulated video blob.
        ///
        /// @param tunerId       The ID of the tuner.
        /// @param sourceType    The source type to be used.
        /// @param channelNumber The LCN (Logical Channel Number) of the channel.
        /// @param window        The window object of content.
        /// @return blobUrl      The URL of created blob from local video file.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetSimulatorVideoBlobURL([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase tunerId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sourceType, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase channelNumber, [MarshalAs(UnmanagedType.Interface)] nsIDOMWindow window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase blobUrl);
	}
}
