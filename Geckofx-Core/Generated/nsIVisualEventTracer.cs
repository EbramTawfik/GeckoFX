// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIVisualEventTracer.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Interface to control the visual event tracer feature.  The result
    /// is a log of various events that are monitored by a custom code
    /// instrumentation around the mozilla code base.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("713ee3ca-95e0-4085-8616-f6d64a9508ad")]
	public interface nsIVisualEventTracer
	{
		
		/// <summary>
        /// Start the logging now.  No affect if already started.
        /// Current backlog is deleted by this call otherwise.
        ///
        /// @param minBacklogSeconds
        /// Manimum time to keep the backlog.  Entries of the log are discarded
        /// when their age is more then value of this argument.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Start(uint minBacklogSeconds);
		
		/// <summary>
        /// Stop the logging now.  Backlog is kept in memory.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Stop();
		
		/// <summary>
        /// Obtain the log.  This can be called whenever you want.
        ///
        /// @return
        /// Result is an object that keeps snaphot of the log from
        /// time this method has been called.  You can then access
        /// the log using the object.  Calling stop() on the tracer
        /// doesn't delete this log.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIVisualEventTracerLog Snapshot();
	}
	
	/// <summary>nsIVisualEventTracerLog </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8ec6e36d-6cba-400b-bcd6-454679f5f75a")]
	public interface nsIVisualEventTracerLog
	{
		
		/// <summary>
        /// JSON string of the log.  Use JSON.parse to get it as an object.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetJSONStringAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aJSONString);
		
		/// <summary>
        /// Write the JSON string returned by JSONString to the log defined by
        /// the environment variable MOZ_PROFILING_FILE.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WriteToProfilingFile();
	}
}
