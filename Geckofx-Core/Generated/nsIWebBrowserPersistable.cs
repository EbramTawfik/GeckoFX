// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIWebBrowserPersistable.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Interface for objects which represent a document that can be
    /// serialized with nsIWebBrowserPersist.  This interface is
    /// asynchronous because the actual document can be in another process
    /// (e.g., if this object is an nsFrameLoader for an out-of-process
    /// frame).
    ///
    /// Warning: this is currently implemented only by nsFrameLoader, and
    /// may change in the future to become more frame-loader-specific or be
    /// merged into nsIFrameLoader.  See bug 1101100 comment #34.
    ///
    /// @see nsIWebBrowserPersistDocumentReceiver
    /// @see nsIWebBrowserPersistDocument
    /// @see nsIWebBrowserPersist
    ///
    /// @param aOuterWindowID
    /// The outer window ID of the subframe we'd like to persist.
    /// If set at 0, nsIWebBrowserPersistable will attempt to persist
    /// the top-level document. If the outer window ID is for a subframe
    /// that does not exist, or is not held beneath the nsIWebBrowserPersistable,
    /// aRecv's onError method will be called with NS_ERROR_NO_CONTENT.
    /// @param aRecv
    /// The nsIWebBrowserPersistDocumentReceiver is a callback that
    /// will be fired once the document is ready for persisting.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f4c3fa8e-83e9-49f8-ac6f-951fc7541fe4")]
	public interface nsIWebBrowserPersistable
	{
		
		/// <summary>
        /// Interface for objects which represent a document that can be
        /// serialized with nsIWebBrowserPersist.  This interface is
        /// asynchronous because the actual document can be in another process
        /// (e.g., if this object is an nsFrameLoader for an out-of-process
        /// frame).
        ///
        /// Warning: this is currently implemented only by nsFrameLoader, and
        /// may change in the future to become more frame-loader-specific or be
        /// merged into nsIFrameLoader.  See bug 1101100 comment #34.
        ///
        /// @see nsIWebBrowserPersistDocumentReceiver
        /// @see nsIWebBrowserPersistDocument
        /// @see nsIWebBrowserPersist
        ///
        /// @param aOuterWindowID
        /// The outer window ID of the subframe we'd like to persist.
        /// If set at 0, nsIWebBrowserPersistable will attempt to persist
        /// the top-level document. If the outer window ID is for a subframe
        /// that does not exist, or is not held beneath the nsIWebBrowserPersistable,
        /// aRecv's onError method will be called with NS_ERROR_NO_CONTENT.
        /// @param aRecv
        /// The nsIWebBrowserPersistDocumentReceiver is a callback that
        /// will be fired once the document is ready for persisting.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartPersistence(ulong aOuterWindowID, [MarshalAs(UnmanagedType.Interface)] nsIWebBrowserPersistDocumentReceiver aRecv);
	}
}
